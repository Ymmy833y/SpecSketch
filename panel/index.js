(()=>{"use strict";function e(e,t){return chrome.i18n.getMessage(e,t)||e}const t={get:e,localize:function(t=document){t.querySelectorAll("[data-i18n]").forEach(t=>{const n=t.getAttribute("data-i18n");n&&(t.textContent=e(n))}),t.querySelectorAll("[data-i18n-attr]").forEach(t=>{const n=t.getAttribute("data-i18n-attr");if(n)for(const a of n.split(";")){const[n,r]=a.split(":").map(e=>e?.trim());n&&r&&t.setAttribute(n,e(r))}})}},n="PING",a="TOGGLE_SELECT",r="RENDER",o="CLEAR",i="SELECTED",c="CLOSE_PANEL";function s(e){return!e||e.startsWith("chrome://")||e.startsWith("edge://")||e.startsWith("about:")||e.startsWith("moz-extension://")}const d="spsk:panel-content:v1";class l{rpc;constructor(e){this.rpc=e}send(e){const t={id:crypto.randomUUID(),expectReply:!1,...e};return this.rpc.send(t)}render(e){return this.send({type:r,payload:{items:e}})}toggleSelect(e){return this.send({type:a,payload:{enabled:e}})}clear(){return this.send({type:o})}ping(){const e={id:crypto.randomUUID(),expectReply:!0,type:n};return this.rpc.send(e,5e3)}}class m{port;pending=new Map;constructor(e){this.port=e,this.port.onMessage.addListener(e=>{(function(e){return"object"==typeof e&&null!==e&&"id"in e&&"ok"in e})(e)&&(this.pending.get(e.id)?.(e),this.pending.delete(e.id))}),this.port.onDisconnect.addListener(()=>{for(const[,e]of this.pending)e({id:"",ok:!1,error:"disconnected"});this.pending.clear()})}send(e,t=5e3){return new Promise(n=>{if(e.expectReply){const a=setTimeout(()=>{this.pending.delete(e.id),n(void 0)},t);this.pending.set(e.id,e=>{clearTimeout(a),n(e)})}try{this.port.postMessage(e)}catch{return e.expectReply&&this.pending.delete(e.id),void n(void 0)}e.expectReply||n(void 0)})}}function u(){const e=chrome.runtime.lastError;return e?new Error(e.message||String(e)):null}async function g(e,t,n){return await new Promise((a,r)=>{chrome.debugger.sendCommand(e,t,n??{},e=>{const t=u();t?r(t):a(e??{})})})}const p="screenStateByPage";async function h(){return(await chrome.storage.local.get(p))[p]??{}}async function y(e){return(await h())[e]??{items:[],nextId:1,nextLabel:1}}async function b(e,t){const n=await h();n[e]=t,await async function(e){await chrome.storage.local.set({[p]:e})}(n)}const f="CONNECTED",w={RESTRICTED:"status_restricted",CONNECTING:"status_connecting",CONNECTED:"status_connected",DISCONNECTED:"status_disconnected"},E={RESTRICTED:{body:["bg-amber-50","border-amber-200","text-amber-700","dark:bg-amber-950","dark:border-amber-900/50","dark:text-amber-300"],dot:["bg-amber-500"]},CONNECTING:{body:["bg-sky-50","border-sky-200","text-sky-700","dark:bg-sky-950","dark:border-sky-900/50","dark:text-sky-300"],dot:["bg-sky-500"]},CONNECTED:{body:["bg-emerald-50","border-emerald-200","text-emerald-700","dark:bg-emerald-950","dark:border-emerald-900/50","dark:text-emerald-300"],dot:["bg-emerald-500"]},DISCONNECTED:{body:["bg-rose-50","border-rose-200","text-rose-700","dark:bg-rose-950","dark:border-rose-900/50","dark:text-rose-300"],dot:["bg-rose-500"]}},x=document.getElementById("status"),C=document.getElementById("toggle-select-icon"),I=document.getElementById("toggle-select-label"),v=document.getElementById("select-count"),k=document.getElementById("select-empty"),N=document.getElementById("select-list"),S=["inline-flex","items-center","gap-1","rounded-full","border","px-2","py-1","text-xs","transition-colors"],D=["inline-block","w-3","h-3","rounded-full"],L=["bg-emerald-500"],T=["bg-slate-300"];function M(e){const n=E[e];x.className="",x.classList.add(...S,...n.body);const a=document.createElement("span");a.classList.add("h-1.5","w-1.5","rounded-full",...n.dot);const r=document.createElement("span");var o;r.textContent=function(e){const n=w[e];return t.get(n)||n}(e),x.replaceChildren(a,r),o=e!==f,document.querySelectorAll("button").forEach(e=>e.disabled=o)}function R(e){C.className="",C.classList.add(...D,...e?L:T),I.textContent=t.get(e?"toggle_on":"toggle_off")}function O(e){const t=0===e.length;if(v.textContent=String(e.length),t)return k.classList.remove("hidden"),void N.replaceChildren();k.classList.add("hidden");const n=document.createDocumentFragment();for(const t of e){const e=document.createElement("li");e.className="group flex items-center gap-3 p-3 hover:bg-slate-50 dark:hover:bg-slate-800/60",e.dataset.id=String(t.id);const a=document.createElement("span");a.className="inline-flex h-6 w-6 items-center justify-center rounded-md bg-indigo-600/10 text-indigo-700 dark:text-indigo-300 text-xs font-semibold",a.textContent=String(t.label);const r=document.createElement("div");r.className="min-w-0 flex-1";const o=document.createElement("div");o.className="text-sm font-medium truncate",o.textContent=t.anchor.value,r.append(o),e.append(a,r),n.appendChild(e)}N.replaceChildren(n)}const B=document.getElementById("toggle-select"),P=document.getElementById("clear"),$=document.getElementById("capture");let A=null,_="",q=!1;(async function(){t.localize(document);const e=await async function(){return(await chrome.tabs.query({active:!0,currentWindow:!0}))[0]}();if(!e?.id||s(e.url))return M("RESTRICTED");A=e.id,_=function(e,t=!1){try{const n=new URL(e);return t?`${n.origin}${n.pathname}${n.search}${n.hash}`:`${n.origin}${n.pathname}${n.search}`}catch{return e}}(e.url),M("CONNECTING");const n=await async function(e){await chrome.scripting.executeScript({target:{tabId:e},files:["content/main.js"]}).catch(()=>{});const t=chrome.tabs.connect(e,{name:d}),n=new m(t),a=new l(n),r=[];return t.onDisconnect.addListener(()=>r.forEach(e=>e())),{api:a,port:t,rpc:n,onDisconnect:e=>r.push(e),dispose:()=>{try{t.disconnect()}catch{}}}}(A);n.onDisconnect(()=>{M("DISCONNECTED"),q=!1,R(q)}),n.port.onMessage.addListener(async e=>{if(e&&e.type&&e.type===i){const t=await async function(e,t){const n=await y(e),a=Array.from(new Set(t.map(e=>e.value))).map(e=>t.find(t=>t.value===e)).filter(Boolean),r=[],o=[];for(const e of a){const t=n.items.find(t=>t.anchor.kind===e.kind&&t.anchor.value===e.value);t?r.push(t.id):o.push({anchor:e})}const i={};return r.length&&(i.removedIds=r),o.length&&(i.added=o),async function(e,t){const n=await y(e),a=!(!t.removedIds||!t.removedIds.length);if(t.removedIds?.length){const e=new Set(t.removedIds);n.items=n.items.filter(t=>!e.has(t.id))}if(t.updated?.length){const e=new Map(n.items.map(e=>[e.id,e]));for(const n of t.updated){const t=e.get(n.id);t&&("number"==typeof n.label&&(t.label=n.label),n.anchor&&(t.anchor=n.anchor),n.meta&&(t.meta=n.meta))}}if(t.added?.length)for(const e of t.added){const t={id:n.nextId++,label:"number"==typeof e.label?e.label:n.nextLabel++,anchor:e.anchor,...e.meta?{meta:e.meta}:{}};n.items.push(t)}return a&&function(e){e.items.forEach((e,t)=>{e.label=t+1}),e.nextLabel=e.items.length+1}(n),await b(e,n),n}(e,i)}(_,e.payload.anchors);O(t.items),await n.api.render(t.items)}}),chrome.runtime.onMessage.addListener(e=>{e?.type===c&&(null!==A&&e.payload?.tabId!==A||window.close())});const a=await y(_);await n.api.render(a.items),O(a.items),M(f),B.onclick=async()=>{q=!q,R(q),await n.api.toggleSelect(q)},P.onclick=async()=>{await b(_,{items:[],nextId:1,nextLabel:1}),O([]),await n.api.clear()},$.onclick=async()=>{try{await async function(e){const t=await chrome.tabs.get(e.tabId);if(!t.id||s(t.url))return void console.warn("Capturing is not possible due to restricted URL:",t.url);const n={tabId:t.id},a=e.format??"png",r=e.settleMs??500,o=e.scale??1;await async function(e){await new Promise((t,n)=>{chrome.debugger.attach(e,"1.3",()=>{const e=u();e?n(e):t()})})}(n);try{await g(n,"Page.enable"),(e.bringToFront??1)&&await g(n,"Page.bringToFront");const i=await g(n,"Page.getLayoutMetrics"),c=Math.max(1,0|Math.ceil(i.cssContentSize?.width??1)),s=Math.max(1,0|Math.ceil(i.cssContentSize?.height??1));await g(n,"Emulation.setDeviceMetricsOverride",{width:c,height:s,deviceScaleFactor:1,mobile:!1,screenWidth:c,screenHeight:s,positionX:0,positionY:0}),await g(n,"Runtime.evaluate",{expression:"window.scrollTo(0,0)"}),await new Promise(e=>setTimeout(e,r));const d={format:a,fromSurface:!0,captureBeyondViewport:!0,clip:{x:0,y:0,width:c,height:s,scale:o}};"jpeg"===a&&"number"==typeof e.quality&&(d.quality=Math.min(100,Math.max(0,Math.round(e.quality))));const{data:l}=await g(n,"Page.captureScreenshot",d),m=`data:${"png"===a?"image/png":"image/jpeg"};base64,${l}`,u=e.filename??function(e,t){let n=(e.title&&e.title.trim()?e.title:"")||(()=>{try{return new URL(e.url??"").host||"page"}catch{return"page"}})();return n=n.replace(/[\\/:*?"<>|]/g,"_").replace(/\s+/g," ").trim(),n.length>80&&(n=n.slice(0,80)),`${n}-${(new Date).toISOString().replace(/[:.]/g,"-")}.${t}`}(t,a);return await chrome.downloads.download({url:m,filename:u,saveAs:!1})}finally{try{await g(n,"Emulation.clearDeviceMetricsOverride")}catch{}try{await async function(e){await new Promise(t=>{chrome.debugger.detach(e,()=>t())})}(n)}catch{}}}({tabId:A})}catch(e){console.error("Full capture failed",e)}}})().catch(console.error)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,