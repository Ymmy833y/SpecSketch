(()=>{"use strict";const e="PING",t="TOGGLE_SELECT",i="RENDER",s="CLEAR",a="HOVER",n="MEASURE_SIZE",r="SELECTED",o="MISSING_IDS",l="CONTENT_SIZE_RESULT",c="ACTIVE_TAB_CHANGED";function d(e){if(!e)return!0;if(e.startsWith("view-source:")||e.startsWith("data:")||e.startsWith("blob:")||e.startsWith("filesystem:"))return!0;let t;try{t=new URL(e)}catch{return!0}return!new Set(["http:","https:","file:"]).has(t.protocol)||!!new Set(["chromewebstore.google.com","chrome.google.com"]).has(t.hostname)}const E=["Gray","Red","Yellow","Green","Blue","Lime","Purple","Pink","Orange","Cyan"],u=["circle","square"],h=["right-top-outside","right-top-inside","right-outside","right-inside","right-bottom-outside","right-bottom-inside","top-outside","top-inside","center","bottom-outside","bottom-inside","left-top-outside","left-top-inside","left-outside","left-inside","left-bottom-outside","left-bottom-inside"],p="__ungrouped__",m="",T={status:"DISCONNECTED",tabId:null,pageKey:"",selectionEnabled:!1,items:[],defaultSize:14,defaultColor:"Blue",defaultShape:"circle",defaultPosition:"left-top-outside",defaultGroup:m,capture:{format:"png",area:"full",quality:90,scale:1,panelExpanded:!1},selectItems:[],missingIds:[]},g="screenStateByPage";async function _(){return(await chrome.storage.local.get(g))[g]??{}}async function S(e){return(await _())[e]??{items:[],nextId:1,defaultSize:14,defaultColor:"Blue",defaultShape:"circle",defaultPosition:"left-top-outside",defaultGroup:m}}async function C(e,t){const i=await _();i[e]=t,await async function(e){await chrome.storage.local.set({[g]:e})}(i)}function f(e){const t=new Map;e.forEach((e,i)=>{const s=(e.group??"").trim();t.has(s)||t.set(s,[]),t.get(s).push({index:i,item:e})});const i=e.slice();for(const[,e]of t)e.sort((e,t)=>e.item.label!==t.item.label?e.item.label-t.item.label:e.item.id-t.item.id),e.forEach(({index:e,item:t},s)=>{const a=s+1;t.label!==a&&(i[e]={...t,label:a})});return i}function A(e,t){return chrome.i18n.getMessage(e,t)||e}const R={get:A,localize:function(e=document){e.querySelectorAll("[data-i18n]").forEach(e=>{const t=e.getAttribute("data-i18n");t&&(e.textContent=A(t))}),e.querySelectorAll("[data-i18n-attr]").forEach(e=>{const t=e.getAttribute("data-i18n-attr");if(t)for(const i of t.split(";")){const[t,s]=i.split(":").map(e=>e?.trim());t&&s&&e.setAttribute(t,A(s))}})}},N="CONNECTED",I={RESTRICTED:"status_restricted",CONNECTING:"status_connecting",CONNECTED:"status_connected",DISCONNECTED:"status_disconnected"},O={RESTRICTED:{body:["bg-amber-50","border-amber-200","text-amber-700","dark:bg-amber-950","dark:border-amber-900/50","dark:text-amber-300"],dot:["bg-amber-500"]},CONNECTING:{body:["bg-sky-50","border-sky-200","text-sky-700","dark:bg-sky-950","dark:border-sky-900/50","dark:text-sky-300"],dot:["bg-sky-500"]},CONNECTED:{body:["bg-emerald-50","border-emerald-200","text-emerald-700","dark:bg-emerald-950","dark:border-emerald-900/50","dark:text-emerald-300"],dot:["bg-emerald-500"]},DISCONNECTED:{body:["bg-rose-50","border-rose-200","text-rose-700","dark:bg-rose-950","dark:border-rose-900/50","dark:text-rose-300"],dot:["bg-rose-500"]}};var b,L;!function(e){e.INIT="INIT",e.CONNECTED="CONNECTED",e.SET_STATUS="SET_STATUS",e.RESTORE_STATE="RESTORE_STATE",e.SET_MISSING_IDS="SET_MISSING_IDS",e.TOGGLE_SELECT="TOGGLE_SELECT",e.CLEAR_ALL="CLEAR_ALL",e.CONTENT_SELECTED="CONTENT_SELECTED",e.SET_BADGE_SIZE="SET_BADGE_SIZE",e.SET_BADGE_COLOR="SET_BADGE_COLOR",e.SET_BADGE_SHAPE="SET_BADGE_SHAPE",e.BADGE_DELETE="BADGE_DELETE",e.SET_BADGE_POSITION="SET_BADGE_POSITION",e.SET_CAPTURE_FORMAT="SET_CAPTURE_FORMAT",e.SET_CAPTURE_AREA="SET_CAPTURE_AREA",e.SET_CAPTURE_QUALITY="SET_CAPTURE_QUALITY",e.SET_CAPTURE_SCALE="SET_CAPTURE_SCALE",e.TOGGLE_CAPTURE_PANEL="TOGGLE_CAPTURE_PANEL",e.MEASURE_CONTENT_SIZE="MEASURE_CONTENT_SIZE",e.CAPTURE_REQUESTED="CAPTURE_REQUESTED",e.CAPTURE_SUCCEEDED="CAPTURE_SUCCEEDED",e.CAPTURE_FAILED="CAPTURE_FAILED",e.REORDER_ITEMS="REORDER_ITEMS",e.SET_GROUP="SET_GROUP",e.PORT_DISCONNECTED="PORT_DISCONNECTED",e.CLOSE_PANEL_REQUESTED="CLOSE_PANEL_REQUESTED",e.ITEM_SELECTION_CHANGED="ITEM_SELECTION_CHANGED",e.ITEM_HOVER_IN="ITEM_HOVER_IN",e.ITEM_HOVER_OUT="ITEM_HOVER_OUT",e.UPDATE_ITEM_COMMENT="UPDATE_ITEM_COMMENT"}(b||(b={})),function(e){e.RENDER_CONTENT="RENDER_CONTENT",e.TOGGLE_SELECT_ON_CONTENT="TOGGLE_SELECT_ON_CONTENT",e.CLEAR_CONTENT="CLEAR_CONTENT",e.HOVER="HOVER",e.MEASURE_CONTENT_SIZE="MEASURE_CONTENT_SIZE",e.CAPTURE="CAPTURE",e.CLEAR_STATE="CLEAR_STATE",e.PERSIST_STATE="PERSIST_STATE",e.NOTIFY_ERROR="NOTIFY_ERROR"}(L||(L={}));const y="spsk:panel-content:v1";class v{rpc;constructor(e){this.rpc=e}send(e){const t={id:crypto.randomUUID(),expectReply:!1,...e};return this.rpc.send(t)}render(e){return this.send({type:i,payload:{items:e}})}toggleSelect(e){return this.send({type:t,payload:{enabled:e}})}clear(){return this.send({type:s})}hover(e){return this.send({type:a,payload:{id:e}})}measureSize(){return this.send({type:n})}ping(){const t={id:crypto.randomUUID(),expectReply:!0,type:e};return this.rpc.send(t,5e3)}}class w{port;pending=new Map;alive=!0;constructor(e){this.port=e,this.port.onMessage.addListener(e=>{(function(e){return"object"==typeof e&&null!==e&&"id"in e&&"ok"in e})(e)&&(this.pending.get(e.id)?.(e),this.pending.delete(e.id))}),this.port.onDisconnect.addListener(()=>{this.alive=!1;const e=chrome.runtime.lastError?.message??"disconnected";for(const[t,i]of this.pending)i({id:t,ok:!1,error:e});this.pending.clear()})}get isAlive(){return this.alive}send(e,t=5e3){return new Promise(i=>{if(!this.alive)return i(void e.expectReply);if(e.expectReply){const s=setTimeout(()=>{this.pending.delete(e.id),i(void 0)},t);this.pending.set(e.id,e=>{clearTimeout(s),i(e)})}try{this.port.postMessage(e)}catch{return e.expectReply&&this.pending.delete(e.id),void i(void 0)}e.expectReply||i(void 0)})}}const G=new Set;async function P(e,t,i){return await new Promise((s,a)=>{chrome.debugger.sendCommand(e,t,i??{},e=>{const t=function(){const e=chrome.runtime.lastError;return e?new Error(e.message||String(e)):null}();t?a(t):s(e??{})})})}async function D(e){const t=await chrome.tabs.get(e.tabId);if(!t.id||d(t.url))return void console.warn("Capturing is not possible due to restricted URL:",t.url);const i={tabId:t.id},s=e.format??"png",a=e.settleMs??500,n=e.scale??1,r=e.area??"full";let o=!1,l=!1;try{o=await async function(e){const t=e.tabId??null;return await new Promise((i,s)=>{chrome.debugger.attach(e,"1.3",()=>{const e=chrome.runtime.lastError;if(!e)return null!=t&&G.add(t),void i(!0);const a=e.message||"";a.includes("Another debugger is already attached")?null!=t&&G.has(t)?i(!1):s(new Error("Debugger is already attached by another client (DevTools/extension).")):s(new Error(a))})})}(i),await P(i,"Page.enable"),(e.bringToFront??1)&&await P(i,"Page.bringToFront");const c=await async function(e,t,i,s){if("viewport"===t){const{x:t,y:s,width:a,height:n}=await async function(e){const t=(await P(e,"Page.getLayoutMetrics")).cssVisualViewport;return{x:Math.max(0,0|Math.floor(t.pageX)),y:Math.max(0,0|Math.floor(t.pageY)),width:Math.max(1,0|Math.ceil(t.clientWidth)),height:Math.max(1,0|Math.ceil(t.clientHeight))}}(e);return{useOverride:!1,clip:{x:t,y:s,width:a,height:n,scale:i},captureBeyondViewport:!0,shouldScrollTop:!1}}const a=Math.max(1,0|Math.ceil(s.width)),n=Math.max(1,0|Math.ceil(s.height));return{useOverride:!0,metrics:{width:a,height:n,deviceScaleFactor:1,mobile:!1,screenWidth:a,screenHeight:n,positionX:0,positionY:0},clip:{x:0,y:0,width:a,height:n,scale:i},captureBeyondViewport:!0,shouldScrollTop:!0}}(i,r,n,e.contentSize);c.shouldScrollTop&&await P(i,"Runtime.evaluate",{expression:"window.scrollTo(0,0)"}),c.useOverride&&c.metrics&&(l=!0,await P(i,"Emulation.setDeviceMetricsOverride",c.metrics)),await new Promise(e=>setTimeout(e,a));const d={format:s,fromSurface:!0,captureBeyondViewport:c.captureBeyondViewport,clip:c.clip};"jpeg"===s&&"number"==typeof e.quality&&(d.quality=Math.min(100,Math.max(0,Math.round(e.quality))));const{data:E}=await P(i,"Page.captureScreenshot",d),u=`data:${"png"===s?"image/png":"image/jpeg"};base64,${E}`,h=e.filename??function(e,t){let i=(e.title&&e.title.trim()?e.title:"")||(()=>{try{return new URL(e.url??"").host||"page"}catch{return"page"}})();return i=i.replace(/[\\/:*?"<>|]/g,"_").replace(/\s+/g," ").trim(),i.length>80&&(i=i.slice(0,80)),`${i}-${(new Date).toISOString().replace(/[:.]/g,"-")}.${t}`}(t,s);return await chrome.downloads.download({url:u,filename:h,saveAs:!1})}finally{if(l)try{await P(i,"Emulation.clearDeviceMetricsOverride")}catch{}if(o)try{await async function(e){const t=e.tabId??null;null!=t&&G.has(t)&&(await async function(e){await new Promise(t=>{chrome.debugger.detach(e,()=>t())})}(e),G.delete(t))}(i)}catch{}}}var U;chrome.debugger.onDetach.addListener(e=>{const t=e.tabId;"number"==typeof t&&G.delete(t)}),function(e){e.TOGGLE_SELECT="TOGGLE_SELECT",e.CLEAR="CLEAR",e.CAPTURE="CAPTURE",e.BADGE_SIZE_CHANGE="BADGE_SIZE_CHANGE",e.BADGE_COLOR_SELECT="BADGE_COLOR_SELECT",e.BADGE_SHAPE_CHANGE="BADGE_SHAPE_CHANGE",e.BADGE_DELETE="BADGE_DELETE",e.BADGE_POSITION_SELECT="BADGE_POSITION_SELECT",e.SET_GROUP="SET_GROUP",e.CAPTURE_FORMAT_CHANGE="CAPTURE_FORMAT_CHANGE",e.CAPTURE_AREA_CHANGE="CAPTURE_AREA_CHANGE",e.CAPTURE_QUALITY_CHANGE="CAPTURE_QUALITY_CHANGE",e.CAPTURE_SCALE_CHANGE="CAPTURE_SCALE_CHANGE",e.TOGGLE_CAPTURE_PANEL="TOGGLE_CAPTURE_PANEL",e.REORDER_ITEMS="REORDER_ITEMS",e.ITEM_SELECTION_CHANGED="ITEM_SELECTION_CHANGED",e.ITEM_HOVER_IN="ITEM_HOVER_IN",e.ITEM_HOVER_OUT="ITEM_HOVER_OUT",e.ITEM_COMMENT_APPLY="ITEM_COMMENT_APPLY"}(U||(U={}));class M{view;model=structuredClone(T);conn=null;currentWindowId=null;static REQUIRES_CONN=new Set([L.RENDER_CONTENT,L.TOGGLE_SELECT_ON_CONTENT,L.CLEAR_CONTENT,L.HOVER]);constructor(e){this.view=e}async start(){this.dispatch({type:b.INIT});const{ok:e}=await this.ensureConnectionAlive({forceReconnect:!0});if(!e)return void this.view.render(this.model);this.registerViewHandlers(),this.view.render(this.model);const t=await chrome.windows.getCurrent();this.currentWindowId=t.id??null,chrome.runtime.onMessage.addListener(e=>{if(e.type!==c)return;const t=e.payload.windowId;null!=this.currentWindowId&&this.currentWindowId===t&&this.ensureConnectionAlive({forceReconnect:!0})})}registerViewHandlers(){this.view.on(U.TOGGLE_SELECT,()=>this.dispatch({type:b.TOGGLE_SELECT})),this.view.on(U.CLEAR,()=>this.dispatch({type:b.CLEAR_ALL})),this.view.on(U.CAPTURE,()=>this.dispatch({type:b.MEASURE_CONTENT_SIZE})),this.view.on(U.BADGE_SIZE_CHANGE,({size:e})=>this.dispatch({type:b.SET_BADGE_SIZE,size:e})),this.view.on(U.BADGE_COLOR_SELECT,({color:e})=>this.dispatch({type:b.SET_BADGE_COLOR,color:e})),this.view.on(U.BADGE_SHAPE_CHANGE,({shape:e})=>this.dispatch({type:b.SET_BADGE_SHAPE,shape:e})),this.view.on(U.BADGE_DELETE,()=>this.dispatch({type:b.BADGE_DELETE})),this.view.on(U.BADGE_POSITION_SELECT,({position:e})=>this.dispatch({type:b.SET_BADGE_POSITION,position:e})),this.view.on(U.TOGGLE_CAPTURE_PANEL,()=>this.dispatch({type:b.TOGGLE_CAPTURE_PANEL})),this.view.on(U.CAPTURE_FORMAT_CHANGE,({format:e})=>this.dispatch({type:b.SET_CAPTURE_FORMAT,format:e})),this.view.on(U.CAPTURE_AREA_CHANGE,({area:e})=>this.dispatch({type:b.SET_CAPTURE_AREA,area:e})),this.view.on(U.CAPTURE_QUALITY_CHANGE,({quality:e})=>this.dispatch({type:b.SET_CAPTURE_QUALITY,quality:e})),this.view.on(U.CAPTURE_SCALE_CHANGE,({scale:e})=>this.dispatch({type:b.SET_CAPTURE_SCALE,scale:e})),this.view.on(U.REORDER_ITEMS,({fromId:e,fromIndex:t,toIndex:i})=>this.dispatch({type:b.REORDER_ITEMS,fromId:e,fromIndex:t,toIndex:i})),this.view.on(U.SET_GROUP,({group:e})=>this.dispatch({type:b.SET_GROUP,group:e})),this.view.on(U.ITEM_SELECTION_CHANGED,e=>this.dispatch({type:b.ITEM_SELECTION_CHANGED,...e})),this.view.on(U.ITEM_HOVER_IN,({id:e})=>this.dispatch({type:b.ITEM_HOVER_IN,id:e})),this.view.on(U.ITEM_HOVER_OUT,()=>this.dispatch({type:b.ITEM_HOVER_OUT})),this.view.on(U.ITEM_COMMENT_APPLY,({id:e,comment:t})=>this.dispatch({type:b.UPDATE_ITEM_COMMENT,id:e,comment:t}))}dispatch(e){const{model:t,effects:i}=function(e,t){switch(t.type){case b.INIT:return{model:e,effects:[]};case b.CONNECTED:return{model:{...e,tabId:t.tabId,pageKey:t.pageKey},effects:[]};case b.SET_STATUS:return t.status===N?{model:{...e,status:t.status},effects:[]}:{model:{...e,items:[],status:t.status},effects:[]};case b.RESTORE_STATE:return{model:{...e,items:t.state.items,defaultSize:t.state.defaultSize,defaultColor:t.state.defaultColor,defaultShape:t.state.defaultShape,defaultPosition:t.state.defaultPosition,defaultGroup:t.state.defaultGroup},effects:[{kind:L.RENDER_CONTENT,items:t.state.items}]};case b.SET_MISSING_IDS:return{model:{...e,missingIds:t.missingIds},effects:[]};case b.TOGGLE_SELECT:{const t=!e.selectionEnabled;return{model:{...e,selectionEnabled:t},effects:[{kind:L.TOGGLE_SELECT_ON_CONTENT,enabled:t}]}}case b.CLEAR_ALL:return{model:{...e,items:[]},effects:[{kind:L.CLEAR_CONTENT},{kind:L.CLEAR_STATE}]};case b.CONTENT_SELECTED:return{model:e,effects:[]};case b.TOGGLE_CAPTURE_PANEL:return{model:{...e,capture:{...e.capture,panelExpanded:!e.capture.panelExpanded}},effects:[]};case b.SET_BADGE_SIZE:{const i=e.items.map(i=>({...i,...e.selectItems.includes(i.id)?{size:t.size}:{}}));return{model:{...e,defaultSize:t.size,items:i},effects:[{kind:L.PERSIST_STATE},{kind:L.RENDER_CONTENT,items:i}]}}case b.SET_BADGE_COLOR:{const i=e.items.map(i=>({...i,...e.selectItems.includes(i.id)?{color:t.color}:{}}));return{model:{...e,defaultColor:t.color,items:i},effects:[{kind:L.PERSIST_STATE},{kind:L.RENDER_CONTENT,items:i}]}}case b.SET_BADGE_SHAPE:{const i=e.items.map(i=>({...i,...e.selectItems.includes(i.id)?{shape:t.shape}:{}}));return{model:{...e,defaultShape:t.shape,items:i},effects:[{kind:L.PERSIST_STATE},{kind:L.RENDER_CONTENT,items:i}]}}case b.BADGE_DELETE:{const t=f(e.items.filter(t=>!e.selectItems.includes(t.id)));return{model:{...e,items:t},effects:[{kind:L.PERSIST_STATE},{kind:L.RENDER_CONTENT,items:t}]}}case b.SET_BADGE_POSITION:{const i=e.items.map(i=>({...i,...e.selectItems.includes(i.id)?{position:t.position}:{}}));return{model:{...e,defaultPosition:t.position,items:i},effects:[{kind:L.PERSIST_STATE},{kind:L.RENDER_CONTENT,items:i}]}}case b.SET_GROUP:{const i=function(e,t,i){const s=(i??"").trim();let a=0;return e.sort((e,t)=>t.id-e.id).map(e=>{if(t.includes(e.id)&&e.group!==s){const t=Number.MAX_SAFE_INTEGER-a++;return{...e,group:s,label:t}}return e})}(e.items,e.selectItems,t.group),s=f(i);return{model:{...e,defaultGroup:t.group,items:s},effects:[{kind:L.PERSIST_STATE},{kind:L.RENDER_CONTENT,items:s}]}}case b.SET_CAPTURE_FORMAT:return{model:{...e,capture:{...e.capture,format:t.format}},effects:[]};case b.SET_CAPTURE_AREA:return{model:{...e,capture:{...e.capture,area:t.area}},effects:[]};case b.SET_CAPTURE_QUALITY:return{model:{...e,capture:{...e.capture,quality:t.quality}},effects:[]};case b.SET_CAPTURE_SCALE:return{model:{...e,capture:{...e.capture,scale:t.scale}},effects:[]};case b.MEASURE_CONTENT_SIZE:return{model:e,effects:[{kind:L.MEASURE_CONTENT_SIZE}]};case b.CAPTURE_REQUESTED:return null==e.tabId?{model:e,effects:[{kind:L.NOTIFY_ERROR,error:"No tabId"}]}:{model:e,effects:[{kind:L.CAPTURE,payload:{tabId:e.tabId,format:e.capture.format,area:e.capture.area,quality:e.capture.quality,scale:e.capture.scale,contentSize:t.contentSize}}]};case b.CAPTURE_SUCCEEDED:return{model:e,effects:[]};case b.CAPTURE_FAILED:return{model:e,effects:[{kind:L.NOTIFY_ERROR,error:t.error}]};case b.REORDER_ITEMS:{const i=function(e,t,i,s){if(s<0||s>=e.length)throw new RangeError(`toIndex out of range: ${s}`);const a=e.findIndex(e=>e.id===t);if(-1===a)throw new Error(`Item not found for id=${t}`);if(s<0||s>=e.filter(t=>t.group===e[a].group).length)throw new RangeError(`toIndex out of range: ${s}`);const n=s+(i<s?1.1:.1);return e.map(e=>e.id===t?{...e,label:n}:e)}(e.items,t.fromId,t.fromIndex,t.toIndex),s=f(i);return{model:{...e,items:s},effects:[{kind:L.PERSIST_STATE},{kind:L.RENDER_CONTENT,items:s}]}}case b.ITEM_SELECTION_CHANGED:if("id"in t){const i=function(e,t,i){return t&&!i.includes(e)?[...i,e]:i.filter(t=>t!==e)}(t.id,t.isCheck,e.selectItems);return{model:{...e,selectItems:i},effects:[]}}if("group"in t){const i=function(e,t,i,s){const a=e.trim(),n=s.filter(e=>(e.group??m).trim()===a).map(e=>e.id);if(0===n.length)return i;if(t){const e=new Set(i);for(const t of n)e.add(t);return[...e]}{const e=new Set(n);return i.filter(t=>!e.has(t))}}(t.group,t.isCheck,e.selectItems,e.items);return{model:{...e,selectItems:i},effects:[]}}{const a=(i=t.allCheck,s=e.items,i?s.map(e=>e.id):[]);return{model:{...e,selectItems:a},effects:[]}}case b.ITEM_HOVER_IN:return{model:e,effects:[{kind:L.HOVER,id:t.id}]};case b.ITEM_HOVER_OUT:return{model:e,effects:[{kind:L.HOVER,id:null}]};case b.UPDATE_ITEM_COMMENT:{const i=e.items.map(e=>({...e,...e.id===t.id?{comment:t.comment}:{}}));return{model:{...e,items:i},effects:[{kind:L.PERSIST_STATE},{kind:L.RENDER_CONTENT,items:i}]}}case b.PORT_DISCONNECTED:return{model:{...e,status:"DISCONNECTED",selectionEnabled:!1},effects:[{kind:L.TOGGLE_SELECT_ON_CONTENT,enabled:!1}]};default:return{model:e,effects:[]}}var i,s}(this.model,e);this.model=t,this.view.render(this.model),this.execEffects(i).catch(console.error)}async execEffects(e){if(e.some(e=>M.REQUIRES_CONN.has(e.kind))){const e=await this.ensureConnectionAlive();if(!e.ok||e.contextChanged)return}for(const t of e)switch(t.kind){case L.RENDER_CONTENT:await(this.conn?.api.render(t.items));break;case L.TOGGLE_SELECT_ON_CONTENT:await(this.conn?.api.toggleSelect(t.enabled));break;case L.CLEAR_CONTENT:await(this.conn?.api.clear());break;case L.HOVER:await(this.conn?.api.hover(t.id));break;case L.CLEAR_STATE:await C(this.model.pageKey,{items:this.model.items,nextId:1,defaultSize:this.model.defaultSize,defaultColor:this.model.defaultColor,defaultShape:this.model.defaultShape,defaultPosition:this.model.defaultPosition,defaultGroup:this.model.defaultGroup});break;case L.PERSIST_STATE:{const e=await S(this.model.pageKey);await C(this.model.pageKey,{...e,items:this.model.items,defaultSize:this.model.defaultSize,defaultColor:this.model.defaultColor,defaultShape:this.model.defaultShape,defaultPosition:this.model.defaultPosition,defaultGroup:this.model.defaultGroup});break}case L.MEASURE_CONTENT_SIZE:await(this.conn?.api.measureSize());break;case L.CAPTURE:try{await D(t.payload),this.dispatch({type:b.CAPTURE_SUCCEEDED})}catch(e){this.dispatch({type:b.CAPTURE_FAILED,error:e})}break;case L.NOTIFY_ERROR:console.error(t.error)}}async ensureConnectionAlive(e){const t=this.model.pageKey;if(!0!==e?.forceReconnect&&void 0!==await(this.conn?.api.ping()))return{ok:!0,contextChanged:!1};const i=await async function(){return(await chrome.tabs.query({active:!0,currentWindow:!0}))[0]}();if(!i?.id||d(i.url))return this.dispatch({type:b.SET_STATUS,status:"RESTRICTED"}),{ok:!1};const s=function(e,t=!1){try{const i=new URL(e);return t?`${i.origin}${i.pathname}${i.search}${i.hash}`:`${i.origin}${i.pathname}${i.search}`}catch{return e}}(i.url),a=i.id;this.dispatch({type:b.CONNECTED,tabId:a,pageKey:s}),this.dispatch({type:b.SET_STATUS,status:"CONNECTING"});try{this.conn?.port.disconnect()}catch{}this.conn=await async function(e){await chrome.scripting.executeScript({target:{tabId:e},files:["content/main.js"]}).catch(()=>{});const t=chrome.tabs.connect(e,{name:y}),i=new w(t),s=new v(i),a=[];return t.onDisconnect.addListener(()=>a.forEach(e=>e())),{api:s,port:t,rpc:i,onDisconnect:e=>a.push(e),dispose:()=>{try{t.disconnect()}catch{}}}}(a),this.conn.onDisconnect(()=>this.dispatch({type:b.PORT_DISCONNECTED})),this.conn.port.onMessage.addListener(async e=>{if(e?.type===r){const t=await async function(e,t){const i=await S(e),s=Array.from(new Set(t.map(e=>e.value))).map(e=>t.find(t=>t.value===e)).filter(Boolean),a=[],n=[];for(const e of s){const t=i.items.find(t=>t.anchor.kind===e.kind&&t.anchor.value===e.value);t?a.push(t.id):n.push({anchor:e})}const r={};return a.length&&(r.removedIds=a),n.length&&(r.added=n),async function(e,t){const i=await S(e);if(t.removedIds?.length){const e=new Set(t.removedIds);i.items=i.items.filter(t=>!e.has(t.id))}if(t.added?.length)for(const e of t.added){const t={id:i.nextId++,label:1/0,anchor:e.anchor,size:i.defaultSize,color:i.defaultColor,shape:i.defaultShape,position:i.defaultPosition,group:i.defaultGroup};i.items.push(t)}return i.items=f(i.items),await C(e,i),i}(e,r)}(this.model.pageKey,e.payload.anchors);this.dispatch({type:b.RESTORE_STATE,state:{items:t.items,defaultSize:t.defaultSize,defaultColor:t.defaultColor,defaultShape:t.defaultShape,defaultPosition:t.defaultPosition,defaultGroup:t.defaultGroup}})}else e?.type===o?this.dispatch({type:b.SET_MISSING_IDS,missingIds:e.payload.missingIds}):e?.type===l&&this.dispatch({type:b.CAPTURE_REQUESTED,contentSize:e.payload})});const n=await S(s);return this.dispatch({type:b.RESTORE_STATE,state:{items:n.items,defaultSize:n.defaultSize,defaultColor:n.defaultColor,defaultShape:n.defaultShape,defaultPosition:n.defaultPosition,defaultGroup:n.defaultGroup}}),this.dispatch({type:b.SET_STATUS,status:N}),{ok:!0,contextChanged:!!t&&t!==s}}}const k={caretDown:{d:"M5.23 7.21a.75.75 0 011.06.02L10 10.939l3.71-3.71a.75.75 0 111.06 1.062L10.53 12.53a.75.75 0 01-1.06 0L5.23 8.27a.75.75 0 01.02-1.06z",viewBox:"0 0 20 20"},caretDownFill:{d:"M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z",viewBox:"0 0 16 16"},caretRight:{d:"M7.293 14.707a1 1 0 01-1.414-1.414L10.172 9 5.879 4.707a1 1 0 011.414-1.414l5 5a1 1 0 010 1.414l-5 5z",viewBox:"0 0 20 20"},caretRightFill:{d:"m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z",viewBox:"0 0 16 16"},warn:{d:"M9.049 2.927a1.5 1.5 0 012.902 0l6.41 11.94A1.5 1.5 0 0117.01 17H2.99a1.5 1.5 0 01-1.351-2.133l6.41-11.94zM11 13a1 1 0 10-2 0 1 1 0 002 0zm-1-2a1 1 0 001-1V7a1 1 0 10-2 0v3a1 1 0 001 1z",viewBox:"0 0 20 20"},comment:{d:"M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H4.414a1 1 0 0 0-.707.293L.854 15.146A.5.5 0 0 1 0 14.793zm5 4a1 1 0 1 0-2 0 1 1 0 0 0 2 0m4 0a1 1 0 1 0-2 0 1 1 0 0 0 2 0m3 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2",viewBox:"0 0 16 16"}};function x(e){const{d:t,viewBox:i="0 0 20 20"}=k[e];return{d:t,viewBox:i}}function B(e,t){return e.label!==t.label?e.label-t.label:e.id-t.id}class H{doc;listeners={};els;NEW_GROUP="__newgroup__";HOVER_OUT_DELAY=1e3;dragEl=null;dragStartParent=null;dragStartIndex=-1;hoverOutTimer=null;collapsedGroups=new Set;constructor(e){this.doc=e,R.localize(e),this.els={status:this.$("#status"),toggleBtn:this.$("#toggle-select"),toggleIcon:this.$("#toggle-select-icon"),toggleLabel:this.$("#toggle-select-label"),clearBtn:this.$("#clear"),captureBtn:this.$("#capture"),list:this.$("#select-list"),empty:this.$("#select-empty"),count:this.$("#select-count"),captureOptionsToggle:this.$("#capture-options-toggle"),captureOptionsPanel:this.$("#capture-options"),captureFmtRadios:this.$all('input[name="capture-format"]'),captureAreaRadios:this.$all('input[name="capture-area"]'),jpegOnlyEls:this.$all(".jpeg-only"),jpegQualityRange:this.$("#jpeg-quality-range"),jpegQualityNumber:this.$("#jpeg-quality-number"),captureScaleRange:this.$("#capture-scale-range"),captureScaleNumber:this.$("#capture-scale-number"),badgeSizeRange:this.$("#badge-size-range"),badgeSizeNumber:this.$("#badge-size-number"),badgeColorButtons:this.$all("#badge-color-pop button"),badgeColorLabel:this.$("#badge-color-label"),badgeColorDot:this.$("#badge-color-dot"),badgeShapeSelect:this.$("#badge-shape-select"),badgeDeleteButton:this.$("#badge-delete-button"),badgePositionButtons:this.$all("#badge-position-pop button"),badgePositionLabel:this.$("#badge-position-label"),badgeGroupSelect:this.$("#badge-group-select"),groupNameModal:this.$("#group-name-modal"),groupNameInput:this.$("#group-name-input"),groupNameCancelBtn:this.$("#group-name-cancel-btn"),groupNameCreatelBtn:this.$("#group-name-create-btn"),itemCommentModal:this.$("#item-comment-modal"),itemCommentInput:this.$("#item-comment-input"),itemCommentIdInput:this.$("#item-comment-id-input"),itemCommentCancelBtn:this.$("#item-comment-cancel-btn"),itemCommentApplyBtn:this.$("#item-comment-apply-btn"),selectItemAllCheckbox:this.$('input[type="checkbox"][name="item-select"][value="all"]')},this.els.toggleBtn.addEventListener("click",()=>this.emit(U.TOGGLE_SELECT,void 0)),this.els.clearBtn.addEventListener("click",()=>this.emit(U.CLEAR,void 0)),this.els.captureBtn.addEventListener("click",()=>this.emit(U.CAPTURE,void 0)),this.els.captureOptionsToggle.addEventListener("click",()=>{this.emit(U.TOGGLE_CAPTURE_PANEL,void 0)}),this.els.captureFmtRadios.forEach(e=>e.addEventListener("change",()=>{this.updateQualityVisibility(),this.emit(U.CAPTURE_FORMAT_CHANGE,{format:this.getSelectedCaptureFormat()})})),this.els.captureAreaRadios.forEach(e=>e.addEventListener("change",()=>{this.emit(U.CAPTURE_AREA_CHANGE,{area:this.getSelectedCaptureArea()})})),this.bindSync(this.els.jpegQualityRange,this.els.jpegQualityNumber,e=>this.emit(U.CAPTURE_QUALITY_CHANGE,{quality:e})),this.bindSync(this.els.captureScaleRange,this.els.captureScaleNumber,e=>this.emit(U.CAPTURE_SCALE_CHANGE,{scale:e})),this.bindSync(this.els.badgeSizeRange,this.els.badgeSizeNumber);const t=()=>{const e=Number(this.els.badgeSizeNumber.value);Number.isFinite(e)&&this.emit(U.BADGE_SIZE_CHANGE,{size:e})};this.els.badgeSizeRange.addEventListener("change",t),this.els.badgeSizeNumber.addEventListener("change",t),this.els.badgeColorButtons.forEach(e=>{e.addEventListener("click",()=>{const t=e.dataset.colorName??"",i="string"==typeof(s=t)&&E.includes(s)?t:"Blue";var s;this.emit(U.BADGE_COLOR_SELECT,{color:i})})}),this.els.badgeShapeSelect.addEventListener("change",()=>{const e=this.els.badgeShapeSelect.value??null,t=function(e){return"string"==typeof e&&u.includes(e)}(e)?e:"circle";this.emit(U.BADGE_SHAPE_CHANGE,{shape:t})}),this.els.badgeDeleteButton.addEventListener("click",()=>{this.emit(U.BADGE_DELETE,void 0)}),this.els.badgePositionButtons.forEach(e=>{e.addEventListener("click",()=>{const t=e.dataset.positionName??"",i="string"==typeof(s=t)&&h.includes(s)?t:"left-top-outside";var s;this.emit(U.BADGE_POSITION_SELECT,{position:i})})}),this.els.badgeGroupSelect.addEventListener("change",()=>{const e=this.els.badgeGroupSelect.value??p,t=e===p?m:e;t===this.NEW_GROUP&&this.els.groupNameModal.classList.remove("hidden"),this.emit(U.SET_GROUP,{group:t})}),this.els.groupNameCancelBtn.addEventListener("click",()=>{this.els.groupNameModal.classList.add("hidden")}),this.els.groupNameCreatelBtn.addEventListener("click",()=>{const e=this.els.groupNameInput.value??p,t=e===p||e===this.NEW_GROUP?m:e;this.emit(U.SET_GROUP,{group:t}),this.els.groupNameModal.classList.add("hidden"),this.els.groupNameInput.value=""}),this.els.itemCommentCancelBtn.addEventListener("click",()=>{this.els.itemCommentModal.classList.add("hidden")}),this.els.itemCommentApplyBtn.addEventListener("click",()=>{const e=this.els.itemCommentInput.value,t=Number(this.els.itemCommentIdInput.value);this.emit(U.ITEM_COMMENT_APPLY,{id:t,comment:e}),this.els.itemCommentModal.classList.add("hidden")}),this.updateQualityVisibility(),this.els.selectItemAllCheckbox.addEventListener("change",e=>{const t=e.target.checked;this.emit(U.ITEM_SELECTION_CHANGED,{allCheck:t})}),this.els.list.addEventListener("pointerenter",()=>this.cancelHoverOut()),this.els.list.addEventListener("pointerleave",()=>this.scheduleHoverOut()),e.addEventListener("pointerleave",()=>{this.cancelHoverOut(),this.emit(U.ITEM_HOVER_OUT,void 0)})}on(e,t){(this.listeners[e]??=[]).push(t)}emit(e,t){const i=this.listeners[e];i?.forEach(e=>e(t))}render(e){this.renderStatus(e.status),this.renderToggle(e.selectionEnabled),this.renderList(e.items,e.selectItems,e.missingIds),this.selectRadioByValue(this.els.captureFmtRadios,e.capture.format),this.selectRadioByValue(this.els.captureAreaRadios,e.capture.area),this.els.jpegQualityNumber.value=String(e.capture.quality),this.els.jpegQualityRange.value=String(e.capture.quality),this.els.captureScaleNumber.value=String(e.capture.scale),this.els.captureScaleRange.value=String(e.capture.scale),this.updateQualityVisibility(e.capture.format),this.applyCaptureOptionsToggleUI(e.capture.panelExpanded),this.els.badgeSizeNumber.value=String(e.defaultSize),this.els.badgeSizeRange.value=String(e.defaultSize),this.applyBadgeColorUI(e.defaultColor),this.els.badgeShapeSelect.value=e.defaultShape,this.applyBadgePositonUI(e.defaultPosition),this.applyBadgeGroupSelectUI(this.getExistingGroups(e.items),e.defaultGroup)}renderStatus(e){const t=O[e],i=this.els.status;i.className="",i.classList.add("connect-status",...t.body);const s=this.doc.createElement("span");s.classList.add("connect-status-dot",...t.dot);const a=this.doc.createElement("span");a.textContent=function(e){const t=I[e];return R.get(t)||t}(e),i.replaceChildren(s,a),this.disabledAllButtons(e!==N)}renderToggle(e){const t=this.els.toggleIcon;t.className="",t.classList.add("select-toggle-icon",e?"bg-indigo-500":"bg-slate-300"),this.els.toggleLabel.textContent=R.get(e?"toggle_on":"toggle_off")}renderList(e,t,i){this.els.count.textContent=String(e.length);const s=0!==e.length&&e.every(e=>t.includes(e.id));if(this.els.selectItemAllCheckbox.checked=s,!e.length)return this.els.empty.classList.remove("hidden"),void this.els.list.replaceChildren();this.els.empty.classList.add("hidden");const a=this.groupByGroup(e),n=Array.from(a.keys()).sort((e,t)=>e===p?-1:t===p?1:e.localeCompare(t)),r=this.doc.createDocumentFragment();for(const e of n){const s=this.renderGroupSection(e,a.get(e),t,i);r.appendChild(s)}this.els.list.replaceChildren(r)}renderGroupSection(e,t,i,s){const a=this.collapsedGroups.has(e),n=this.el("section","select-item-section"),r=this.el("div","select-item-header"),o=this.el("div","spsk-checkwrap"),l=this.el("input","spsk-checkbox spsk-checkbox--normal");l.type="checkbox",l.name="item-select",l.value=e===p?R.get("group_ungrouped"):e,l.checked=t.every(e=>i.includes(e.id)),l.addEventListener("change",t=>{const i=t.target.checked;this.emit(U.ITEM_SELECTION_CHANGED,{group:e===p?m:e,isCheck:i})}),o.append(l);const c=this.el("span","select-item-gh-title",e===p?R.get("group_ungrouped"):e),d=this.el("div","select-item-gh-left");d.append(o,c);const E=this.el("span","select-item-gh-count",String(t.length)),u=this.el("button","select-item-gh-toggle");u.type="button",u.setAttribute("aria-expanded",String(!a));const{d:h,viewBox:T}=x(a?"caretRight":"caretDown"),g=this.createSvgIcon(h,{className:"icon-sm",viewBox:T}),_=g.querySelector("path");u.append(g),r.append(d,E,u);const S=this.el("ul","select-item-list");a&&S.classList.add("hidden"),this.attachUlDnDHandlers(S);for(const e of t.sort(B)){const t=i.includes(e.id);S.appendChild(this.renderItem(e,t,s))}return u.addEventListener("click",()=>{this.collapsedGroups.has(e)?(this.collapsedGroups.delete(e),S.classList.remove("hidden"),_.setAttribute("d",x("caretDown").d),u.setAttribute("aria-expanded","true")):(this.collapsedGroups.add(e),S.classList.add("hidden"),_.setAttribute("d",x("caretRight").d),u.setAttribute("aria-expanded","false"))}),n.append(r,S),n}renderItem(e,t,i){const s=i.includes(e.id),a="select-item",n=this.el("li",s?`group ${a} select-item--warn`:a);n.dataset.id=String(e.id),n.draggable=!0,n.addEventListener("dragstart",e=>{this.dragEl=n,this.dragStartParent=n.parentElement,this.dragStartIndex=Array.prototype.indexOf.call(n.parentElement?.children??[],n),e.dataTransfer&&(e.dataTransfer.effectAllowed="move"),n.classList.add("opacity-60")}),n.addEventListener("dragend",()=>{if(!this.dragEl)return;const e=this.dragEl.parentElement,t=e?Array.prototype.indexOf.call(e.children,this.dragEl):-1;this.dragEl.classList.remove("opacity-60");const i=this.dragEl.dataset.id??"";this.dragEl=null,i&&this.dragStartIndex>=0&&t>=0&&t!==this.dragStartIndex&&this.emit(U.REORDER_ITEMS,{fromId:Number(i),fromIndex:this.dragStartIndex,toIndex:t}),this.dragStartIndex=-1,this.dragStartParent=null});const r=this.el("div","spsk-checkwrap"),o=s?"spsk-checkbox spsk-checkbox--warn":"spsk-checkbox spsk-checkbox--normal",l=this.el("input",o);l.type="checkbox",l.name="item-select",l.value=String(e.id),l.checked=t,l.addEventListener("change",t=>{const i=t.target.checked;this.emit(U.ITEM_SELECTION_CHANGED,{id:e.id,isCheck:i})}),r.append(l);const c=s?"spsk-badge spsk-badge--warn":"spsk-badge spsk-badge--norm",d=this.el("span",c,String(e.label)),E=this.el("div","min-w-0 flex-1");if(E.addEventListener("pointerenter",()=>{this.dragStartParent||s||(this.cancelHoverOut(),this.emit(U.ITEM_HOVER_IN,{id:e.id}))}),s){const e=this.el("span","chip-warn"),{d:t,viewBox:i}=x("warn"),s=this.createSvgIcon(t,{className:"h-3.5 w-3.5",viewBox:i}),a=this.el("span",void 0,R.get("missing_item"));e.append(s,a),E.append(e)}const u=this.el("div","anchor",e.anchor.value);E.append(u);const h=this.generateCommentBtn(e);return n.append(r,d,E,h),n}generateCommentBtn(e){const t=document.createElement("button");t.className="btn-icon";const{d:i,viewBox:s}=x("comment"),a=this.createSvgIcon(i,{className:"h-3.5 w-3.5",viewBox:s});return t.appendChild(a),t.addEventListener("click",()=>{this.els.itemCommentModal.classList.remove("hidden"),this.els.itemCommentInput.value=e.comment??"",this.els.itemCommentIdInput.value=String(e.id)}),t}scheduleHoverOut(){this.hoverOutTimer&&clearTimeout(this.hoverOutTimer),this.dragStartParent||(this.hoverOutTimer=setTimeout(()=>{this.hoverOutTimer=null,this.emit(U.ITEM_HOVER_OUT,void 0)},this.HOVER_OUT_DELAY))}cancelHoverOut(){this.hoverOutTimer&&(clearTimeout(this.hoverOutTimer),this.hoverOutTimer=null)}attachUlDnDHandlers(e){e.addEventListener("dragover",t=>{if(t.preventDefault(),!this.dragEl)return;if(this.dragStartParent&&e!==this.dragStartParent)return;const i=t.target?.closest("li");if(i&&i!==this.dragEl){const s=i.getBoundingClientRect(),a=t.clientY-s.top>s.height/2;e.insertBefore(this.dragEl,a?i.nextSibling:i)}else i||e.appendChild(this.dragEl)}),e.addEventListener("drop",e=>e.preventDefault())}getExistingGroups(e){return Array.from(new Set(e.map(e=>(e.group??"").trim()).filter(e=>e.length>0))).sort((e,t)=>e.localeCompare(t))}groupByGroup(e){const t=new Map;for(const i of e){const e=(i.group??m).trim()||p;t.has(e)||t.set(e,[]),t.get(e).push(i)}return t}getSelectedCaptureFormat(){const e=this.doc.querySelector('input[name="capture-format"]:checked')?.value;return"jpeg"===e?"jpeg":"png"}getSelectedCaptureArea(){const e=this.doc.querySelector('input[name="capture-area"]:checked')?.value;return"viewport"===e?"viewport":"full"}updateQualityVisibility(e){const t="jpeg"===(e??this.getSelectedCaptureFormat());this.els.jpegOnlyEls.forEach(e=>e.classList.toggle("hidden",!t)),this.els.jpegQualityRange.disabled=!t,this.els.jpegQualityNumber.disabled=!t}selectRadioByValue(e,t){e.forEach(e=>e.checked=e.value===t)}bindSync(e,t,i){const s=(e,t)=>{const i=null!=e&&""!==e?Number(e):NaN;return Number.isFinite(i)?i:t},a=a=>{const n=s(t.min||e.min,Number.NEGATIVE_INFINITY),r=s(t.max||e.max,Number.POSITIVE_INFINITY),o=s(t.step||e.step,1),l=Number(a),c=((e,t,i)=>Math.min(Math.max(e,t),i))(Number.isFinite(l)?l:0,n,r),d=Math.round(c/o)*o,E=Number(d.toFixed(6));t.value=String(E),e.value=String(E),i?.(E)};e.addEventListener("input",()=>a(e.value)),t.addEventListener("input",()=>a(t.value))}disabledAllButtons(e){this.doc.querySelectorAll("button").forEach(t=>t.disabled=e)}applyCaptureOptionsToggleUI(e){this.els.captureOptionsToggle.setAttribute("aria-expanded",String(e));const{d:t,viewBox:i}=x(e?"caretDownFill":"caretRightFill");this.els.captureOptionsToggle.innerHTML="",this.els.captureOptionsToggle.appendChild(this.createSvgIcon(t,{viewBox:i,className:"h-4 w-4"})),this.els.captureOptionsPanel.classList.toggle("hidden",!e)}getBadgeColorStyleName(e){return`bg-${("Gray"===e?"slate":e).toLowerCase()}-500`}applyBadgeColorUI(e){this.els.badgeColorButtons.forEach(t=>{const i=t.dataset.colorName===e;t.setAttribute("aria-selected",i?"true":"false")}),this.els.badgeColorLabel.textContent=e,this.els.badgeColorDot.className="inline-block w-4 h-4 rounded-full",this.els.badgeColorDot.classList.add(this.getBadgeColorStyleName(e))}applyBadgePositonUI(e){this.els.badgePositionButtons.forEach(t=>{const i=t.dataset.positionName===e;t.setAttribute("data-selected",i?"true":"false")}),this.els.badgePositionLabel.textContent=e.replaceAll("-"," ")}applyBadgeGroupSelectUI(e,t){this.els.badgeGroupSelect.innerHTML="",this.els.badgeGroupSelect.append(this.makeOpt(p,R.get("group_ungrouped"),t===p));for(const i of e){const e=(e=>(e??"").trim())(i);this.els.badgeGroupSelect.append(this.makeOpt(e,i,t===i))}const i=this.makeOpt(this.NEW_GROUP,R.get("common_create"));this.els.badgeGroupSelect.append(i)}$(e){const t=this.doc.querySelector(e);if(!t)throw new Error(`[PanelView] Missing element: ${e}`);return t}$all(e){return this.doc.querySelectorAll(e)}el(e,t,i){const s=this.doc.createElement(e);return t&&(s.className=t),void 0!==i&&(s.textContent=i),s}makeOpt(e,t,i=!1){const s=this.doc.createElement("option");return s.value=e,s.textContent=t,i&&(s.selected=!0),s}createSvgIcon(e,t={}){const i="http://www.w3.org/2000/svg",s=document.createElementNS(i,"svg");if(s.setAttribute("viewBox",t.viewBox??"0 0 20 20"),s.setAttribute("class",t.className??"h-3.5 w-3.5"),s.setAttribute("fill","currentColor"),s.setAttribute("aria-hidden","true"),t.attrs)for(const[e,i]of Object.entries(t.attrs))s.setAttribute(e,i);const a=document.createElementNS(i,"path");return a.setAttribute("d",e),s.appendChild(a),s}}async function $(){const e=new H(document),t=new M(e);await t.start()}"complete"===document.readyState||"interactive"===document.readyState?$().catch(e=>{console.error("Panel bootstrap failed:",e)}):document.addEventListener("DOMContentLoaded",()=>{$().catch(e=>{console.error("Panel bootstrap failed:",e)})},{once:!0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,