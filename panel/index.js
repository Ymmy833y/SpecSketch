(()=>{"use strict";const e="PING",t="TOGGLE_SELECT",i="RENDER",s="CLEAR",a="HOVER",n="MEASURE_SIZE",o="SELECTED",r="MISSING_IDS",l="CONTENT_SIZE_RESULT",c="ACTIVE_TAB_CHANGED";function d(e){if(!e)return!0;if(e.startsWith("view-source:")||e.startsWith("data:")||e.startsWith("blob:")||e.startsWith("filesystem:"))return!0;let t;try{t=new URL(e)}catch{return!0}return!new Set(["http:","https:","file:"]).has(t.protocol)||!!new Set(["chromewebstore.google.com","chrome.google.com"]).has(t.hostname)}const E=["Gray","Red","Yellow","Green","Blue","Lime","Purple","Pink","Orange","Cyan"],h=["circle","square"],u=["right-top-outside","right-top-inside","right-outside","right-inside","right-bottom-outside","right-bottom-inside","top-outside","top-inside","center","bottom-outside","bottom-inside","left-top-outside","left-top-inside","left-outside","left-inside","left-bottom-outside","left-bottom-inside"],p="__ungrouped__",m="",T={status:"DISCONNECTED",tabId:null,pageKey:"",pageKeys:[],theme:"device",selectionEnabled:!1,items:[],defaultSize:14,defaultColor:"Blue",defaultShape:"circle",defaultPosition:"left-top-outside",defaultGroup:m,capture:{format:"png",area:"full",quality:90,scale:1,panelExpanded:!1},selectItems:[],missingIds:[]},_=function(e,t){const i="screenStateByPage";async function s(){return(await chrome.storage.local.get(i))[i]??{}}async function a(e){await chrome.storage.local.set({[i]:e})}return{key:i,readAll:s,writeAll:a,get:async function(e){const i=(await s())[e];return void 0!==i?i:t?t():void 0},set:async function(e,t){const i=await s();i[e]=t,await a(i)},remove:async function(e){const t=await s();e in t&&(delete t[e],await a(t))},clear:async function(){await a({})}}}(0,()=>({items:[],nextId:1,defaultSize:14,defaultColor:"Blue",defaultShape:"circle",defaultPosition:"left-top-outside",defaultGroup:m})),g=function(){const e="themeMode";return{key:e,get:async function(){const t=(await chrome.storage.local.get(e))[e];return void 0===t?"device":t},set:async function(t){await chrome.storage.local.set({[e]:t})},remove:async function(){await chrome.storage.local.remove(e)}}}();function S(e){const t=new Map;e.forEach((e,i)=>{const s=(e.group??"").trim();t.has(s)||t.set(s,[]),t.get(s).push({index:i,item:e})});const i=e.slice();for(const[,e]of t)e.sort((e,t)=>e.item.label!==t.item.label?e.item.label-t.item.label:e.item.id-t.item.id),e.forEach(({index:e,item:t},s)=>{const a=s+1;t.label!==a&&(i[e]={...t,label:a})});return i}function C(e,t){return chrome.i18n.getMessage(e,t)||e}const f={get:C,localize:function(e=document){e.querySelectorAll("[data-i18n]").forEach(e=>{const t=e.getAttribute("data-i18n");t&&(e.textContent=C(t))}),e.querySelectorAll("[data-i18n-attr]").forEach(e=>{const t=e.getAttribute("data-i18n-attr");if(t)for(const i of t.split(";")){const[t,s]=i.split(":").map(e=>e?.trim());t&&s&&e.setAttribute(t,C(s))}})}},A="CONNECTED",R={RESTRICTED:"status_restricted",CONNECTING:"status_connecting",CONNECTED:"status_connected",DISCONNECTED:"status_disconnected"},N={RESTRICTED:{body:["bg-amber-50","border-amber-200","text-amber-700","dark:bg-amber-950","dark:border-amber-900/50","dark:text-amber-300"],dot:["bg-amber-500"]},CONNECTING:{body:["bg-sky-50","border-sky-200","text-sky-700","dark:bg-sky-950","dark:border-sky-900/50","dark:text-sky-300"],dot:["bg-sky-500"]},CONNECTED:{body:["bg-emerald-50","border-emerald-200","text-emerald-700","dark:bg-emerald-950","dark:border-emerald-900/50","dark:text-emerald-300"],dot:["bg-emerald-500"]},DISCONNECTED:{body:["bg-rose-50","border-rose-200","text-rose-700","dark:bg-rose-950","dark:border-rose-900/50","dark:text-rose-300"],dot:["bg-rose-500"]}};var O,I;!function(e){e.INIT="INIT",e.CONNECTED="CONNECTED",e.SET_STATUS="SET_STATUS",e.RESTORE_STATE="RESTORE_STATE",e.SET_MISSING_IDS="SET_MISSING_IDS",e.TOGGLE_SELECT="TOGGLE_SELECT",e.CLEAR_ALL="CLEAR_ALL",e.CONTENT_SELECTED="CONTENT_SELECTED",e.SET_BADGE_SIZE="SET_BADGE_SIZE",e.SET_BADGE_COLOR="SET_BADGE_COLOR",e.SET_BADGE_SHAPE="SET_BADGE_SHAPE",e.BADGE_DELETE="BADGE_DELETE",e.SET_BADGE_POSITION="SET_BADGE_POSITION",e.SET_CAPTURE_FORMAT="SET_CAPTURE_FORMAT",e.SET_CAPTURE_AREA="SET_CAPTURE_AREA",e.SET_CAPTURE_QUALITY="SET_CAPTURE_QUALITY",e.SET_CAPTURE_SCALE="SET_CAPTURE_SCALE",e.TOGGLE_CAPTURE_PANEL="TOGGLE_CAPTURE_PANEL",e.MEASURE_CONTENT_SIZE="MEASURE_CONTENT_SIZE",e.CAPTURE_REQUESTED="CAPTURE_REQUESTED",e.CAPTURE_SUCCEEDED="CAPTURE_SUCCEEDED",e.CAPTURE_FAILED="CAPTURE_FAILED",e.REORDER_ITEMS="REORDER_ITEMS",e.SET_GROUP="SET_GROUP",e.PORT_DISCONNECTED="PORT_DISCONNECTED",e.CLOSE_PANEL_REQUESTED="CLOSE_PANEL_REQUESTED",e.ITEM_SELECTION_CHANGED="ITEM_SELECTION_CHANGED",e.ITEM_HOVER_IN="ITEM_HOVER_IN",e.ITEM_HOVER_OUT="ITEM_HOVER_OUT",e.UPDATE_ITEM_COMMENT="UPDATE_ITEM_COMMENT",e.SET_THEME="SET_THEME",e.UPDATE_THEME="UPDATE_THEME",e.STORE_RELOAD_REQUESTED="STORE_RELOAD_REQUESTED",e.STORE_RELOAD_SUCCEEDED="STORE_RELOAD_SUCCEEDED",e.REMOVE_SCREEN_STATE_BY_PAGE="REMOVE_SCREEN_STATE_BY_PAGE"}(O||(O={})),function(e){e.RENDER_CONTENT="RENDER_CONTENT",e.TOGGLE_SELECT_ON_CONTENT="TOGGLE_SELECT_ON_CONTENT",e.CLEAR_CONTENT="CLEAR_CONTENT",e.HOVER="HOVER",e.MEASURE_CONTENT_SIZE="MEASURE_CONTENT_SIZE",e.CAPTURE="CAPTURE",e.CLEAR_STATE="CLEAR_STATE",e.PERSIST_STATE="PERSIST_STATE",e.SET_THEME="SET_THEME",e.UPDATE_THEME="UPDATE_THEME",e.READ_SCREEN_STATE_STORE="READ_SCREEN_STATE_STORE",e.REMOVE_SCREEN_STATE_STORE_BY_PAGE_KEY="REMOVE_SCREEN_STATE_STORE_BY_PAGE_KEY",e.NOTIFY_ERROR="NOTIFY_ERROR"}(I||(I={}));const b="spsk:panel-content:v1";class L{rpc;constructor(e){this.rpc=e}send(e){const t={id:crypto.randomUUID(),expectReply:!1,...e};return this.rpc.send(t)}render(e){return this.send({type:i,payload:{items:e}})}toggleSelect(e){return this.send({type:t,payload:{enabled:e}})}clear(){return this.send({type:s})}hover(e){return this.send({type:a,payload:{id:e}})}measureSize(){return this.send({type:n})}ping(){const t={id:crypto.randomUUID(),expectReply:!0,type:e};return this.rpc.send(t,5e3)}}class y{port;pending=new Map;alive=!0;constructor(e){this.port=e,this.port.onMessage.addListener(e=>{(function(e){return"object"==typeof e&&null!==e&&"id"in e&&"ok"in e})(e)&&(this.pending.get(e.id)?.(e),this.pending.delete(e.id))}),this.port.onDisconnect.addListener(()=>{this.alive=!1;const e=chrome.runtime.lastError?.message??"disconnected";for(const[t,i]of this.pending)i({id:t,ok:!1,error:e});this.pending.clear()})}get isAlive(){return this.alive}send(e,t=5e3){return new Promise(i=>{if(!this.alive)return i(void e.expectReply);if(e.expectReply){const s=setTimeout(()=>{this.pending.delete(e.id),i(void 0)},t);this.pending.set(e.id,e=>{clearTimeout(s),i(e)})}try{this.port.postMessage(e)}catch{return e.expectReply&&this.pending.delete(e.id),void i(void 0)}e.expectReply||i(void 0)})}}const v=new Set;async function D(e,t,i){return await new Promise((s,a)=>{chrome.debugger.sendCommand(e,t,i??{},e=>{const t=function(){const e=chrome.runtime.lastError;return e?new Error(e.message||String(e)):null}();t?a(t):s(e??{})})})}async function w(e){const t=await chrome.tabs.get(e.tabId);if(!t.id||d(t.url))return void console.warn("Capturing is not possible due to restricted URL:",t.url);const i={tabId:t.id},s=e.format??"png",a=e.settleMs??500,n=e.scale??1,o=e.area??"full";let r=!1,l=!1;try{r=await async function(e){const t=e.tabId??null;return await new Promise((i,s)=>{chrome.debugger.attach(e,"1.3",()=>{const e=chrome.runtime.lastError;if(!e)return null!=t&&v.add(t),void i(!0);const a=e.message||"";a.includes("Another debugger is already attached")?null!=t&&v.has(t)?i(!1):s(new Error("Debugger is already attached by another client (DevTools/extension).")):s(new Error(a))})})}(i),await D(i,"Page.enable"),(e.bringToFront??1)&&await D(i,"Page.bringToFront");const c=await async function(e,t,i,s){if("viewport"===t){const{x:t,y:s,width:a,height:n}=await async function(e){const t=(await D(e,"Page.getLayoutMetrics")).cssVisualViewport;return{x:Math.max(0,0|Math.floor(t.pageX)),y:Math.max(0,0|Math.floor(t.pageY)),width:Math.max(1,0|Math.ceil(t.clientWidth)),height:Math.max(1,0|Math.ceil(t.clientHeight))}}(e);return{useOverride:!1,clip:{x:t,y:s,width:a,height:n,scale:i},captureBeyondViewport:!0,shouldScrollTop:!1}}const a=Math.max(1,0|Math.ceil(s.width)),n=Math.max(1,0|Math.ceil(s.height));return{useOverride:!0,metrics:{width:a,height:n,deviceScaleFactor:1,mobile:!1,screenWidth:a,screenHeight:n,positionX:0,positionY:0},clip:{x:0,y:0,width:a,height:n,scale:i},captureBeyondViewport:!0,shouldScrollTop:!0}}(i,o,n,e.contentSize);c.shouldScrollTop&&await D(i,"Runtime.evaluate",{expression:"window.scrollTo(0,0)"}),c.useOverride&&c.metrics&&(l=!0,await D(i,"Emulation.setDeviceMetricsOverride",c.metrics)),await new Promise(e=>setTimeout(e,a));const d={format:s,fromSurface:!0,captureBeyondViewport:c.captureBeyondViewport,clip:c.clip};"jpeg"===s&&"number"==typeof e.quality&&(d.quality=Math.min(100,Math.max(0,Math.round(e.quality))));const{data:E}=await D(i,"Page.captureScreenshot",d),h=`data:${"png"===s?"image/png":"image/jpeg"};base64,${E}`,u=e.filename??function(e,t){let i=(e.title&&e.title.trim()?e.title:"")||(()=>{try{return new URL(e.url??"").host||"page"}catch{return"page"}})();return i=i.replace(/[\\/:*?"<>|]/g,"_").replace(/\s+/g," ").trim(),i.length>80&&(i=i.slice(0,80)),`${i}-${(new Date).toISOString().replace(/[:.]/g,"-")}.${t}`}(t,s);return await chrome.downloads.download({url:h,filename:u,saveAs:!1})}finally{if(l)try{await D(i,"Emulation.clearDeviceMetricsOverride")}catch{}if(r)try{await async function(e){const t=e.tabId??null;null!=t&&v.has(t)&&(await async function(e){await new Promise(t=>{chrome.debugger.detach(e,()=>t())})}(e),v.delete(t))}(i)}catch{}}}var P;chrome.debugger.onDetach.addListener(e=>{const t=e.tabId;"number"==typeof t&&v.delete(t)}),function(e){e.TOGGLE_SELECT="TOGGLE_SELECT",e.CLEAR="CLEAR",e.CAPTURE="CAPTURE",e.BADGE_SIZE_CHANGE="BADGE_SIZE_CHANGE",e.BADGE_COLOR_SELECT="BADGE_COLOR_SELECT",e.BADGE_SHAPE_CHANGE="BADGE_SHAPE_CHANGE",e.BADGE_DELETE="BADGE_DELETE",e.BADGE_POSITION_SELECT="BADGE_POSITION_SELECT",e.SET_GROUP="SET_GROUP",e.CAPTURE_FORMAT_CHANGE="CAPTURE_FORMAT_CHANGE",e.CAPTURE_AREA_CHANGE="CAPTURE_AREA_CHANGE",e.CAPTURE_QUALITY_CHANGE="CAPTURE_QUALITY_CHANGE",e.CAPTURE_SCALE_CHANGE="CAPTURE_SCALE_CHANGE",e.TOGGLE_CAPTURE_PANEL="TOGGLE_CAPTURE_PANEL",e.REORDER_ITEMS="REORDER_ITEMS",e.ITEM_SELECTION_CHANGED="ITEM_SELECTION_CHANGED",e.ITEM_HOVER_IN="ITEM_HOVER_IN",e.ITEM_HOVER_OUT="ITEM_HOVER_OUT",e.ITEM_COMMENT_APPLY="ITEM_COMMENT_APPLY",e.UPDATE_THEME="UPDATE_THEME",e.SETTING_MODAL_SHOW="SETTING_MODAL_SHOW",e.REMOVE_PAGE_CLICK="REMOVE_PAGE_CLICK"}(P||(P={}));class G{view;model=structuredClone(T);conn=null;currentWindowId=null;static REQUIRES_CONN=new Set([I.RENDER_CONTENT,I.TOGGLE_SELECT_ON_CONTENT,I.CLEAR_CONTENT,I.HOVER]);constructor(e){this.view=e}async start(){this.dispatch({type:O.INIT});const{ok:e}=await this.ensureConnectionAlive({forceReconnect:!0});if(!e)return void this.view.render(this.model);this.registerViewHandlers(),this.view.render(this.model);const t=await chrome.windows.getCurrent();this.currentWindowId=t.id??null,chrome.runtime.onMessage.addListener(e=>{if(e.type!==c)return;const t=e.payload.windowId;null!=this.currentWindowId&&this.currentWindowId===t&&this.ensureConnectionAlive({forceReconnect:!0})})}registerViewHandlers(){this.view.on(P.TOGGLE_SELECT,()=>this.dispatch({type:O.TOGGLE_SELECT})),this.view.on(P.CLEAR,()=>this.dispatch({type:O.CLEAR_ALL})),this.view.on(P.CAPTURE,()=>this.dispatch({type:O.MEASURE_CONTENT_SIZE})),this.view.on(P.BADGE_SIZE_CHANGE,({size:e})=>this.dispatch({type:O.SET_BADGE_SIZE,size:e})),this.view.on(P.BADGE_COLOR_SELECT,({color:e})=>this.dispatch({type:O.SET_BADGE_COLOR,color:e})),this.view.on(P.BADGE_SHAPE_CHANGE,({shape:e})=>this.dispatch({type:O.SET_BADGE_SHAPE,shape:e})),this.view.on(P.BADGE_DELETE,()=>this.dispatch({type:O.BADGE_DELETE})),this.view.on(P.BADGE_POSITION_SELECT,({position:e})=>this.dispatch({type:O.SET_BADGE_POSITION,position:e})),this.view.on(P.TOGGLE_CAPTURE_PANEL,()=>this.dispatch({type:O.TOGGLE_CAPTURE_PANEL})),this.view.on(P.CAPTURE_FORMAT_CHANGE,({format:e})=>this.dispatch({type:O.SET_CAPTURE_FORMAT,format:e})),this.view.on(P.CAPTURE_AREA_CHANGE,({area:e})=>this.dispatch({type:O.SET_CAPTURE_AREA,area:e})),this.view.on(P.CAPTURE_QUALITY_CHANGE,({quality:e})=>this.dispatch({type:O.SET_CAPTURE_QUALITY,quality:e})),this.view.on(P.CAPTURE_SCALE_CHANGE,({scale:e})=>this.dispatch({type:O.SET_CAPTURE_SCALE,scale:e})),this.view.on(P.REORDER_ITEMS,({fromId:e,fromIndex:t,toIndex:i})=>this.dispatch({type:O.REORDER_ITEMS,fromId:e,fromIndex:t,toIndex:i})),this.view.on(P.SET_GROUP,({group:e})=>this.dispatch({type:O.SET_GROUP,group:e})),this.view.on(P.ITEM_SELECTION_CHANGED,e=>this.dispatch({type:O.ITEM_SELECTION_CHANGED,...e})),this.view.on(P.ITEM_HOVER_IN,({id:e})=>this.dispatch({type:O.ITEM_HOVER_IN,id:e})),this.view.on(P.ITEM_HOVER_OUT,()=>this.dispatch({type:O.ITEM_HOVER_OUT})),this.view.on(P.ITEM_COMMENT_APPLY,({id:e,comment:t})=>this.dispatch({type:O.UPDATE_ITEM_COMMENT,id:e,comment:t})),this.view.on(P.UPDATE_THEME,({theme:e})=>this.dispatch({type:O.UPDATE_THEME,theme:e})),this.view.on(P.SETTING_MODAL_SHOW,()=>this.dispatch({type:O.STORE_RELOAD_REQUESTED})),this.view.on(P.REMOVE_PAGE_CLICK,({pageKey:e})=>this.dispatch({type:O.REMOVE_SCREEN_STATE_BY_PAGE,pageKey:e}))}dispatch(e){const{model:t,effects:i}=function(e,t){switch(t.type){case O.INIT:return{model:e,effects:[{kind:I.SET_THEME}]};case O.CONNECTED:return{model:{...e,tabId:t.tabId,pageKey:t.pageKey},effects:[]};case O.SET_STATUS:return t.status===A?{model:{...e,status:t.status},effects:[]}:{model:{...e,items:[],status:t.status},effects:[]};case O.RESTORE_STATE:return{model:{...e,items:t.state.items,defaultSize:t.state.defaultSize,defaultColor:t.state.defaultColor,defaultShape:t.state.defaultShape,defaultPosition:t.state.defaultPosition,defaultGroup:t.state.defaultGroup},effects:[{kind:I.RENDER_CONTENT,items:t.state.items}]};case O.SET_MISSING_IDS:return{model:{...e,missingIds:t.missingIds},effects:[]};case O.TOGGLE_SELECT:{const t=!e.selectionEnabled;return{model:{...e,selectionEnabled:t},effects:[{kind:I.TOGGLE_SELECT_ON_CONTENT,enabled:t}]}}case O.CLEAR_ALL:return{model:{...e,items:[]},effects:[{kind:I.CLEAR_CONTENT},{kind:I.CLEAR_STATE}]};case O.CONTENT_SELECTED:return{model:e,effects:[]};case O.TOGGLE_CAPTURE_PANEL:return{model:{...e,capture:{...e.capture,panelExpanded:!e.capture.panelExpanded}},effects:[]};case O.SET_BADGE_SIZE:{const i=e.items.map(i=>({...i,...e.selectItems.includes(i.id)?{size:t.size}:{}}));return{model:{...e,defaultSize:t.size,items:i},effects:[{kind:I.PERSIST_STATE},{kind:I.RENDER_CONTENT,items:i}]}}case O.SET_BADGE_COLOR:{const i=e.items.map(i=>({...i,...e.selectItems.includes(i.id)?{color:t.color}:{}}));return{model:{...e,defaultColor:t.color,items:i},effects:[{kind:I.PERSIST_STATE},{kind:I.RENDER_CONTENT,items:i}]}}case O.SET_BADGE_SHAPE:{const i=e.items.map(i=>({...i,...e.selectItems.includes(i.id)?{shape:t.shape}:{}}));return{model:{...e,defaultShape:t.shape,items:i},effects:[{kind:I.PERSIST_STATE},{kind:I.RENDER_CONTENT,items:i}]}}case O.BADGE_DELETE:{const t=S(e.items.filter(t=>!e.selectItems.includes(t.id)));return{model:{...e,items:t},effects:[{kind:I.PERSIST_STATE},{kind:I.RENDER_CONTENT,items:t}]}}case O.SET_BADGE_POSITION:{const i=e.items.map(i=>({...i,...e.selectItems.includes(i.id)?{position:t.position}:{}}));return{model:{...e,defaultPosition:t.position,items:i},effects:[{kind:I.PERSIST_STATE},{kind:I.RENDER_CONTENT,items:i}]}}case O.SET_GROUP:{const i=function(e,t,i){const s=(i??"").trim();let a=0;return e.sort((e,t)=>t.id-e.id).map(e=>{if(t.includes(e.id)&&e.group!==s){const t=Number.MAX_SAFE_INTEGER-a++;return{...e,group:s,label:t}}return e})}(e.items,e.selectItems,t.group),s=S(i);return{model:{...e,defaultGroup:t.group,items:s},effects:[{kind:I.PERSIST_STATE},{kind:I.RENDER_CONTENT,items:s}]}}case O.SET_CAPTURE_FORMAT:return{model:{...e,capture:{...e.capture,format:t.format}},effects:[]};case O.SET_CAPTURE_AREA:return{model:{...e,capture:{...e.capture,area:t.area}},effects:[]};case O.SET_CAPTURE_QUALITY:return{model:{...e,capture:{...e.capture,quality:t.quality}},effects:[]};case O.SET_CAPTURE_SCALE:return{model:{...e,capture:{...e.capture,scale:t.scale}},effects:[]};case O.MEASURE_CONTENT_SIZE:return{model:e,effects:[{kind:I.MEASURE_CONTENT_SIZE}]};case O.CAPTURE_REQUESTED:return null==e.tabId?{model:e,effects:[{kind:I.NOTIFY_ERROR,error:"No tabId"}]}:{model:e,effects:[{kind:I.CAPTURE,payload:{tabId:e.tabId,format:e.capture.format,area:e.capture.area,quality:e.capture.quality,scale:e.capture.scale,contentSize:t.contentSize}}]};case O.CAPTURE_SUCCEEDED:return{model:e,effects:[]};case O.CAPTURE_FAILED:return{model:e,effects:[{kind:I.NOTIFY_ERROR,error:t.error}]};case O.REORDER_ITEMS:{const i=function(e,t,i,s){if(s<0||s>=e.length)throw new RangeError(`toIndex out of range: ${s}`);const a=e.findIndex(e=>e.id===t);if(-1===a)throw new Error(`Item not found for id=${t}`);if(s<0||s>=e.filter(t=>t.group===e[a].group).length)throw new RangeError(`toIndex out of range: ${s}`);const n=s+(i<s?1.1:.1);return e.map(e=>e.id===t?{...e,label:n}:e)}(e.items,t.fromId,t.fromIndex,t.toIndex),s=S(i);return{model:{...e,items:s},effects:[{kind:I.PERSIST_STATE},{kind:I.RENDER_CONTENT,items:s}]}}case O.ITEM_SELECTION_CHANGED:if("id"in t){const i=function(e,t,i){return t&&!i.includes(e)?[...i,e]:i.filter(t=>t!==e)}(t.id,t.isCheck,e.selectItems);return{model:{...e,selectItems:i},effects:[]}}if("group"in t){const i=function(e,t,i,s){const a=e.trim(),n=s.filter(e=>(e.group??m).trim()===a).map(e=>e.id);if(0===n.length)return i;if(t){const e=new Set(i);for(const t of n)e.add(t);return[...e]}{const e=new Set(n);return i.filter(t=>!e.has(t))}}(t.group,t.isCheck,e.selectItems,e.items);return{model:{...e,selectItems:i},effects:[]}}{const a=(i=t.allCheck,s=e.items,i?s.map(e=>e.id):[]);return{model:{...e,selectItems:a},effects:[]}}case O.ITEM_HOVER_IN:return{model:e,effects:[{kind:I.HOVER,id:t.id}]};case O.ITEM_HOVER_OUT:return{model:e,effects:[{kind:I.HOVER,id:null}]};case O.UPDATE_ITEM_COMMENT:{const i=e.items.map(e=>({...e,...e.id===t.id?{comment:t.comment}:{}}));return{model:{...e,items:i},effects:[{kind:I.PERSIST_STATE},{kind:I.RENDER_CONTENT,items:i}]}}case O.PORT_DISCONNECTED:return{model:{...e,status:"DISCONNECTED",selectionEnabled:!1},effects:[{kind:I.TOGGLE_SELECT_ON_CONTENT,enabled:!1}]};case O.SET_THEME:return{model:{...e,theme:t.theme},effects:[]};case O.UPDATE_THEME:return{model:{...e,theme:t.theme},effects:[{kind:I.UPDATE_THEME,theme:t.theme}]};case O.STORE_RELOAD_REQUESTED:return{model:e,effects:[{kind:I.READ_SCREEN_STATE_STORE}]};case O.STORE_RELOAD_SUCCEEDED:return{model:{...e,pageKeys:t.pageKeys},effects:[]};case O.REMOVE_SCREEN_STATE_BY_PAGE:return{model:e,effects:[{kind:I.REMOVE_SCREEN_STATE_STORE_BY_PAGE_KEY,pageKey:t.pageKey}]};default:return{model:e,effects:[]}}var i,s}(this.model,e);this.model=t,this.view.render(this.model),this.execEffects(i).catch(console.error)}async execEffects(e){if(e.some(e=>G.REQUIRES_CONN.has(e.kind))){const e=await this.ensureConnectionAlive();if(!e.ok||e.contextChanged)return}for(const t of e)switch(t.kind){case I.RENDER_CONTENT:await(this.conn?.api.render(t.items));break;case I.TOGGLE_SELECT_ON_CONTENT:await(this.conn?.api.toggleSelect(t.enabled));break;case I.CLEAR_CONTENT:await(this.conn?.api.clear());break;case I.HOVER:await(this.conn?.api.hover(t.id));break;case I.CLEAR_STATE:await _.set(this.model.pageKey,{items:this.model.items,nextId:1,defaultSize:this.model.defaultSize,defaultColor:this.model.defaultColor,defaultShape:this.model.defaultShape,defaultPosition:this.model.defaultPosition,defaultGroup:this.model.defaultGroup});break;case I.PERSIST_STATE:{const e=await _.get(this.model.pageKey);await _.set(this.model.pageKey,{...e,items:this.model.items,defaultSize:this.model.defaultSize,defaultColor:this.model.defaultColor,defaultShape:this.model.defaultShape,defaultPosition:this.model.defaultPosition,defaultGroup:this.model.defaultGroup});break}case I.SET_THEME:{const e=await g.get();this.dispatch({type:O.SET_THEME,theme:e});break}case I.UPDATE_THEME:await g.set(t.theme);break;case I.READ_SCREEN_STATE_STORE:{const e=await _.readAll(),t=Object.keys(e);this.dispatch({type:O.STORE_RELOAD_SUCCEEDED,pageKeys:t});break}case I.REMOVE_SCREEN_STATE_STORE_BY_PAGE_KEY:{await _.remove(t.pageKey);const e=await _.readAll(),i=Object.keys(e);this.dispatch({type:O.STORE_RELOAD_SUCCEEDED,pageKeys:i});const s=await _.get(this.model.pageKey);this.dispatch({type:O.RESTORE_STATE,state:{items:s.items,defaultSize:s.defaultSize,defaultColor:s.defaultColor,defaultShape:s.defaultShape,defaultPosition:s.defaultPosition,defaultGroup:s.defaultGroup}});break}case I.MEASURE_CONTENT_SIZE:await(this.conn?.api.measureSize());break;case I.CAPTURE:try{await w(t.payload),this.dispatch({type:O.CAPTURE_SUCCEEDED})}catch(e){this.dispatch({type:O.CAPTURE_FAILED,error:e})}break;case I.NOTIFY_ERROR:console.error(t.error)}}async ensureConnectionAlive(e){const t=this.model.pageKey;if(!0!==e?.forceReconnect&&void 0!==await(this.conn?.api.ping()))return{ok:!0,contextChanged:!1};const i=await async function(){return(await chrome.tabs.query({active:!0,currentWindow:!0}))[0]}();if(!i?.id||d(i.url))return this.dispatch({type:O.SET_STATUS,status:"RESTRICTED"}),{ok:!1};const s=function(e,t=!1){try{const i=new URL(e);return t?`${i.origin}${i.pathname}${i.search}${i.hash}`:`${i.origin}${i.pathname}${i.search}`}catch{return e}}(i.url),a=i.id;this.dispatch({type:O.CONNECTED,tabId:a,pageKey:s}),this.dispatch({type:O.SET_STATUS,status:"CONNECTING"});try{this.conn?.port.disconnect()}catch{}this.conn=await async function(e){await chrome.scripting.executeScript({target:{tabId:e},files:["content/main.js"]}).catch(()=>{});const t=chrome.tabs.connect(e,{name:b}),i=new y(t),s=new L(i),a=[];return t.onDisconnect.addListener(()=>a.forEach(e=>e())),{api:s,port:t,rpc:i,onDisconnect:e=>a.push(e),dispose:()=>{try{t.disconnect()}catch{}}}}(a),this.conn.onDisconnect(()=>this.dispatch({type:O.PORT_DISCONNECTED})),this.conn.port.onMessage.addListener(async e=>{if(e?.type===o){const t=await async function(e,t){const i=await _.get(e),s=Array.from(new Set(t.map(e=>e.value))).map(e=>t.find(t=>t.value===e)).filter(Boolean),a=[],n=[];for(const e of s){const t=i.items.find(t=>t.anchor.kind===e.kind&&t.anchor.value===e.value);t?a.push(t.id):n.push({anchor:e})}const o={};return a.length&&(o.removedIds=a),n.length&&(o.added=n),async function(e,t){const i=await _.get(e);if(t.removedIds?.length){const e=new Set(t.removedIds);i.items=i.items.filter(t=>!e.has(t.id))}if(t.added?.length)for(const e of t.added){const t={id:i.nextId++,label:1/0,anchor:e.anchor,size:i.defaultSize,color:i.defaultColor,shape:i.defaultShape,position:i.defaultPosition,group:i.defaultGroup};i.items.push(t)}return i.items=S(i.items),await _.set(e,i),i}(e,o)}(this.model.pageKey,e.payload.anchors);this.dispatch({type:O.RESTORE_STATE,state:{items:t.items,defaultSize:t.defaultSize,defaultColor:t.defaultColor,defaultShape:t.defaultShape,defaultPosition:t.defaultPosition,defaultGroup:t.defaultGroup}})}else e?.type===r?this.dispatch({type:O.SET_MISSING_IDS,missingIds:e.payload.missingIds}):e?.type===l&&this.dispatch({type:O.CAPTURE_REQUESTED,contentSize:e.payload})});const n=await _.get(s);return this.dispatch({type:O.RESTORE_STATE,state:{items:n.items,defaultSize:n.defaultSize,defaultColor:n.defaultColor,defaultShape:n.defaultShape,defaultPosition:n.defaultPosition,defaultGroup:n.defaultGroup}}),this.dispatch({type:O.SET_STATUS,status:A}),{ok:!0,contextChanged:!!t&&t!==s}}}const M={caretDown:{d:"M5.23 7.21a.75.75 0 011.06.02L10 10.939l3.71-3.71a.75.75 0 111.06 1.062L10.53 12.53a.75.75 0 01-1.06 0L5.23 8.27a.75.75 0 01.02-1.06z",viewBox:"0 0 20 20"},caretDownFill:{d:"M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z",viewBox:"0 0 16 16"},caretRight:{d:"M7.293 14.707a1 1 0 01-1.414-1.414L10.172 9 5.879 4.707a1 1 0 011.414-1.414l5 5a1 1 0 010 1.414l-5 5z",viewBox:"0 0 20 20"},caretRightFill:{d:"m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z",viewBox:"0 0 16 16"},warn:{d:"M9.049 2.927a1.5 1.5 0 012.902 0l6.41 11.94A1.5 1.5 0 0117.01 17H2.99a1.5 1.5 0 01-1.351-2.133l6.41-11.94zM11 13a1 1 0 10-2 0 1 1 0 002 0zm-1-2a1 1 0 001-1V7a1 1 0 10-2 0v3a1 1 0 001 1z",viewBox:"0 0 20 20"},comment:{d:"M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H4.414a1 1 0 0 0-.707.293L.854 15.146A.5.5 0 0 1 0 14.793zm5 4a1 1 0 1 0-2 0 1 1 0 0 0 2 0m4 0a1 1 0 1 0-2 0 1 1 0 0 0 2 0m3 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2",viewBox:"0 0 16 16"},remove:{d:"M7 3a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v1h3a1 1 0 1 1 0 2h-1l-1 10a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2L5 6H4a1 1 0 1 1 0-2h3V3Zm1 3a1 1 0 0 0-1 1v8a1 1 0 1 0 2 0V7a1 1 0 0 0-1-1Zm4 0a1 1 0 0 0-1 1v8a1 1 0 1 0 2 0V7a1 1 0 0 0-1-1Z",viewBox:"0 0 20 20"}};function U(e){const{d:t,viewBox:i="0 0 20 20"}=M[e];return{d:t,viewBox:i}}function k(e,t){return e.label!==t.label?e.label-t.label:e.id-t.id}class B{doc;listeners={};els;NEW_GROUP="__newgroup__";HOVER_OUT_DELAY=1e3;dragEl=null;dragStartParent=null;dragStartIndex=-1;hoverOutTimer=null;collapsedGroups=new Set;constructor(e){this.doc=e,f.localize(e),this.els={status:this.$("#status"),toggleBtn:this.$("#toggle-select"),toggleIcon:this.$("#toggle-select-icon"),toggleLabel:this.$("#toggle-select-label"),clearBtn:this.$("#clear"),captureBtn:this.$("#capture"),list:this.$("#select-list"),empty:this.$("#select-empty"),count:this.$("#select-count"),captureOptionsToggle:this.$("#capture-options-toggle"),captureOptionsPanel:this.$("#capture-options"),captureFmtRadios:this.$all('input[name="capture-format"]'),captureAreaRadios:this.$all('input[name="capture-area"]'),jpegOnlyEls:this.$all(".jpeg-only"),jpegQualityRange:this.$("#jpeg-quality-range"),jpegQualityNumber:this.$("#jpeg-quality-number"),captureScaleRange:this.$("#capture-scale-range"),captureScaleNumber:this.$("#capture-scale-number"),badgeSizeRange:this.$("#badge-size-range"),badgeSizeNumber:this.$("#badge-size-number"),badgeColorButtons:this.$all("#badge-color-pop button"),badgeColorLabel:this.$("#badge-color-label"),badgeColorDot:this.$("#badge-color-dot"),badgeShapeSelect:this.$("#badge-shape-select"),badgeDeleteButton:this.$("#badge-delete-button"),badgePositionButtons:this.$all("#badge-position-pop button"),badgePositionLabel:this.$("#badge-position-label"),badgeGroupSelect:this.$("#badge-group-select"),groupNameModal:this.$("#group-name-modal"),groupNameInput:this.$("#group-name-input"),groupNameCancelBtn:this.$("#group-name-cancel-btn"),groupNameCreatelBtn:this.$("#group-name-create-btn"),itemCommentModal:this.$("#item-comment-modal"),itemCommentInput:this.$("#item-comment-input"),itemCommentIdInput:this.$("#item-comment-id-input"),itemCommentCancelBtn:this.$("#item-comment-cancel-btn"),itemCommentApplyBtn:this.$("#item-comment-apply-btn"),selectItemAllCheckbox:this.$('input[type="checkbox"][name="item-select"][value="all"]'),settingModal:this.$("#setting-modal"),settingButton:this.$("#setting-button"),settingCloseButton:this.$("#setting-close-btn"),themeLightBtn:this.$("#theme-light-btn"),themeDarkBtn:this.$("#theme-dark-btn"),themeDeviceBtn:this.$("#theme-device-btn"),storeCount:this.$("#store-count"),storeList:this.$("#store-list"),storeEmpty:this.$("#store-empty")},this.els.toggleBtn.addEventListener("click",()=>this.emit(P.TOGGLE_SELECT,void 0)),this.els.clearBtn.addEventListener("click",()=>this.emit(P.CLEAR,void 0)),this.els.captureBtn.addEventListener("click",()=>this.emit(P.CAPTURE,void 0)),this.els.captureOptionsToggle.addEventListener("click",()=>{this.emit(P.TOGGLE_CAPTURE_PANEL,void 0)}),this.els.captureFmtRadios.forEach(e=>e.addEventListener("change",()=>{this.updateQualityVisibility(),this.emit(P.CAPTURE_FORMAT_CHANGE,{format:this.getSelectedCaptureFormat()})})),this.els.captureAreaRadios.forEach(e=>e.addEventListener("change",()=>{this.emit(P.CAPTURE_AREA_CHANGE,{area:this.getSelectedCaptureArea()})})),this.bindSync(this.els.jpegQualityRange,this.els.jpegQualityNumber,e=>this.emit(P.CAPTURE_QUALITY_CHANGE,{quality:e})),this.bindSync(this.els.captureScaleRange,this.els.captureScaleNumber,e=>this.emit(P.CAPTURE_SCALE_CHANGE,{scale:e})),this.bindSync(this.els.badgeSizeRange,this.els.badgeSizeNumber);const t=()=>{const e=Number(this.els.badgeSizeNumber.value);Number.isFinite(e)&&this.emit(P.BADGE_SIZE_CHANGE,{size:e})};this.els.badgeSizeRange.addEventListener("change",t),this.els.badgeSizeNumber.addEventListener("change",t),this.els.badgeColorButtons.forEach(e=>{e.addEventListener("click",()=>{const t=e.dataset.colorName??"",i="string"==typeof(s=t)&&E.includes(s)?t:"Blue";var s;this.emit(P.BADGE_COLOR_SELECT,{color:i})})}),this.els.badgeShapeSelect.addEventListener("change",()=>{const e=this.els.badgeShapeSelect.value??null,t=function(e){return"string"==typeof e&&h.includes(e)}(e)?e:"circle";this.emit(P.BADGE_SHAPE_CHANGE,{shape:t})}),this.els.badgeDeleteButton.addEventListener("click",()=>{this.emit(P.BADGE_DELETE,void 0)}),this.els.badgePositionButtons.forEach(e=>{e.addEventListener("click",()=>{const t=e.dataset.positionName??"",i="string"==typeof(s=t)&&u.includes(s)?t:"left-top-outside";var s;this.emit(P.BADGE_POSITION_SELECT,{position:i})})}),this.els.badgeGroupSelect.addEventListener("change",()=>{const e=this.els.badgeGroupSelect.value??p,t=e===p?m:e;t===this.NEW_GROUP&&this.els.groupNameModal.classList.remove("hidden"),this.emit(P.SET_GROUP,{group:t})}),this.els.groupNameCancelBtn.addEventListener("click",()=>{this.els.groupNameModal.classList.add("hidden")}),this.els.groupNameCreatelBtn.addEventListener("click",()=>{const e=this.els.groupNameInput.value??p,t=e===p||e===this.NEW_GROUP?m:e;this.emit(P.SET_GROUP,{group:t}),this.els.groupNameModal.classList.add("hidden"),this.els.groupNameInput.value=""}),this.els.itemCommentCancelBtn.addEventListener("click",()=>{this.els.itemCommentModal.classList.add("hidden")}),this.els.itemCommentApplyBtn.addEventListener("click",()=>{const e=this.els.itemCommentInput.value,t=Number(this.els.itemCommentIdInput.value);this.emit(P.ITEM_COMMENT_APPLY,{id:t,comment:e}),this.els.itemCommentModal.classList.add("hidden")}),this.els.settingButton.addEventListener("click",()=>{this.els.settingModal.classList.remove("hidden"),this.emit(P.SETTING_MODAL_SHOW,void 0)}),this.els.settingCloseButton.addEventListener("click",()=>{this.els.settingModal.classList.add("hidden")}),this.els.themeLightBtn.addEventListener("click",()=>{this.applyTheme("light"),this.emit(P.UPDATE_THEME,{theme:"light"})}),this.els.themeDarkBtn.addEventListener("click",()=>{this.applyTheme("dark"),this.emit(P.UPDATE_THEME,{theme:"dark"})}),this.els.themeDeviceBtn.addEventListener("click",()=>{this.applyTheme("device"),this.emit(P.UPDATE_THEME,{theme:"device"})}),this.updateQualityVisibility(),this.els.selectItemAllCheckbox.addEventListener("change",e=>{const t=e.target.checked;this.emit(P.ITEM_SELECTION_CHANGED,{allCheck:t})}),this.els.list.addEventListener("pointerenter",()=>this.cancelHoverOut()),this.els.list.addEventListener("pointerleave",()=>this.scheduleHoverOut()),e.addEventListener("pointerleave",()=>{this.cancelHoverOut(),this.emit(P.ITEM_HOVER_OUT,void 0)})}on(e,t){(this.listeners[e]??=[]).push(t)}emit(e,t){const i=this.listeners[e];i?.forEach(e=>e(t))}render(e){this.renderStatus(e.status),this.renderToggle(e.selectionEnabled),this.renderList(e.items,e.selectItems,e.missingIds),this.selectRadioByValue(this.els.captureFmtRadios,e.capture.format),this.selectRadioByValue(this.els.captureAreaRadios,e.capture.area),this.els.jpegQualityNumber.value=String(e.capture.quality),this.els.jpegQualityRange.value=String(e.capture.quality),this.els.captureScaleNumber.value=String(e.capture.scale),this.els.captureScaleRange.value=String(e.capture.scale),this.updateQualityVisibility(e.capture.format),this.applyCaptureOptionsToggleUI(e.capture.panelExpanded),this.els.badgeSizeNumber.value=String(e.defaultSize),this.els.badgeSizeRange.value=String(e.defaultSize),this.applyBadgeColorUI(e.defaultColor),this.els.badgeShapeSelect.value=e.defaultShape,this.applyBadgePositonUI(e.defaultPosition),this.applyBadgeGroupSelectUI(this.getExistingGroups(e.items),e.defaultGroup),this.applyTheme(e.theme),this.applyStore(e.pageKeys)}renderStatus(e){const t=N[e],i=this.els.status;i.className="",i.classList.add("connect-status",...t.body);const s=this.doc.createElement("span");s.classList.add("connect-status-dot",...t.dot);const a=this.doc.createElement("span");a.textContent=function(e){const t=R[e];return f.get(t)||t}(e),i.replaceChildren(s,a),this.disableFormControls(e!==A)}renderToggle(e){const t=this.els.toggleIcon;t.className="",t.classList.add("select-toggle-icon",e?"bg-indigo-500":"bg-slate-300"),this.els.toggleLabel.textContent=f.get(e?"toggle_on":"toggle_off")}renderList(e,t,i){this.els.count.textContent=String(e.length);const s=0!==e.length&&e.every(e=>t.includes(e.id));if(this.els.selectItemAllCheckbox.checked=s,!e.length)return this.els.empty.classList.remove("hidden"),void this.els.list.replaceChildren();this.els.empty.classList.add("hidden");const a=this.groupByGroup(e),n=Array.from(a.keys()).sort((e,t)=>e===p?-1:t===p?1:e.localeCompare(t)),o=this.doc.createDocumentFragment();for(const e of n){const s=this.renderGroupSection(e,a.get(e),t,i);o.appendChild(s)}this.els.list.replaceChildren(o)}renderGroupSection(e,t,i,s){const a=this.collapsedGroups.has(e),n=this.el("section","select-item-section"),o=this.el("div","select-item-header"),r=this.el("div","spsk-checkwrap"),l=this.el("input","spsk-checkbox spsk-checkbox--normal");l.type="checkbox",l.name="item-select",l.value=e===p?f.get("group_ungrouped"):e,l.checked=t.every(e=>i.includes(e.id)),l.addEventListener("change",t=>{const i=t.target.checked;this.emit(P.ITEM_SELECTION_CHANGED,{group:e===p?m:e,isCheck:i})}),r.append(l);const c=this.el("span","select-item-gh-title",e===p?f.get("group_ungrouped"):e),d=this.el("div","select-item-gh-left");d.append(r,c);const E=this.el("span","select-item-gh-count",String(t.length)),h=this.el("button","select-item-gh-toggle");h.type="button",h.setAttribute("aria-expanded",String(!a));const{d:u,viewBox:T}=U(a?"caretRight":"caretDown"),_=this.createSvgIcon(u,{className:"icon-sm",viewBox:T}),g=_.querySelector("path");h.append(_),o.append(d,E,h);const S=this.el("ul","select-item-list");a&&S.classList.add("hidden"),this.attachUlDnDHandlers(S);for(const e of t.sort(k)){const t=i.includes(e.id);S.appendChild(this.renderItem(e,t,s))}return h.addEventListener("click",()=>{this.collapsedGroups.has(e)?(this.collapsedGroups.delete(e),S.classList.remove("hidden"),g.setAttribute("d",U("caretDown").d),h.setAttribute("aria-expanded","true")):(this.collapsedGroups.add(e),S.classList.add("hidden"),g.setAttribute("d",U("caretRight").d),h.setAttribute("aria-expanded","false"))}),n.append(o,S),n}renderItem(e,t,i){const s=i.includes(e.id),a="select-item",n=this.el("li",s?`group ${a} select-item--warn`:a);n.dataset.id=String(e.id),n.draggable=!0,n.addEventListener("dragstart",e=>{this.dragEl=n,this.dragStartParent=n.parentElement,this.dragStartIndex=Array.prototype.indexOf.call(n.parentElement?.children??[],n),e.dataTransfer&&(e.dataTransfer.effectAllowed="move"),n.classList.add("opacity-60")}),n.addEventListener("dragend",()=>{if(!this.dragEl)return;const e=this.dragEl.parentElement,t=e?Array.prototype.indexOf.call(e.children,this.dragEl):-1;this.dragEl.classList.remove("opacity-60");const i=this.dragEl.dataset.id??"";this.dragEl=null,i&&this.dragStartIndex>=0&&t>=0&&t!==this.dragStartIndex&&this.emit(P.REORDER_ITEMS,{fromId:Number(i),fromIndex:this.dragStartIndex,toIndex:t}),this.dragStartIndex=-1,this.dragStartParent=null});const o=this.el("div","spsk-checkwrap"),r=s?"spsk-checkbox spsk-checkbox--warn":"spsk-checkbox spsk-checkbox--normal",l=this.el("input",r);l.type="checkbox",l.name="item-select",l.value=String(e.id),l.checked=t,l.addEventListener("change",t=>{const i=t.target.checked;this.emit(P.ITEM_SELECTION_CHANGED,{id:e.id,isCheck:i})}),o.append(l);const c=s?"spsk-badge spsk-badge--warn":"spsk-badge spsk-badge--norm",d=this.el("span",c,String(e.label)),E=this.el("div","min-w-0 flex-1");if(E.addEventListener("pointerenter",()=>{this.dragStartParent||s||(this.cancelHoverOut(),this.emit(P.ITEM_HOVER_IN,{id:e.id}))}),s){const e=this.el("span","chip-warn"),{d:t,viewBox:i}=U("warn"),s=this.createSvgIcon(t,{className:"h-3.5 w-3.5",viewBox:i}),a=this.el("span",void 0,f.get("missing_item"));e.append(s,a),E.append(e)}const h=this.el("div","anchor",e.anchor.value);E.append(h);const u=this.generateCommentBtn(e);return n.append(o,d,E,u),n}generateCommentBtn(e){const t=document.createElement("button");t.className="btn-icon";const{d:i,viewBox:s}=U("comment"),a=this.createSvgIcon(i,{className:"h-3.5 w-3.5",viewBox:s});return t.appendChild(a),t.addEventListener("click",()=>{this.els.itemCommentModal.classList.remove("hidden"),this.els.itemCommentInput.value=e.comment??"",this.els.itemCommentIdInput.value=String(e.id)}),t}scheduleHoverOut(){this.hoverOutTimer&&clearTimeout(this.hoverOutTimer),this.dragStartParent||(this.hoverOutTimer=setTimeout(()=>{this.hoverOutTimer=null,this.emit(P.ITEM_HOVER_OUT,void 0)},this.HOVER_OUT_DELAY))}cancelHoverOut(){this.hoverOutTimer&&(clearTimeout(this.hoverOutTimer),this.hoverOutTimer=null)}attachUlDnDHandlers(e){e.addEventListener("dragover",t=>{if(t.preventDefault(),!this.dragEl)return;if(this.dragStartParent&&e!==this.dragStartParent)return;const i=t.target?.closest("li");if(i&&i!==this.dragEl){const s=i.getBoundingClientRect(),a=t.clientY-s.top>s.height/2;e.insertBefore(this.dragEl,a?i.nextSibling:i)}else i||e.appendChild(this.dragEl)}),e.addEventListener("drop",e=>e.preventDefault())}getExistingGroups(e){return Array.from(new Set(e.map(e=>(e.group??"").trim()).filter(e=>e.length>0))).sort((e,t)=>e.localeCompare(t))}groupByGroup(e){const t=new Map;for(const i of e){const e=(i.group??m).trim()||p;t.has(e)||t.set(e,[]),t.get(e).push(i)}return t}getSelectedCaptureFormat(){const e=this.doc.querySelector('input[name="capture-format"]:checked')?.value;return"jpeg"===e?"jpeg":"png"}getSelectedCaptureArea(){const e=this.doc.querySelector('input[name="capture-area"]:checked')?.value;return"viewport"===e?"viewport":"full"}updateQualityVisibility(e){const t="jpeg"===(e??this.getSelectedCaptureFormat());this.els.jpegOnlyEls.forEach(e=>e.classList.toggle("hidden",!t)),this.els.jpegQualityRange.disabled=!t,this.els.jpegQualityNumber.disabled=!t}selectRadioByValue(e,t){e.forEach(e=>e.checked=e.value===t)}bindSync(e,t,i){const s=(e,t)=>{const i=null!=e&&""!==e?Number(e):NaN;return Number.isFinite(i)?i:t},a=a=>{const n=s(t.min||e.min,Number.NEGATIVE_INFINITY),o=s(t.max||e.max,Number.POSITIVE_INFINITY),r=s(t.step||e.step,1),l=Number(a),c=((e,t,i)=>Math.min(Math.max(e,t),i))(Number.isFinite(l)?l:0,n,o),d=Math.round(c/r)*r,E=Number(d.toFixed(6));t.value=String(E),e.value=String(E),i?.(E)};e.addEventListener("input",()=>a(e.value)),t.addEventListener("input",()=>a(t.value))}disableFormControls(e){this.doc.querySelectorAll("button, select, input, textarea").forEach(t=>{t.hasAttribute("data-ignore-disable")||"disabled"in t&&(t.disabled=e)})}applyCaptureOptionsToggleUI(e){this.els.captureOptionsToggle.setAttribute("aria-expanded",String(e));const{d:t,viewBox:i}=U(e?"caretDownFill":"caretRightFill");this.els.captureOptionsToggle.innerHTML="",this.els.captureOptionsToggle.appendChild(this.createSvgIcon(t,{viewBox:i,className:"h-4 w-4"})),this.els.captureOptionsPanel.classList.toggle("hidden",!e)}getBadgeColorStyleName(e){return`bg-${("Gray"===e?"slate":e).toLowerCase()}-500`}applyBadgeColorUI(e){this.els.badgeColorButtons.forEach(t=>{const i=t.dataset.colorName===e;t.setAttribute("aria-selected",i?"true":"false")}),this.els.badgeColorLabel.textContent=e,this.els.badgeColorDot.className="inline-block w-4 h-4 rounded-full",this.els.badgeColorDot.classList.add(this.getBadgeColorStyleName(e))}applyBadgePositonUI(e){this.els.badgePositionButtons.forEach(t=>{const i=t.dataset.positionName===e;t.setAttribute("data-selected",i?"true":"false")}),this.els.badgePositionLabel.textContent=e.replaceAll("-"," ")}applyBadgeGroupSelectUI(e,t){this.els.badgeGroupSelect.innerHTML="",this.els.badgeGroupSelect.append(this.makeOpt(p,f.get("group_ungrouped"),t===p));for(const i of e){const e=(e=>(e??"").trim())(i);this.els.badgeGroupSelect.append(this.makeOpt(e,i,t===i))}const i=this.makeOpt(this.NEW_GROUP,f.get("common_create"));this.els.badgeGroupSelect.append(i)}applyTheme(e){const t=document.documentElement;("device"===e?window.matchMedia("(prefers-color-scheme: dark)").matches:"dark"===e)?t.classList.add("dark"):t.classList.remove("dark"),this.els.themeLightBtn.setAttribute("data-active",String("light"===e)),this.els.themeDarkBtn.setAttribute("data-active",String("dark"===e)),this.els.themeDeviceBtn.setAttribute("data-active",String("device"===e))}applyStore(e){if(this.els.storeCount.textContent=String(e.length),this.els.storeList.innerHTML="",e.length<=0)return this.els.storeList.classList.add("hidden"),void this.els.storeEmpty.classList.remove("hidden");for(const t of e){const e=this.el("li","select-item"),i=this.el("div","min-w-0 flex-1"),s=this.el("a","anchor whitespace-normal break-words",t);s.href=t,s.target="_blank",i.appendChild(s);const a=this.el("button","btn-icon btn-icon--danger");a.setAttribute("data-ignore-disable","true");const{d:n,viewBox:o}=U("remove"),r=this.createSvgIcon(n,{className:"icon-sm",viewBox:o});a.appendChild(r),e.appendChild(i),e.appendChild(a),this.els.storeList.appendChild(e),a.addEventListener("click",()=>{this.emit(P.REMOVE_PAGE_CLICK,{pageKey:t})})}this.els.storeList.classList.remove("hidden"),this.els.storeEmpty.classList.add("hidden")}$(e){const t=this.doc.querySelector(e);if(!t)throw new Error(`[PanelView] Missing element: ${e}`);return t}$all(e){return this.doc.querySelectorAll(e)}el(e,t,i){const s=this.doc.createElement(e);return t&&(s.className=t),void 0!==i&&(s.textContent=i),s}makeOpt(e,t,i=!1){const s=this.doc.createElement("option");return s.value=e,s.textContent=t,i&&(s.selected=!0),s}createSvgIcon(e,t={}){const i="http://www.w3.org/2000/svg",s=document.createElementNS(i,"svg");if(s.setAttribute("viewBox",t.viewBox??"0 0 20 20"),s.setAttribute("class",t.className??"h-3.5 w-3.5"),s.setAttribute("fill","currentColor"),s.setAttribute("aria-hidden","true"),t.attrs)for(const[e,i]of Object.entries(t.attrs))s.setAttribute(e,i);const a=document.createElementNS(i,"path");return a.setAttribute("d",e),s.appendChild(a),s}}async function x(){const e=new B(document),t=new G(e);await t.start()}"complete"===document.readyState||"interactive"===document.readyState?x().catch(e=>{console.error("Panel bootstrap failed:",e)}):document.addEventListener("DOMContentLoaded",()=>{x().catch(e=>{console.error("Panel bootstrap failed:",e)})},{once:!0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,