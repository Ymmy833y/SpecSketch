(()=>{"use strict";const e="PING",t="TOGGLE_SELECT",s="RENDER",i="CLEAR",a="HOVER",n="MEASURE_SIZE",o="SELECTED",r="MISSING_IDS",l="CONTENT_SIZE_RESULT",c="ACTIVE_TAB_CHANGED";function E(e){if(!e)return!0;if(e.startsWith("view-source:")||e.startsWith("data:")||e.startsWith("blob:")||e.startsWith("filesystem:"))return!0;let t;try{t=new URL(e)}catch{return!0}return!new Set(["http:","https:","file:"]).has(t.protocol)||!!new Set(["chromewebstore.google.com","chrome.google.com"]).has(t.hostname)}const d=["Gray","Red","Yellow","Green","Blue","Lime","Purple","Pink","Orange","Cyan"],h=["circle","square"],u=["right-top-outside","right-top-inside","right-outside","right-inside","right-bottom-outside","right-bottom-inside","top-outside","top-inside","center","bottom-outside","bottom-inside","left-top-outside","left-top-inside","left-outside","left-inside","left-bottom-outside","left-bottom-inside"],p="__ungrouped__",T="",m=["Numbers","UpperAlpha","LowerAlpha","None"];function _(e){if(!e||"object"!=typeof e)return!1;const t=e.anchor;if(!t||"object"!=typeof t)return!1;const s=t;return"css"===s.kind&&"string"==typeof s.value&&("number"==typeof s.version||1===s.version)}const S={status:"DISCONNECTED",tabId:null,pageKey:"",pageKeys:[],theme:"device",selectionEnabled:!1,items:[],defaultSize:14,defaultColor:"Blue",defaultShape:"circle",defaultLabelFormat:"Numbers",defaultVisible:!0,defaultPosition:"left-top-outside",defaultGroup:T,capture:{format:"png",area:"full",quality:90,scale:1,panelExpanded:!1},selectItems:[],missingIds:[],toastMessages:[]};function g(e){const t=e.map((e,t)=>({it:e,i:t})),s=new Map;let i=0;for(const{it:e}of t){const t=e.group;s.has(t)||s.set(t,i++)}return t.sort((e,t)=>{const i=s.get(e.it.group),a=s.get(t.it.group);return i!==a?i-a:e.it.label!==t.it.label?e.it.label-t.it.label:e.i-t.i}),t.map(e=>e.it)}const A=function(e,t){const s="screenStateByPage";async function i(){return(await chrome.storage.local.get(s))[s]??{}}async function a(e){await chrome.storage.local.set({[s]:e})}return{key:s,readAll:i,writeAll:a,get:async function(e){const s=(await i())[e];return void 0!==s?s:t?t():void 0},set:async function(e,t){const s=await i();s[e]=t,await a(s)},remove:async function(e){const t=await i();e in t&&(delete t[e],await a(t))},clear:async function(){await a({})}}}(0,()=>({items:[],nextId:1,defaultSize:14,defaultColor:"Blue",defaultShape:"circle",defaultLabelFormat:"Numbers",defaultVisible:!0,defaultPosition:"left-top-outside",defaultGroup:T})),f=function(){const e="themeMode";return{key:e,get:async function(){const t=(await chrome.storage.local.get(e))[e];return void 0===t?"device":t},set:async function(t){await chrome.storage.local.set({[e]:t})},remove:async function(){await chrome.storage.local.remove(e)}}}();async function C(e,t){const s=await A.get(e);if(t.removedIds?.length){const e=new Set(t.removedIds);s.items=s.items.filter(t=>!e.has(t.id))}if(t.added?.length)for(const e of t.added){const t={id:s.nextId++,label:1/0,anchor:e.anchor,size:e.size??s.defaultSize,color:e.color??s.defaultColor,shape:e.shape??s.defaultShape,labelFormat:e.labelFormat??s.defaultLabelFormat,visible:e.visible??s.defaultVisible,position:e.position??s.defaultPosition,group:e.group??s.defaultGroup,comment:e.comment??""};s.items.push(t)}return s.items=R(s.items),await A.set(e,s),s}function R(e){const t=new Map;e.forEach((e,s)=>{const i=(e.group??"").trim();t.has(i)||t.set(i,[]),t.get(i).push({index:s,item:e})});const s=e.slice();for(const[,e]of t)e.sort((e,t)=>e.item.label!==t.item.label?e.item.label-t.item.label:e.item.id-t.item.id),e.forEach(({index:e,item:t},i)=>{const a=i+1;t.label!==a&&(s[e]={...t,label:a})});return s}function I(e,t){return chrome.i18n.getMessage(e,t)||e}const O={get:I,localize:function(e=document){e.querySelectorAll("[data-i18n]").forEach(e=>{const t=e.getAttribute("data-i18n");t&&(e.textContent=I(t))}),e.querySelectorAll("[data-i18n-attr]").forEach(e=>{const t=e.getAttribute("data-i18n-attr");if(t)for(const s of t.split(";")){const[t,i]=s.split(":").map(e=>e?.trim());t&&i&&e.setAttribute(t,I(i))}})}},N="RESTRICTED",b="CONNECTING",L="CONNECTED",v="DISCONNECTED",y={RESTRICTED:"status_restricted",CONNECTING:"status_connecting",CONNECTED:"status_connected",DISCONNECTED:"status_disconnected"},D={RESTRICTED:"connect-status--restricted",CONNECTING:"connect-status--connecting",CONNECTED:"connect-status--connected",DISCONNECTED:"connect-status--disconnected"};var P,w;!function(e){e.INIT="INIT",e.CONNECTED="CONNECTED",e.SET_STATUS="SET_STATUS",e.RESTORE_STATE="RESTORE_STATE",e.SET_MISSING_IDS="SET_MISSING_IDS",e.TOGGLE_SELECT="TOGGLE_SELECT",e.CLEAR_ALL="CLEAR_ALL",e.CONTENT_SELECTED="CONTENT_SELECTED",e.SET_BADGE_SIZE="SET_BADGE_SIZE",e.SET_BADGE_COLOR="SET_BADGE_COLOR",e.SET_BADGE_SHAPE="SET_BADGE_SHAPE",e.SET_BADGE_LABEL_FORMAT="SET_BADGE_LABEL_FORMAT",e.SET_BADGE_VISIBLE="SET_BADGE_VISIBLE",e.BADGE_DELETE="BADGE_DELETE",e.SET_BADGE_POSITION="SET_BADGE_POSITION",e.SET_CAPTURE_FORMAT="SET_CAPTURE_FORMAT",e.SET_CAPTURE_AREA="SET_CAPTURE_AREA",e.SET_CAPTURE_QUALITY="SET_CAPTURE_QUALITY",e.SET_CAPTURE_SCALE="SET_CAPTURE_SCALE",e.TOGGLE_CAPTURE_PANEL="TOGGLE_CAPTURE_PANEL",e.MEASURE_CONTENT_SIZE="MEASURE_CONTENT_SIZE",e.CAPTURE_REQUESTED="CAPTURE_REQUESTED",e.CAPTURE_SUCCEEDED="CAPTURE_SUCCEEDED",e.CAPTURE_FAILED="CAPTURE_FAILED",e.REORDER_ITEMS="REORDER_ITEMS",e.SET_GROUP="SET_GROUP",e.PORT_DISCONNECTED="PORT_DISCONNECTED",e.CLOSE_PANEL_REQUESTED="CLOSE_PANEL_REQUESTED",e.ITEM_SELECTION_CHANGED="ITEM_SELECTION_CHANGED",e.ITEM_HOVER_IN="ITEM_HOVER_IN",e.ITEM_HOVER_OUT="ITEM_HOVER_OUT",e.UPDATE_ITEM_COMMENT="UPDATE_ITEM_COMMENT",e.SET_THEME="SET_THEME",e.UPDATE_THEME="UPDATE_THEME",e.STORE_RELOAD_REQUESTED="STORE_RELOAD_REQUESTED",e.STORE_RELOAD_SUCCEEDED="STORE_RELOAD_SUCCEEDED",e.IMPORT_SCREAN_STATE_FILE="IMPORT_SCREAN_STATE_FILE",e.IMPORT_SUCCEEDED="IMPORT_SUCCEEDED",e.IMPORT_FAILED="IMPORT_FAILED",e.TOAST_DISMISS_REQUESTED="TOAST_DISMISS_REQUESTED",e.REMOVE_SCREEN_STATE_BY_PAGE="REMOVE_SCREEN_STATE_BY_PAGE",e.EXPORT_SCREEN_STATE_BY_PAGE="EXPORT_SCREEN_STATE_BY_PAGE",e.EXPORT_FAILED="EXPORT_FAILED"}(P||(P={})),function(e){e.RENDER_CONTENT="RENDER_CONTENT",e.TOGGLE_SELECT_ON_CONTENT="TOGGLE_SELECT_ON_CONTENT",e.CLEAR_CONTENT="CLEAR_CONTENT",e.HOVER="HOVER",e.MEASURE_CONTENT_SIZE="MEASURE_CONTENT_SIZE",e.CAPTURE="CAPTURE",e.CLEAR_STATE="CLEAR_STATE",e.PERSIST_STATE="PERSIST_STATE",e.SET_THEME="SET_THEME",e.UPDATE_THEME="UPDATE_THEME",e.READ_SCREEN_STATE_STORE="READ_SCREEN_STATE_STORE",e.IMPORT_SCREAN_STATE_FILE="IMPORT_SCREAN_STATE_FILE",e.REMOVE_SCREEN_STATE_STORE_BY_PAGE_KEY="REMOVE_SCREEN_STATE_STORE_BY_PAGE_KEY",e.EXPORT_SCREEN_STATE_BY_PAGE_KEY="EXPORT_SCREEN_STATE_BY_PAGE_KEY",e.NOTIFY_ERROR="NOTIFY_ERROR"}(w||(w={}));const G="spsk:panel-content:v1";class M{rpc;constructor(e){this.rpc=e}send(e){const t={id:crypto.randomUUID(),expectReply:!1,...e};return this.rpc.send(t)}render(e){return this.send({type:s,payload:{items:e}})}toggleSelect(e){return this.send({type:t,payload:{enabled:e}})}clear(){return this.send({type:i})}hover(e){return this.send({type:a,payload:{id:e}})}measureSize(){return this.send({type:n})}ping(){const t={id:crypto.randomUUID(),expectReply:!0,type:e};return this.rpc.send(t,5e3)}}class B{port;pending=new Map;alive=!0;constructor(e){this.port=e,this.port.onMessage.addListener(e=>{(function(e){return"object"==typeof e&&null!==e&&"id"in e&&"ok"in e})(e)&&(this.pending.get(e.id)?.(e),this.pending.delete(e.id))}),this.port.onDisconnect.addListener(()=>{this.alive=!1;const e=chrome.runtime.lastError?.message??"disconnected";for(const[t,s]of this.pending)s({id:t,ok:!1,error:e});this.pending.clear()})}get isAlive(){return this.alive}send(e,t=5e3){return new Promise(s=>{if(!this.alive)return s(void e.expectReply);if(e.expectReply){const i=setTimeout(()=>{this.pending.delete(e.id),s(void 0)},t);this.pending.set(e.id,e=>{clearTimeout(i),s(e)})}try{this.port.postMessage(e)}catch{return e.expectReply&&this.pending.delete(e.id),void s(void 0)}e.expectReply||s(void 0)})}}const U=new Set;async function k(e,t,s){return await new Promise((i,a)=>{chrome.debugger.sendCommand(e,t,s??{},e=>{const t=function(){const e=chrome.runtime.lastError;return e?new Error(e.message||String(e)):null}();t?a(t):i(e??{})})})}async function x(e){const t=await chrome.tabs.get(e.tabId);if(!t.id||E(t.url))return void console.warn("Capturing is not possible due to restricted URL:",t.url);const s={tabId:t.id},i=e.format??"png",a=e.settleMs??500,n=e.scale??1,o=e.area??"full";let r=!1,l=!1;try{r=await async function(e){const t=e.tabId??null;return await new Promise((s,i)=>{chrome.debugger.attach(e,"1.3",()=>{const e=chrome.runtime.lastError;if(!e)return null!=t&&U.add(t),void s(!0);const a=e.message||"";a.includes("Another debugger is already attached")?null!=t&&U.has(t)?s(!1):i(new Error("Debugger is already attached by another client (DevTools/extension).")):i(new Error(a))})})}(s),await k(s,"Page.enable"),(e.bringToFront??1)&&await k(s,"Page.bringToFront");const c=await async function(e,t,s,i){if("viewport"===t){const{x:t,y:i,width:a,height:n}=await async function(e){const t=(await k(e,"Page.getLayoutMetrics")).cssVisualViewport;return{x:Math.max(0,0|Math.floor(t.pageX)),y:Math.max(0,0|Math.floor(t.pageY)),width:Math.max(1,0|Math.ceil(t.clientWidth)),height:Math.max(1,0|Math.ceil(t.clientHeight))}}(e);return{useOverride:!1,clip:{x:t,y:i,width:a,height:n,scale:s},captureBeyondViewport:!0,shouldScrollTop:!1}}const a=Math.max(1,0|Math.ceil(i.width)),n=Math.max(1,0|Math.ceil(i.height));return{useOverride:!0,metrics:{width:a,height:n,deviceScaleFactor:1,mobile:!1,screenWidth:a,screenHeight:n,positionX:0,positionY:0},clip:{x:0,y:0,width:a,height:n,scale:s},captureBeyondViewport:!0,shouldScrollTop:!0}}(s,o,n,e.contentSize);c.shouldScrollTop&&await k(s,"Runtime.evaluate",{expression:"window.scrollTo(0,0)"}),c.useOverride&&c.metrics&&(l=!0,await k(s,"Emulation.setDeviceMetricsOverride",c.metrics)),await new Promise(e=>setTimeout(e,a));const E={format:i,fromSurface:!0,captureBeyondViewport:c.captureBeyondViewport,clip:c.clip};"jpeg"===i&&"number"==typeof e.quality&&(E.quality=Math.min(100,Math.max(0,Math.round(e.quality))));const{data:d}=await k(s,"Page.captureScreenshot",E),h=`data:${"png"===i?"image/png":"image/jpeg"};base64,${d}`,u=e.filename??function(e,t){let s=(e.title&&e.title.trim()?e.title:"")||(()=>{try{return new URL(e.url??"").host||"page"}catch{return"page"}})();return s=s.replace(/[\\/:*?"<>|]/g,"_").replace(/\s+/g," ").trim(),s.length>80&&(s=s.slice(0,80)),`${s}-${(new Date).toISOString().replace(/[:.]/g,"-")}.${t}`}(t,i);return await chrome.downloads.download({url:h,filename:u,saveAs:!1})}finally{if(l)try{await k(s,"Emulation.clearDeviceMetricsOverride")}catch{}if(r)try{await async function(e){const t=e.tabId??null;null!=t&&U.has(t)&&(await async function(e){await new Promise(t=>{chrome.debugger.detach(e,()=>t())})}(e),U.delete(t))}(s)}catch{}}}async function H(e,t,s={}){const{saveAs:i=!1,prefix:a="specsketch-screen-state"}=s,n={format:"specsketch-export",kind:"screen-state",version:1,exportedAt:(new Date).toISOString(),pageKey:t,items:e.items},o=`data:application/json;charset=utf-8;base64,${function(e){const t=(new TextEncoder).encode(e);let s="";for(const e of t)s+=String.fromCharCode(e);return btoa(s)}(JSON.stringify(n,null,2))}`,r=function(e,t){return`${e}_${(t??"").replace(/https?:\/\//,"").replace(/[^a-zA-Z0-9._-]+/g,"-").replace(/-+/g,"-").replace(/^-|-$/g,"").slice(0,120)||"page"}_${function(e=new Date){const t=(e,t=2)=>String(e).padStart(t,"0"),s=-e.getTimezoneOffset(),i=s>=0?"+":"-",a=t(Math.floor(Math.abs(s)/60)),n=t(Math.abs(s)%60);return`${e.getFullYear()}-${t(e.getMonth()+1)}-${t(e.getDate())}_${t(e.getHours())}-${t(e.getMinutes())}-${t(e.getSeconds())}${i}${a}${n}`}()}.json`}(a,t);return await chrome.downloads.download({url:o,filename:r,saveAs:i})}async function F(e,t){const s=/\.json$/i.test(e.name),i="application/json"===e.type||"text/json"===e.type||""===e.type;if(!s&&!i)throw new Error(O.get("import_file_not_json"));let a;try{const t=await e.text();a=JSON.parse(t)}catch{throw new Error(O.get("import_payload_invalid"))}if(!function(e){if(!e||"object"!=typeof e)return!1;const t=e;return"specsketch-export"===t.format&&"screen-state"===t.kind&&"number"==typeof t.version&&"string"==typeof t.pageKey&&!!Array.isArray(t.items)&&t.items.every(_)}(a))throw new Error(O.get("import_payload_invalid"));const n=g(a.items),o=await A.get(t),r=e=>`${e.anchor.kind}:${e.anchor.version}:${e.anchor.value}`,l=new Set((o?.items??[]).map(r)),c=n.filter(e=>!l.has(r(e))).map(e=>({anchor:e.anchor,size:e.size,color:e.color,shape:e.shape,position:e.position,group:e.group,comment:e.comment}));return{state:await C(t,{added:c}),successMessage:O.get("import_succeeded_with_count",[String(c.length)])}}var V;chrome.debugger.onDetach.addListener(e=>{const t=e.tabId;"number"==typeof t&&U.delete(t)}),function(e){e.TOGGLE_SELECT="TOGGLE_SELECT",e.CLEAR="CLEAR",e.CAPTURE="CAPTURE",e.BADGE_SIZE_CHANGE="BADGE_SIZE_CHANGE",e.BADGE_COLOR_SELECT="BADGE_COLOR_SELECT",e.BADGE_SHAPE_CHANGE="BADGE_SHAPE_CHANGE",e.BADGE_LABEL_FORMAT_CHANGE="BADGE_LABEL_FORMAT_CHANGE",e.BADGE_VISIBLE_CHANGE="BADGE_VISIBLE_CHANGE",e.BADGE_DELETE="BADGE_DELETE",e.BADGE_POSITION_SELECT="BADGE_POSITION_SELECT",e.SET_GROUP="SET_GROUP",e.CAPTURE_FORMAT_CHANGE="CAPTURE_FORMAT_CHANGE",e.CAPTURE_AREA_CHANGE="CAPTURE_AREA_CHANGE",e.CAPTURE_QUALITY_CHANGE="CAPTURE_QUALITY_CHANGE",e.CAPTURE_SCALE_CHANGE="CAPTURE_SCALE_CHANGE",e.TOGGLE_CAPTURE_PANEL="TOGGLE_CAPTURE_PANEL",e.REORDER_ITEMS="REORDER_ITEMS",e.ITEM_SELECTION_CHANGED="ITEM_SELECTION_CHANGED",e.ITEM_HOVER_IN="ITEM_HOVER_IN",e.ITEM_HOVER_OUT="ITEM_HOVER_OUT",e.ITEM_COMMENT_APPLY="ITEM_COMMENT_APPLY",e.UPDATE_THEME="UPDATE_THEME",e.SETTING_MODAL_SHOW="SETTING_MODAL_SHOW",e.IMPORT_SCREAN_STATE_FILE="IMPORT_SCREAN_STATE_FILE",e.TOAST_DISMISS_REQUESTED="TOAST_DISMISS_REQUESTED",e.REMOVE_PAGE_CLICK="REMOVE_PAGE_CLICK",e.EXPORT_PAGE_CLICK="EXPORT_PAGE_CLICK"}(V||(V={}));class ${view;model=structuredClone(S);conn=null;currentWindowId=null;static REQUIRES_CONN=new Set([w.RENDER_CONTENT,w.TOGGLE_SELECT_ON_CONTENT,w.CLEAR_CONTENT,w.HOVER]);constructor(e){this.view=e}async start(){this.dispatch({type:P.INIT});const{ok:e}=await this.ensureConnectionAlive({forceReconnect:!0});if(!e)return void this.view.render(this.model);this.registerViewHandlers(),this.view.render(this.model);const t=await chrome.windows.getCurrent();this.currentWindowId=t.id??null,chrome.runtime.onMessage.addListener(e=>{if(e.type!==c)return;const t=e.payload.windowId;null!=this.currentWindowId&&this.currentWindowId===t&&this.ensureConnectionAlive({forceReconnect:!0})})}registerViewHandlers(){this.view.on(V.TOGGLE_SELECT,()=>this.dispatch({type:P.TOGGLE_SELECT})),this.view.on(V.CLEAR,()=>this.dispatch({type:P.CLEAR_ALL})),this.view.on(V.CAPTURE,()=>this.dispatch({type:P.MEASURE_CONTENT_SIZE})),this.view.on(V.BADGE_SIZE_CHANGE,({size:e})=>this.dispatch({type:P.SET_BADGE_SIZE,size:e})),this.view.on(V.BADGE_COLOR_SELECT,({color:e})=>this.dispatch({type:P.SET_BADGE_COLOR,color:e})),this.view.on(V.BADGE_SHAPE_CHANGE,({shape:e})=>this.dispatch({type:P.SET_BADGE_SHAPE,shape:e})),this.view.on(V.BADGE_LABEL_FORMAT_CHANGE,({labelFormat:e})=>this.dispatch({type:P.SET_BADGE_LABEL_FORMAT,labelFormat:e})),this.view.on(V.BADGE_VISIBLE_CHANGE,({visible:e})=>this.dispatch({type:P.SET_BADGE_VISIBLE,visible:e})),this.view.on(V.BADGE_DELETE,()=>this.dispatch({type:P.BADGE_DELETE})),this.view.on(V.BADGE_POSITION_SELECT,({position:e})=>this.dispatch({type:P.SET_BADGE_POSITION,position:e})),this.view.on(V.TOGGLE_CAPTURE_PANEL,()=>this.dispatch({type:P.TOGGLE_CAPTURE_PANEL})),this.view.on(V.CAPTURE_FORMAT_CHANGE,({format:e})=>this.dispatch({type:P.SET_CAPTURE_FORMAT,format:e})),this.view.on(V.CAPTURE_AREA_CHANGE,({area:e})=>this.dispatch({type:P.SET_CAPTURE_AREA,area:e})),this.view.on(V.CAPTURE_QUALITY_CHANGE,({quality:e})=>this.dispatch({type:P.SET_CAPTURE_QUALITY,quality:e})),this.view.on(V.CAPTURE_SCALE_CHANGE,({scale:e})=>this.dispatch({type:P.SET_CAPTURE_SCALE,scale:e})),this.view.on(V.REORDER_ITEMS,({fromId:e,fromIndex:t,toIndex:s})=>this.dispatch({type:P.REORDER_ITEMS,fromId:e,fromIndex:t,toIndex:s})),this.view.on(V.SET_GROUP,({group:e})=>this.dispatch({type:P.SET_GROUP,group:e})),this.view.on(V.ITEM_SELECTION_CHANGED,e=>this.dispatch({type:P.ITEM_SELECTION_CHANGED,...e})),this.view.on(V.ITEM_HOVER_IN,({id:e})=>this.dispatch({type:P.ITEM_HOVER_IN,id:e})),this.view.on(V.ITEM_HOVER_OUT,()=>this.dispatch({type:P.ITEM_HOVER_OUT})),this.view.on(V.ITEM_COMMENT_APPLY,({id:e,comment:t})=>this.dispatch({type:P.UPDATE_ITEM_COMMENT,id:e,comment:t})),this.view.on(V.UPDATE_THEME,({theme:e})=>this.dispatch({type:P.UPDATE_THEME,theme:e})),this.view.on(V.SETTING_MODAL_SHOW,()=>this.dispatch({type:P.STORE_RELOAD_REQUESTED})),this.view.on(V.IMPORT_SCREAN_STATE_FILE,({file:e})=>this.dispatch({type:P.IMPORT_SCREAN_STATE_FILE,file:e})),this.view.on(V.TOAST_DISMISS_REQUESTED,({uuid:e})=>this.dispatch({type:P.TOAST_DISMISS_REQUESTED,uuid:e})),this.view.on(V.REMOVE_PAGE_CLICK,({pageKey:e})=>this.dispatch({type:P.REMOVE_SCREEN_STATE_BY_PAGE,pageKey:e})),this.view.on(V.EXPORT_PAGE_CLICK,({pageKey:e})=>this.dispatch({type:P.EXPORT_SCREEN_STATE_BY_PAGE,pageKey:e}))}dispatch(e){const{model:t,effects:s}=function(e,t){switch(t.type){case P.INIT:return{model:e,effects:[{kind:w.SET_THEME}]};case P.CONNECTED:return{model:{...e,tabId:t.tabId,pageKey:t.pageKey},effects:[]};case P.SET_STATUS:return t.status===L?{model:{...e,status:t.status},effects:[]}:{model:{...e,items:[],status:t.status},effects:[]};case P.RESTORE_STATE:return{model:{...e,items:t.state.items,defaultSize:t.state.defaultSize,defaultColor:t.state.defaultColor,defaultShape:t.state.defaultShape,defaultLabelFormat:t.state.defaultLabelFormat,defaultVisible:t.state.defaultVisible,defaultPosition:t.state.defaultPosition,defaultGroup:t.state.defaultGroup},effects:[{kind:w.RENDER_CONTENT,items:t.state.items}]};case P.SET_MISSING_IDS:return{model:{...e,missingIds:t.missingIds},effects:[]};case P.TOGGLE_SELECT:{const t=!e.selectionEnabled;return{model:{...e,selectionEnabled:t},effects:[{kind:w.TOGGLE_SELECT_ON_CONTENT,enabled:t}]}}case P.CLEAR_ALL:return{model:{...e,items:[]},effects:[{kind:w.CLEAR_CONTENT},{kind:w.CLEAR_STATE}]};case P.CONTENT_SELECTED:return{model:e,effects:[]};case P.TOGGLE_CAPTURE_PANEL:return{model:{...e,capture:{...e.capture,panelExpanded:!e.capture.panelExpanded}},effects:[]};case P.SET_BADGE_SIZE:{const s=e.items.map(s=>({...s,...e.selectItems.includes(s.id)?{size:t.size}:{}}));return{model:{...e,defaultSize:t.size,items:s},effects:[{kind:w.PERSIST_STATE},{kind:w.RENDER_CONTENT,items:s}]}}case P.SET_BADGE_COLOR:{const s=e.items.map(s=>({...s,...e.selectItems.includes(s.id)?{color:t.color}:{}}));return{model:{...e,defaultColor:t.color,items:s},effects:[{kind:w.PERSIST_STATE},{kind:w.RENDER_CONTENT,items:s}]}}case P.SET_BADGE_SHAPE:{const s=e.items.map(s=>({...s,...e.selectItems.includes(s.id)?{shape:t.shape}:{}}));return{model:{...e,defaultShape:t.shape,items:s},effects:[{kind:w.PERSIST_STATE},{kind:w.RENDER_CONTENT,items:s}]}}case P.SET_BADGE_LABEL_FORMAT:{const s=e.items.map(s=>({...s,...e.selectItems.includes(s.id)?{labelFormat:t.labelFormat}:{}}));return{model:{...e,defaultLabelFormat:t.labelFormat,items:s},effects:[{kind:w.PERSIST_STATE},{kind:w.RENDER_CONTENT,items:s}]}}case P.SET_BADGE_VISIBLE:{const s=e.items.map(s=>({...s,...e.selectItems.includes(s.id)?{visible:t.visible}:{}}));return{model:{...e,defaultVisible:t.visible,items:s},effects:[{kind:w.PERSIST_STATE},{kind:w.RENDER_CONTENT,items:s}]}}case P.BADGE_DELETE:{const t=R(e.items.filter(t=>!e.selectItems.includes(t.id)));return{model:{...e,items:t},effects:[{kind:w.PERSIST_STATE},{kind:w.RENDER_CONTENT,items:t}]}}case P.SET_BADGE_POSITION:{const s=e.items.map(s=>({...s,...e.selectItems.includes(s.id)?{position:t.position}:{}}));return{model:{...e,defaultPosition:t.position,items:s},effects:[{kind:w.PERSIST_STATE},{kind:w.RENDER_CONTENT,items:s}]}}case P.SET_GROUP:{const s=function(e,t,s){const i=(s??"").trim(),a=Number.MAX_SAFE_INTEGER-e.length;return g(e).map((e,s)=>{if(t.includes(e.id)&&e.group!==i){const t=a+s;return{...e,group:i,label:t}}return e})}(e.items,e.selectItems,t.group),i=R(s);return{model:{...e,defaultGroup:t.group,items:i},effects:[{kind:w.PERSIST_STATE},{kind:w.RENDER_CONTENT,items:i}]}}case P.SET_CAPTURE_FORMAT:return{model:{...e,capture:{...e.capture,format:t.format}},effects:[]};case P.SET_CAPTURE_AREA:return{model:{...e,capture:{...e.capture,area:t.area}},effects:[]};case P.SET_CAPTURE_QUALITY:return{model:{...e,capture:{...e.capture,quality:t.quality}},effects:[]};case P.SET_CAPTURE_SCALE:return{model:{...e,capture:{...e.capture,scale:t.scale}},effects:[]};case P.MEASURE_CONTENT_SIZE:return{model:e,effects:[{kind:w.MEASURE_CONTENT_SIZE}]};case P.CAPTURE_REQUESTED:return null==e.tabId?{model:e,effects:[{kind:w.NOTIFY_ERROR,error:"No tabId"}]}:{model:e,effects:[{kind:w.CAPTURE,payload:{tabId:e.tabId,format:e.capture.format,area:e.capture.area,quality:e.capture.quality,scale:e.capture.scale,contentSize:t.contentSize}}]};case P.CAPTURE_SUCCEEDED:return{model:e,effects:[]};case P.CAPTURE_FAILED:return{model:e,effects:[{kind:w.NOTIFY_ERROR,error:t.error}]};case P.REORDER_ITEMS:{const s=function(e,t,s,i){if(i<0||i>=e.length)throw new RangeError(`toIndex out of range: ${i}`);const a=e.findIndex(e=>e.id===t);if(-1===a)throw new Error(`Item not found for id=${t}`);if(i<0||i>=e.filter(t=>t.group===e[a].group).length)throw new RangeError(`toIndex out of range: ${i}`);const n=i+(s<i?1.1:.1);return e.map(e=>e.id===t?{...e,label:n}:e)}(e.items,t.fromId,t.fromIndex,t.toIndex),i=R(s);return{model:{...e,items:i},effects:[{kind:w.PERSIST_STATE},{kind:w.RENDER_CONTENT,items:i}]}}case P.ITEM_SELECTION_CHANGED:if("id"in t){const s=function(e,t,s){return t&&!s.includes(e)?[...s,e]:s.filter(t=>t!==e)}(t.id,t.isCheck,e.selectItems);return{model:{...e,selectItems:s},effects:[]}}if("group"in t){const s=function(e,t,s,i){const a=e.trim(),n=i.filter(e=>(e.group??T).trim()===a).map(e=>e.id);if(0===n.length)return s;if(t){const e=new Set(s);for(const t of n)e.add(t);return[...e]}{const e=new Set(n);return s.filter(t=>!e.has(t))}}(t.group,t.isCheck,e.selectItems,e.items);return{model:{...e,selectItems:s},effects:[]}}{const a=(s=t.allCheck,i=e.items,s?i.map(e=>e.id):[]);return{model:{...e,selectItems:a},effects:[]}}case P.ITEM_HOVER_IN:return{model:e,effects:[{kind:w.HOVER,id:t.id}]};case P.ITEM_HOVER_OUT:return{model:e,effects:[{kind:w.HOVER,id:null}]};case P.UPDATE_ITEM_COMMENT:{const s=e.items.map(e=>({...e,...e.id===t.id?{comment:t.comment}:{}}));return{model:{...e,items:s},effects:[{kind:w.PERSIST_STATE},{kind:w.RENDER_CONTENT,items:s}]}}case P.PORT_DISCONNECTED:return{model:{...e,status:v,selectionEnabled:!1},effects:[{kind:w.TOGGLE_SELECT_ON_CONTENT,enabled:!1}]};case P.SET_THEME:return{model:{...e,theme:t.theme},effects:[]};case P.UPDATE_THEME:return{model:{...e,theme:t.theme},effects:[{kind:w.UPDATE_THEME,theme:t.theme}]};case P.STORE_RELOAD_REQUESTED:return{model:e,effects:[{kind:w.READ_SCREEN_STATE_STORE}]};case P.STORE_RELOAD_SUCCEEDED:return{model:{...e,pageKeys:t.pageKeys},effects:[]};case P.IMPORT_SCREAN_STATE_FILE:return{model:e,effects:[{kind:w.IMPORT_SCREAN_STATE_FILE,file:t.file}]};case P.IMPORT_SUCCEEDED:case P.IMPORT_FAILED:return{model:{...e,toastMessages:t.toastMessages},effects:[]};case P.TOAST_DISMISS_REQUESTED:{const s=e.toastMessages.filter(e=>e.uuid!==t.uuid);return{model:{...e,toastMessages:s},effects:[]}}case P.REMOVE_SCREEN_STATE_BY_PAGE:return{model:e,effects:[{kind:w.REMOVE_SCREEN_STATE_STORE_BY_PAGE_KEY,pageKey:t.pageKey}]};case P.EXPORT_SCREEN_STATE_BY_PAGE:return{model:e,effects:[{kind:w.EXPORT_SCREEN_STATE_BY_PAGE_KEY,pageKey:t.pageKey}]};case P.EXPORT_FAILED:return{model:e,effects:[{kind:w.NOTIFY_ERROR,error:t.error}]};default:return{model:e,effects:[]}}var s,i}(this.model,e);this.model=t,this.view.render(this.model),this.execEffects(s).catch(console.error)}async execEffects(e){if(e.some(e=>$.REQUIRES_CONN.has(e.kind))){const e=await this.ensureConnectionAlive();if(!e.ok||e.contextChanged)return}for(const t of e)switch(t.kind){case w.RENDER_CONTENT:await(this.conn?.api.render(t.items));break;case w.TOGGLE_SELECT_ON_CONTENT:await(this.conn?.api.toggleSelect(t.enabled));break;case w.CLEAR_CONTENT:await(this.conn?.api.clear());break;case w.HOVER:await(this.conn?.api.hover(t.id));break;case w.CLEAR_STATE:await A.set(this.model.pageKey,{items:this.model.items,nextId:1,defaultSize:this.model.defaultSize,defaultColor:this.model.defaultColor,defaultShape:this.model.defaultShape,defaultLabelFormat:this.model.defaultLabelFormat,defaultVisible:this.model.defaultVisible,defaultPosition:this.model.defaultPosition,defaultGroup:this.model.defaultGroup});break;case w.PERSIST_STATE:{const e=await A.get(this.model.pageKey);await A.set(this.model.pageKey,{...e,items:this.model.items,defaultSize:this.model.defaultSize,defaultColor:this.model.defaultColor,defaultShape:this.model.defaultShape,defaultLabelFormat:this.model.defaultLabelFormat,defaultVisible:this.model.defaultVisible,defaultPosition:this.model.defaultPosition,defaultGroup:this.model.defaultGroup});break}case w.SET_THEME:{const e=await f.get();this.dispatch({type:P.SET_THEME,theme:e});break}case w.UPDATE_THEME:await f.set(t.theme);break;case w.READ_SCREEN_STATE_STORE:{const e=await A.readAll(),t=Object.keys(e);this.dispatch({type:P.STORE_RELOAD_SUCCEEDED,pageKeys:t});break}case w.IMPORT_SCREAN_STATE_FILE:try{const{state:e,successMessage:s}=await F(t.file,this.model.pageKey);this.dispatch({type:P.RESTORE_STATE,state:{items:e.items,defaultSize:e.defaultSize,defaultColor:e.defaultColor,defaultShape:e.defaultShape,defaultLabelFormat:e.defaultLabelFormat,defaultVisible:e.defaultVisible,defaultPosition:e.defaultPosition,defaultGroup:e.defaultGroup}});const i={uuid:crypto.randomUUID(),message:s,kind:"success"};this.dispatch({type:P.IMPORT_SUCCEEDED,toastMessages:[i]})}catch(e){const t=e,s={uuid:crypto.randomUUID(),message:t.message,kind:"error"};this.dispatch({type:P.IMPORT_FAILED,toastMessages:[s]})}break;case w.REMOVE_SCREEN_STATE_STORE_BY_PAGE_KEY:{await A.remove(t.pageKey);const e=await A.readAll(),s=Object.keys(e);this.dispatch({type:P.STORE_RELOAD_SUCCEEDED,pageKeys:s});const i=await A.get(this.model.pageKey);this.dispatch({type:P.RESTORE_STATE,state:{items:i.items,defaultSize:i.defaultSize,defaultColor:i.defaultColor,defaultShape:i.defaultShape,defaultLabelFormat:i.defaultLabelFormat,defaultVisible:i.defaultVisible,defaultPosition:i.defaultPosition,defaultGroup:i.defaultGroup}});break}case w.EXPORT_SCREEN_STATE_BY_PAGE_KEY:try{const e=await A.get(t.pageKey);await H(e,t.pageKey)}catch(e){this.dispatch({type:P.EXPORT_FAILED,error:e})}break;case w.MEASURE_CONTENT_SIZE:await(this.conn?.api.measureSize());break;case w.CAPTURE:try{await x(t.payload),this.dispatch({type:P.CAPTURE_SUCCEEDED})}catch(e){this.dispatch({type:P.CAPTURE_FAILED,error:e})}break;case w.NOTIFY_ERROR:console.error(t.error)}}async ensureConnectionAlive(e){const t=this.model.pageKey;if(!0!==e?.forceReconnect&&void 0!==await(this.conn?.api.ping()))return{ok:!0,contextChanged:!1};const s=await async function(){return(await chrome.tabs.query({active:!0,currentWindow:!0}))[0]}();if(!s?.id||E(s.url))return this.dispatch({type:P.SET_STATUS,status:N}),{ok:!1};const i=function(e,t=!1){try{const s=new URL(e);return t?`${s.origin}${s.pathname}${s.search}${s.hash}`:`${s.origin}${s.pathname}${s.search}`}catch{return e}}(s.url),a=s.id;this.dispatch({type:P.CONNECTED,tabId:a,pageKey:i}),this.dispatch({type:P.SET_STATUS,status:b});try{this.conn?.port.disconnect()}catch{}this.conn=await async function(e){await chrome.scripting.executeScript({target:{tabId:e},files:["content/main.js"]}).catch(()=>{});const t=chrome.tabs.connect(e,{name:G}),s=new B(t),i=new M(s),a=[];return t.onDisconnect.addListener(()=>a.forEach(e=>e())),{api:i,port:t,rpc:s,onDisconnect:e=>a.push(e),dispose:()=>{try{t.disconnect()}catch{}}}}(a),this.conn.onDisconnect(()=>this.dispatch({type:P.PORT_DISCONNECTED})),this.conn.port.onMessage.addListener(async e=>{if(e?.type===o){const t=await async function(e,t){const s=await A.get(e),i=Array.from(new Set(t.map(e=>e.value))).map(e=>t.find(t=>t.value===e)).filter(Boolean),a=[],n=[];for(const e of i){const t=s.items.find(t=>t.anchor.kind===e.kind&&t.anchor.value===e.value);t?a.push(t.id):n.push({anchor:e})}const o={};return a.length&&(o.removedIds=a),n.length&&(o.added=n),C(e,o)}(this.model.pageKey,e.payload.anchors);this.dispatch({type:P.RESTORE_STATE,state:{items:t.items,defaultSize:t.defaultSize,defaultColor:t.defaultColor,defaultShape:t.defaultShape,defaultLabelFormat:t.defaultLabelFormat,defaultVisible:t.defaultVisible,defaultPosition:t.defaultPosition,defaultGroup:t.defaultGroup}})}else e?.type===r?this.dispatch({type:P.SET_MISSING_IDS,missingIds:e.payload.missingIds}):e?.type===l&&this.dispatch({type:P.CAPTURE_REQUESTED,contentSize:e.payload})});const n=await A.get(i);return this.dispatch({type:P.RESTORE_STATE,state:{items:n.items,defaultSize:n.defaultSize,defaultColor:n.defaultColor,defaultShape:n.defaultShape,defaultLabelFormat:n.defaultLabelFormat,defaultVisible:n.defaultVisible,defaultPosition:n.defaultPosition,defaultGroup:n.defaultGroup}}),this.dispatch({type:P.SET_STATUS,status:L}),{ok:!0,contextChanged:!!t&&t!==i}}}const z={caretDown:{d:"M5.23 7.21a.75.75 0 011.06.02L10 10.939l3.71-3.71a.75.75 0 111.06 1.062L10.53 12.53a.75.75 0 01-1.06 0L5.23 8.27a.75.75 0 01.02-1.06z",viewBox:"0 0 20 20"},caretDownFill:{d:"M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z",viewBox:"0 0 16 16"},caretRight:{d:"M7.293 14.707a1 1 0 01-1.414-1.414L10.172 9 5.879 4.707a1 1 0 011.414-1.414l5 5a1 1 0 010 1.414l-5 5z",viewBox:"0 0 20 20"},caretRightFill:{d:"m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z",viewBox:"0 0 16 16"},success:{d:"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0m-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z",viewBox:"0 0 16 16"},error:{d:"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0M8 4a.905.905 0 0 0-.9.995l.35 3.507a.552.552 0 0 0 1.1 0l.35-3.507A.905.905 0 0 0 8 4m.002 6a1 1 0 1 0 0 2 1 1 0 0 0 0-2",viewBox:"0 0 16 16"},warn:{d:"M9.049 2.927a1.5 1.5 0 012.902 0l6.41 11.94A1.5 1.5 0 0117.01 17H2.99a1.5 1.5 0 01-1.351-2.133l6.41-11.94zM11 13a1 1 0 10-2 0 1 1 0 002 0zm-1-2a1 1 0 001-1V7a1 1 0 10-2 0v3a1 1 0 001 1z",viewBox:"0 0 20 20"},comment:{d:"M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H4.414a1 1 0 0 0-.707.293L.854 15.146A.5.5 0 0 1 0 14.793zm5 4a1 1 0 1 0-2 0 1 1 0 0 0 2 0m4 0a1 1 0 1 0-2 0 1 1 0 0 0 2 0m3 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2",viewBox:"0 0 16 16"},remove:{d:"M7 3a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v1h3a1 1 0 1 1 0 2h-1l-1 10a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2L5 6H4a1 1 0 1 1 0-2h3V3Zm1 3a1 1 0 0 0-1 1v8a1 1 0 1 0 2 0V7a1 1 0 0 0-1-1Zm4 0a1 1 0 0 0-1 1v8a1 1 0 1 0 2 0V7a1 1 0 0 0-1-1Z",viewBox:"0 0 20 20"},export:{d:["M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5","M7.646 1.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 2.707V11.5a.5.5 0 0 1-1 0V2.707L5.354 4.854a.5.5 0 1 1-.708-.708z"],viewBox:"0 0 16 16"},close:{d:"M5.23 5.23a.75.75 0 0 1 1.06 0L10 8.94l3.71-3.71a.75.75 0 1 1 1.06 1.06L11.06 10l3.71 3.71a.75.75 0 1 1-1.06 1.06L10 11.06l-3.71 3.71a.75.75 0 1 1-1.06-1.06L8.94 10 5.23 6.29a.75.75 0 0 1 0-1.06Z",viewBox:"0 0 20 20"}};function Y(e){const{d:t,viewBox:s="0 0 20 20"}=z[e];return{d:t,viewBox:s}}function K(e,t){return e.label!==t.label?e.label-t.label:e.id-t.id}class Q{doc;listeners={};els;NEW_GROUP="__newgroup__";HOVER_OUT_DELAY=1e3;dragEl=null;dragStartParent=null;dragStartIndex=-1;hoverOutTimer=null;collapsedGroups=new Set;TOAST_AUTO_DISMISS=1e4;constructor(e){this.doc=e,O.localize(e),this.els={status:this.$("#status"),toggleBtn:this.$("#toggle-select"),toggleIcon:this.$("#toggle-select-icon"),toggleLabel:this.$("#toggle-select-label"),clearBtn:this.$("#clear"),captureBtn:this.$("#capture"),list:this.$("#select-list"),empty:this.$("#select-empty"),count:this.$("#select-count"),captureOptionsToggle:this.$("#capture-options-toggle"),captureOptionsPanel:this.$("#capture-options"),captureFmtRadios:this.$all('input[name="capture-format"]'),captureAreaRadios:this.$all('input[name="capture-area"]'),jpegOnlyEls:this.$all(".jpeg-only"),jpegQualityRange:this.$("#jpeg-quality-range"),jpegQualityNumber:this.$("#jpeg-quality-number"),captureScaleRange:this.$("#capture-scale-range"),captureScaleNumber:this.$("#capture-scale-number"),badgeSizeRange:this.$("#badge-size-range"),badgeSizeNumber:this.$("#badge-size-number"),badgeColorButtons:this.$all("#badge-color-pop button"),badgeColorLabel:this.$("#badge-color-label"),badgeColorDot:this.$("#badge-color-dot"),badgeShapeSelect:this.$("#badge-shape-select"),badgeLabelFormatSelect:this.$("#badge-label-format-select"),badgeVisibleSelect:this.$("#badge-visible-select"),badgeDeleteButton:this.$("#badge-delete-button"),badgePositionButtons:this.$all("#badge-position-pop button"),badgePositionLabel:this.$("#badge-position-label"),badgeGroupSelect:this.$("#badge-group-select"),groupNameModal:this.$("#group-name-modal"),groupNameInput:this.$("#group-name-input"),groupNameCancelBtn:this.$("#group-name-cancel-btn"),groupNameCreatelBtn:this.$("#group-name-create-btn"),itemCommentModal:this.$("#item-comment-modal"),itemCommentInput:this.$("#item-comment-input"),itemCommentIdInput:this.$("#item-comment-id-input"),itemCommentCancelBtn:this.$("#item-comment-cancel-btn"),itemCommentApplyBtn:this.$("#item-comment-apply-btn"),selectItemAllCheckbox:this.$('input[type="checkbox"][name="item-select"][value="all"]'),settingModal:this.$("#setting-modal"),settingButton:this.$("#setting-button"),settingCloseButton:this.$("#setting-close-btn"),themeLightBtn:this.$("#theme-light-btn"),themeDarkBtn:this.$("#theme-dark-btn"),themeDeviceBtn:this.$("#theme-device-btn"),importFileInput:this.$("#import-file-input"),importBtn:this.$("#import-btn"),storeCount:this.$("#store-count"),storeList:this.$("#store-list"),storeEmpty:this.$("#store-empty"),toastParent:this.$("#toast-parent")},this.els.toggleBtn.addEventListener("click",()=>this.emit(V.TOGGLE_SELECT,void 0)),this.els.clearBtn.addEventListener("click",()=>this.emit(V.CLEAR,void 0)),this.els.captureBtn.addEventListener("click",()=>this.emit(V.CAPTURE,void 0)),this.els.captureOptionsToggle.addEventListener("click",()=>{this.emit(V.TOGGLE_CAPTURE_PANEL,void 0)}),this.els.captureFmtRadios.forEach(e=>e.addEventListener("change",()=>{this.updateQualityVisibility(),this.emit(V.CAPTURE_FORMAT_CHANGE,{format:this.getSelectedCaptureFormat()})})),this.els.captureAreaRadios.forEach(e=>e.addEventListener("change",()=>{this.emit(V.CAPTURE_AREA_CHANGE,{area:this.getSelectedCaptureArea()})})),this.bindSync(this.els.jpegQualityRange,this.els.jpegQualityNumber,e=>this.emit(V.CAPTURE_QUALITY_CHANGE,{quality:e})),this.bindSync(this.els.captureScaleRange,this.els.captureScaleNumber,e=>this.emit(V.CAPTURE_SCALE_CHANGE,{scale:e})),this.bindSync(this.els.badgeSizeRange,this.els.badgeSizeNumber);const t=()=>{const e=Number(this.els.badgeSizeNumber.value);Number.isFinite(e)&&this.emit(V.BADGE_SIZE_CHANGE,{size:e})};this.els.badgeSizeRange.addEventListener("change",t),this.els.badgeSizeNumber.addEventListener("change",t),this.els.badgeColorButtons.forEach(e=>{e.addEventListener("click",()=>{const t=e.dataset.colorName??"",s="string"==typeof(i=t)&&d.includes(i)?t:"Blue";var i;this.emit(V.BADGE_COLOR_SELECT,{color:s})})}),this.els.badgeShapeSelect.addEventListener("change",()=>{const e=this.els.badgeShapeSelect.value??null,t=function(e){return"string"==typeof e&&h.includes(e)}(e)?e:"circle";this.emit(V.BADGE_SHAPE_CHANGE,{shape:t})}),this.els.badgeLabelFormatSelect.addEventListener("change",()=>{const e=this.els.badgeLabelFormatSelect.value??null,t=function(e){return"string"==typeof e&&m.includes(e)}(e)?e:"Numbers";this.emit(V.BADGE_LABEL_FORMAT_CHANGE,{labelFormat:t})}),this.els.badgeVisibleSelect.addEventListener("change",()=>{const e="true"===this.els.badgeVisibleSelect.value;this.emit(V.BADGE_VISIBLE_CHANGE,{visible:e})}),this.els.badgeDeleteButton.addEventListener("click",()=>{this.emit(V.BADGE_DELETE,void 0)}),this.els.badgePositionButtons.forEach(e=>{e.addEventListener("click",()=>{const t=e.dataset.positionName??"",s="string"==typeof(i=t)&&u.includes(i)?t:"left-top-outside";var i;this.emit(V.BADGE_POSITION_SELECT,{position:s})})}),this.els.badgeGroupSelect.addEventListener("change",()=>{const e=this.els.badgeGroupSelect.value??p,t=e===p?T:e;t!==this.NEW_GROUP?this.emit(V.SET_GROUP,{group:t}):this.els.groupNameModal.classList.remove("hidden")}),this.els.groupNameCancelBtn.addEventListener("click",()=>{this.els.groupNameModal.classList.add("hidden")}),this.els.groupNameCreatelBtn.addEventListener("click",()=>{const e=this.els.groupNameInput.value??p,t=e===p||e===this.NEW_GROUP?T:e;this.emit(V.SET_GROUP,{group:t}),this.els.groupNameModal.classList.add("hidden"),this.els.groupNameInput.value=""}),this.els.itemCommentCancelBtn.addEventListener("click",()=>{this.els.itemCommentModal.classList.add("hidden")}),this.els.itemCommentApplyBtn.addEventListener("click",()=>{const e=this.els.itemCommentInput.value,t=Number(this.els.itemCommentIdInput.value);this.emit(V.ITEM_COMMENT_APPLY,{id:t,comment:e}),this.els.itemCommentModal.classList.add("hidden")}),this.els.settingButton.addEventListener("click",()=>{this.els.settingModal.classList.remove("hidden"),this.emit(V.SETTING_MODAL_SHOW,void 0)}),this.els.settingCloseButton.addEventListener("click",()=>{this.els.settingModal.classList.add("hidden")}),this.els.themeLightBtn.addEventListener("click",()=>{this.applyTheme("light"),this.emit(V.UPDATE_THEME,{theme:"light"})}),this.els.themeDarkBtn.addEventListener("click",()=>{this.applyTheme("dark"),this.emit(V.UPDATE_THEME,{theme:"dark"})}),this.els.themeDeviceBtn.addEventListener("click",()=>{this.applyTheme("device"),this.emit(V.UPDATE_THEME,{theme:"device"})}),this.els.importBtn.addEventListener("click",()=>{if(!this.els.importFileInput.files||0===this.els.importFileInput.files.length)return void this.els.importFileInput.click();const e=this.els.importFileInput.files[0];this.emit(V.IMPORT_SCREAN_STATE_FILE,{file:e})}),this.updateQualityVisibility(),this.els.selectItemAllCheckbox.addEventListener("change",e=>{const t=e.target.checked;this.emit(V.ITEM_SELECTION_CHANGED,{allCheck:t})}),this.els.list.addEventListener("pointerenter",()=>this.cancelHoverOut()),this.els.list.addEventListener("pointerleave",()=>this.scheduleHoverOut()),e.addEventListener("pointerleave",()=>{this.cancelHoverOut(),this.emit(V.ITEM_HOVER_OUT,void 0)})}on(e,t){(this.listeners[e]??=[]).push(t)}emit(e,t){const s=this.listeners[e];s?.forEach(e=>e(t))}render(e){this.applyToastMessages(e.toastMessages),this.applyTheme(e.theme),this.applyStore(e.pageKeys),this.renderStatus(e.status),this.renderToggle(e.selectionEnabled),this.renderList(e.items,e.selectItems,e.missingIds),this.selectRadioByValue(this.els.captureFmtRadios,e.capture.format),this.selectRadioByValue(this.els.captureAreaRadios,e.capture.area),this.els.jpegQualityNumber.value=String(e.capture.quality),this.els.jpegQualityRange.value=String(e.capture.quality),this.els.captureScaleNumber.value=String(e.capture.scale),this.els.captureScaleRange.value=String(e.capture.scale),this.updateQualityVisibility(e.capture.format),this.applyCaptureOptionsToggleUI(e.capture.panelExpanded),this.els.badgeSizeNumber.value=String(e.defaultSize),this.els.badgeSizeRange.value=String(e.defaultSize),this.applyBadgeColorUI(e.defaultColor),this.els.badgeShapeSelect.value=e.defaultShape,this.els.badgeLabelFormatSelect.value=e.defaultLabelFormat??"Numbers",this.els.badgeVisibleSelect.value=String(e.defaultVisible??"true"),this.applyBadgePositonUI(e.defaultPosition),this.applyBadgeGroupSelectUI(this.getExistingGroups(e.items),e.defaultGroup)}renderStatus(e){const t=D[e],s=this.els.status;s.className="",s.className=`connect-status ${t}`;const i=this.doc.createElement("span");i.classList.add("connect-status-dot");const a=this.doc.createElement("span");a.textContent=function(e){const t=y[e];return O.get(t)||t}(e),s.replaceChildren(i,a),this.disableFormControls(e)}renderToggle(e){const t=this.els.toggleIcon;t.className="",t.classList.add("select-toggle-icon",e?"bg-indigo-500":"bg-slate-300"),this.els.toggleLabel.textContent=O.get(e?"toggle_on":"toggle_off")}renderList(e,t,s){this.els.count.textContent=String(e.length);const i=0!==e.length&&e.every(e=>t.includes(e.id));if(this.els.selectItemAllCheckbox.checked=i,!e.length)return this.els.empty.classList.remove("hidden"),void this.els.list.replaceChildren();this.els.empty.classList.add("hidden");const a=this.groupByGroup(e),n=Array.from(a.keys()).sort((e,t)=>e===p?-1:t===p?1:e.localeCompare(t)),o=this.doc.createDocumentFragment();for(const e of n){const i=this.renderGroupSection(e,a.get(e),t,s);o.appendChild(i)}this.els.list.replaceChildren(o)}renderGroupSection(e,t,s,i){const a=this.collapsedGroups.has(e),n=this.el("section","select-item-section"),o=this.el("div","select-item-header"),r=this.el("div","spsk-checkwrap"),l=this.el("input","spsk-checkbox spsk-checkbox--normal");l.type="checkbox",l.name="item-select",l.value=e===p?O.get("group_ungrouped"):e,l.checked=t.every(e=>s.includes(e.id)),l.addEventListener("change",t=>{const s=t.target.checked;this.emit(V.ITEM_SELECTION_CHANGED,{group:e===p?T:e,isCheck:s})}),r.append(l);const c=this.el("span","select-item-gh-title",e===p?O.get("group_ungrouped"):e),E=this.el("div","select-item-gh-left");E.append(r,c);const d=this.el("span","select-item-gh-count",String(t.length)),h=this.el("button","select-item-gh-toggle");h.type="button",h.setAttribute("aria-expanded",String(!a));const u=Y(a?"caretRight":"caretDown"),m=this.createSvgIcon(u.d,{className:"icon-sm",viewBox:u.viewBox});h.append(m),o.append(E,d,h);const _=this.el("ul","select-item-list");a&&_.classList.add("hidden"),this.attachUlDnDHandlers(_);for(const e of t.sort(K)){const t=s.includes(e.id);_.appendChild(this.renderItem(e,t,i))}return h.addEventListener("click",()=>{if(this.collapsedGroups.has(e)){this.collapsedGroups.delete(e),_.classList.remove("hidden");const t=Y("caretDown"),s=this.createSvgIcon(t.d,{className:"icon-sm",viewBox:t.viewBox});h.replaceChildren(s),h.setAttribute("aria-expanded","true")}else{this.collapsedGroups.add(e),_.classList.add("hidden");const t=Y("caretRight"),s=this.createSvgIcon(t.d,{className:"icon-sm",viewBox:t.viewBox});h.replaceChildren(s),h.setAttribute("aria-expanded","false")}}),n.append(o,_),n}renderItem(e,t,s){const i=s.includes(e.id),a="select-item",n=this.el("li",i?`group ${a} select-item--warn`:a);n.dataset.id=String(e.id),n.draggable=!0,n.addEventListener("dragstart",e=>{this.dragEl=n,this.dragStartParent=n.parentElement,this.dragStartIndex=Array.prototype.indexOf.call(n.parentElement?.children??[],n),e.dataTransfer&&(e.dataTransfer.effectAllowed="move"),n.classList.add("opacity-60")}),n.addEventListener("dragend",()=>{if(!this.dragEl)return;const e=this.dragEl.parentElement,t=e?Array.prototype.indexOf.call(e.children,this.dragEl):-1;this.dragEl.classList.remove("opacity-60");const s=this.dragEl.dataset.id??"";this.dragEl=null,s&&this.dragStartIndex>=0&&t>=0&&t!==this.dragStartIndex&&this.emit(V.REORDER_ITEMS,{fromId:Number(s),fromIndex:this.dragStartIndex,toIndex:t}),this.dragStartIndex=-1,this.dragStartParent=null});const o=this.el("div","spsk-checkwrap"),r=i?"spsk-checkbox spsk-checkbox--warn":"spsk-checkbox spsk-checkbox--normal",l=this.el("input",r);l.type="checkbox",l.name="item-select",l.value=String(e.id),l.checked=t,l.addEventListener("change",t=>{const s=t.target.checked;this.emit(V.ITEM_SELECTION_CHANGED,{id:e.id,isCheck:s})}),o.append(l);const c=i?"spsk-badge spsk-badge--warn":"spsk-badge spsk-badge--norm",E=this.el("span",c,String(e.label)),d=this.el("div","min-w-0 flex-1");if(d.addEventListener("pointerenter",()=>{this.dragStartParent||i||(this.cancelHoverOut(),this.emit(V.ITEM_HOVER_IN,{id:e.id}))}),i){const e=this.el("span","chip-warn"),{d:t,viewBox:s}=Y("warn"),i=this.createSvgIcon(t,{className:"h-3.5 w-3.5",viewBox:s}),a=this.el("span",void 0,O.get("missing_item"));e.append(i,a),d.append(e)}const h=this.el("div","anchor",e.anchor.value);d.append(h);const u=this.generateCommentBtn(e);return n.append(o,E,d,u),n}generateCommentBtn(e){const t=document.createElement("button");t.className="btn-icon";const{d:s,viewBox:i}=Y("comment"),a=this.createSvgIcon(s,{className:"h-3.5 w-3.5",viewBox:i});return t.appendChild(a),t.addEventListener("click",()=>{this.els.itemCommentModal.classList.remove("hidden"),this.els.itemCommentInput.value=e.comment??"",this.els.itemCommentIdInput.value=String(e.id)}),t}scheduleHoverOut(){this.hoverOutTimer&&clearTimeout(this.hoverOutTimer),this.dragStartParent||(this.hoverOutTimer=setTimeout(()=>{this.hoverOutTimer=null,this.emit(V.ITEM_HOVER_OUT,void 0)},this.HOVER_OUT_DELAY))}cancelHoverOut(){this.hoverOutTimer&&(clearTimeout(this.hoverOutTimer),this.hoverOutTimer=null)}attachUlDnDHandlers(e){e.addEventListener("dragover",t=>{if(t.preventDefault(),!this.dragEl)return;if(this.dragStartParent&&e!==this.dragStartParent)return;const s=t.target?.closest("li");if(s&&s!==this.dragEl){const i=s.getBoundingClientRect(),a=t.clientY-i.top>i.height/2;e.insertBefore(this.dragEl,a?s.nextSibling:s)}else s||e.appendChild(this.dragEl)}),e.addEventListener("drop",e=>e.preventDefault())}getExistingGroups(e){return Array.from(new Set(e.map(e=>(e.group??"").trim()).filter(e=>e.length>0))).sort((e,t)=>e.localeCompare(t))}groupByGroup(e){const t=new Map;for(const s of e){const e=(s.group??T).trim()||p;t.has(e)||t.set(e,[]),t.get(e).push(s)}return t}getSelectedCaptureFormat(){const e=this.doc.querySelector('input[name="capture-format"]:checked')?.value;return"jpeg"===e?"jpeg":"png"}getSelectedCaptureArea(){const e=this.doc.querySelector('input[name="capture-area"]:checked')?.value;return"viewport"===e?"viewport":"full"}updateQualityVisibility(e){const t="jpeg"===(e??this.getSelectedCaptureFormat());this.els.jpegOnlyEls.forEach(e=>e.classList.toggle("hidden",!t)),this.els.jpegQualityRange.disabled=!t,this.els.jpegQualityNumber.disabled=!t}selectRadioByValue(e,t){e.forEach(e=>e.checked=e.value===t)}bindSync(e,t,s){const i=(e,t)=>{const s=null!=e&&""!==e?Number(e):NaN;return Number.isFinite(s)?s:t},a=a=>{const n=i(t.min||e.min,Number.NEGATIVE_INFINITY),o=i(t.max||e.max,Number.POSITIVE_INFINITY),r=i(t.step||e.step,1),l=Number(a),c=((e,t,s)=>Math.min(Math.max(e,t),s))(Number.isFinite(l)?l:0,n,o),E=Math.round(c/r)*r,d=Number(E.toFixed(6));t.value=String(d),e.value=String(d),s?.(d)};e.addEventListener("input",()=>a(e.value)),t.addEventListener("input",()=>a(t.value))}disableFormControls(e){const t=this.doc.querySelectorAll("button, select, input, textarea"),s=e===L,i=e===b||e===v,a=e===N;t.forEach(e=>{const t=!!s||i&&e.hasAttribute("data-ignore-disable")||a&&!1;e.disabled=!t}),this.els.list.toggleAttribute("inert",a||i)}applyCaptureOptionsToggleUI(e){this.els.captureOptionsToggle.setAttribute("aria-expanded",String(e));const{d:t,viewBox:s}=Y(e?"caretDownFill":"caretRightFill");this.els.captureOptionsToggle.innerHTML="",this.els.captureOptionsToggle.appendChild(this.createSvgIcon(t,{viewBox:s,className:"h-4 w-4"})),this.els.captureOptionsPanel.classList.toggle("hidden",!e)}getBadgeColorStyleName(e){return`bg-${("Gray"===e?"slate":e).toLowerCase()}-500`}applyBadgeColorUI(e){this.els.badgeColorButtons.forEach(t=>{const s=t.dataset.colorName===e;t.setAttribute("aria-selected",s?"true":"false")}),this.els.badgeColorLabel.textContent=e,this.els.badgeColorDot.className="inline-block w-4 h-4 rounded-full",this.els.badgeColorDot.classList.add(this.getBadgeColorStyleName(e))}applyBadgePositonUI(e){this.els.badgePositionButtons.forEach(t=>{const s=t.dataset.positionName===e;t.setAttribute("data-selected",s?"true":"false")}),this.els.badgePositionLabel.textContent=e.replaceAll("-"," ")}applyBadgeGroupSelectUI(e,t){this.els.badgeGroupSelect.innerHTML="",this.els.badgeGroupSelect.append(this.makeOpt(p,O.get("group_ungrouped"),t===p));for(const s of e){const e=(e=>(e??"").trim())(s);this.els.badgeGroupSelect.append(this.makeOpt(e,s,t===s))}const s=this.makeOpt(this.NEW_GROUP,O.get("common_create"));this.els.badgeGroupSelect.append(s)}applyTheme(e){const t=document.documentElement;("device"===e?window.matchMedia("(prefers-color-scheme: dark)").matches:"dark"===e)?t.classList.add("dark"):t.classList.remove("dark"),this.els.themeLightBtn.setAttribute("data-active",String("light"===e)),this.els.themeDarkBtn.setAttribute("data-active",String("dark"===e)),this.els.themeDeviceBtn.setAttribute("data-active",String("device"===e))}applyStore(e){if(this.els.storeCount.textContent=String(e.length),this.els.storeList.innerHTML="",e.length<=0)return this.els.storeList.classList.add("hidden"),void this.els.storeEmpty.classList.remove("hidden");for(const t of e){const e=this.el("li","select-item"),s=this.el("div","min-w-0 flex-1"),i=this.el("a","anchor whitespace-normal break-words",t);i.href=t,i.target="_blank",s.appendChild(i);const a=this.el("button","btn-icon");a.setAttribute("data-ignore-disable","true");const n=Y("export"),o=this.createSvgIcon(n.d,{className:"icon-sm",viewBox:n.viewBox});a.appendChild(o);const r=this.el("button","btn-icon btn-icon--danger");r.setAttribute("data-ignore-disable","true");const l=Y("remove"),c=this.createSvgIcon(l.d,{className:"icon-sm",viewBox:l.viewBox});r.appendChild(c),e.appendChild(s),e.appendChild(a),e.appendChild(r),this.els.storeList.appendChild(e),a.addEventListener("click",()=>{this.emit(V.EXPORT_PAGE_CLICK,{pageKey:t})}),r.addEventListener("click",()=>{this.emit(V.REMOVE_PAGE_CLICK,{pageKey:t})})}this.els.storeList.classList.remove("hidden"),this.els.storeEmpty.classList.add("hidden")}applyToastMessages(e){for(const t of e){const e=this.generateToastMessage(t);this.els.toastParent.appendChild(e),this.emit(V.TOAST_DISMISS_REQUESTED,{uuid:t.uuid})}}generateToastMessage(e){const t=this.el("div",`toast toast--${e.kind}`),s=Y(e.kind),i=this.createSvgIcon(s.d,{className:"toast-icon",viewBox:s.viewBox,variant:"solid"}),a=this.el("div","toast-body"),n=this.el("p","toast-desc",e.message);a.appendChild(n);const o=this.el("button",`toast-close toast-close--${e.kind}`),r=Y("close"),l=this.createSvgIcon(r.d,{className:"h-3.5 w-3.5",viewBox:r.viewBox});o.appendChild(l),t.appendChild(i),t.appendChild(a),t.appendChild(o);const c=window.setTimeout(()=>{t.isConnected&&t.remove()},this.TOAST_AUTO_DISMISS);return o.addEventListener("click",()=>{clearTimeout(c),t.isConnected&&t.remove()}),t}$(e){const t=this.doc.querySelector(e);if(!t)throw new Error(`[PanelView] Missing element: ${e}`);return t}$all(e){return this.doc.querySelectorAll(e)}el(e,t,s){const i=this.doc.createElement(e);return t&&(i.className=t),void 0!==s&&(i.textContent=s),i}makeOpt(e,t,s=!1){const i=this.doc.createElement("option");return i.value=e,i.textContent=t,s&&(i.selected=!0),i}createSvgIcon(e,t={}){const s="http://www.w3.org/2000/svg",i=document.createElementNS(s,"svg");i.setAttribute("viewBox",t.viewBox??"0 0 20 20"),i.setAttribute("aria-hidden","true"),t.className&&i.setAttribute("class",t.className);const a=Array.isArray(e)?e:[e];for(const e of a){const a=document.createElementNS(s,"path");a.setAttribute("d",e),"outline"===t.variant?(a.setAttribute("fill","none"),a.setAttribute("stroke","currentColor"),a.setAttribute("stroke-width","1.5"),a.setAttribute("stroke-linecap","round"),a.setAttribute("stroke-linejoin","round")):a.setAttribute("fill","currentColor"),i.appendChild(a)}return i}}async function j(){const e=new Q(document),t=new $(e);await t.start()}"complete"===document.readyState||"interactive"===document.readyState?j().catch(e=>{console.error("Panel bootstrap failed:",e)}):document.addEventListener("DOMContentLoaded",()=>{j().catch(e=>{console.error("Panel bootstrap failed:",e)})},{once:!0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LElBQVFvRyxNQUFPbk8sSUFDcEVNLFFBQVF2QixNQUFNLDBCQUEyQmlCLE1BQ3pDLENBQ0F1Z0IsTUFBTSxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vY29tbW9uL21lc3NhZ2VzLnRzIiwid2VicGFjazovLy8uL2NvbW1vbi91cmwudHMiLCJ3ZWJwYWNrOi8vLy4vY29tbW9uL3R5cGVzLnRzIiwid2VicGFjazovLy8uL3J1bnRpbWUvcGFuZWwvYXBwL21vZGVsLnRzIiwid2VicGFjazovLy8uL2NvbW1vbi91dGlscy50cyIsIndlYnBhY2s6Ly8vLi9ydW50aW1lL3BhbmVsL3N0b3JhZ2UvdGFibGVzLnRzIiwid2VicGFjazovLy8uL3J1bnRpbWUvcGFuZWwvc2VydmljZXMvc3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vY29tbW9uL2kxOG4udHMiLCJ3ZWJwYWNrOi8vLy4vcnVudGltZS9wYW5lbC90eXBlcy9zdGF0dXMudHMiLCJ3ZWJwYWNrOi8vLy4vcnVudGltZS9wYW5lbC90eXBlcy9hY3Rpb25fdHlwZXMudHMiLCJ3ZWJwYWNrOi8vLy4vcnVudGltZS9wYW5lbC90eXBlcy9lZmZlY3RfdHlwZXMudHMiLCJ3ZWJwYWNrOi8vLy4vY29tbW9uL2NvbnN0YW50cy50cyIsIndlYnBhY2s6Ly8vLi9ydW50aW1lL3BhbmVsL21lc3NhZ2luZy9hcGkudHMiLCJ3ZWJwYWNrOi8vLy4vcnVudGltZS9wYW5lbC9tZXNzYWdpbmcvcG9ydF9ycGMudHMiLCJ3ZWJwYWNrOi8vLy4vaW5mcmEvY2RwL2NkcF9jbGllbnQudHMiLCJ3ZWJwYWNrOi8vLy4vcnVudGltZS9wYW5lbC9zZXJ2aWNlcy9jYXB0dXJlLnRzIiwid2VicGFjazovLy8uL3J1bnRpbWUvcGFuZWwvc2VydmljZXMvZXhwb3J0LnRzIiwid2VicGFjazovLy8uL3J1bnRpbWUvcGFuZWwvc2VydmljZXMvaW1wb3J0LnRzIiwid2VicGFjazovLy8uL3J1bnRpbWUvcGFuZWwvdHlwZXMvdWlfZXZlbnRfdHlwZXMudHMiLCJ3ZWJwYWNrOi8vLy4vcnVudGltZS9wYW5lbC9jb250cm9sbGVyL3BhbmVsX2NvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vLy4vcnVudGltZS9wYW5lbC9hcHAvdXBkYXRlLnRzIiwid2VicGFjazovLy8uL2luZnJhL2Nocm9tZS90YWJzLnRzIiwid2VicGFjazovLy8uL3J1bnRpbWUvcGFuZWwvbWVzc2FnaW5nL2Nvbm5lY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4vY29tbW9uL2ljb25zLnRzIiwid2VicGFjazovLy8uL3J1bnRpbWUvcGFuZWwvdmlldy9wYW5lbF92aWV3LnRzIiwid2VicGFjazovLy8uL3J1bnRpbWUvcGFuZWwvYXBwL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFAyQyA9IHtcbiAgICBQSU5HOiAnUElORycsXG4gICAgVE9HR0xFX1NFTEVDVDogJ1RPR0dMRV9TRUxFQ1QnLFxuICAgIFJFTkRFUjogJ1JFTkRFUicsXG4gICAgQ0xFQVI6ICdDTEVBUicsXG4gICAgSE9WRVI6ICdIT1ZFUicsXG4gICAgTUVBU1VSRV9TSVpFOiAnTUVBU1VSRV9TSVpFJyxcbn07XG5jb25zdCBDMlAgPSB7XG4gICAgU0VMRUNURUQ6ICdTRUxFQ1RFRCcsXG4gICAgTUlTU0lOR19JRFM6ICdNSVNTSU5HX0lEUycsXG4gICAgQ09OVEVOVF9TSVpFX1JFU1VMVDogJ0NPTlRFTlRfU0laRV9SRVNVTFQnLFxufTtcbmNvbnN0IEIyUCA9IHtcbiAgICBBQ1RJVkVfVEFCX0NIQU5HRUQ6ICdBQ1RJVkVfVEFCX0NIQU5HRUQnLFxufTtcbmV4cG9ydCBjb25zdCBNU0dfVFlQRSA9IHsgLi4uUDJDLCAuLi5DMlAsIC4uLkIyUCB9O1xuZXhwb3J0IGZ1bmN0aW9uIGlzUmVzcG9uc2UobXNnKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBtc2cgPT09ICdvYmplY3QnICYmIG1zZyAhPT0gbnVsbCAmJiAnaWQnIGluIG1zZyAmJiAnb2snIGluIG1zZztcbn1cbiIsIi8qKlxuICogQnVpbGRzIGEgcGFnZSBrZXkgZnJvbSBhIFVSTC4gQnkgZGVmYXVsdCBleGNsdWRlcyB0aGUgaGFzaCBhbmQgdXNlc1xuICogb3JpZ2luICsgcGF0aG5hbWUgKyBzZWFyY2guXG4gKlxuICogQHBhcmFtIHVybCAtIElucHV0IFVSTCAocmV0dXJuZWQgYXMtaXMgaWYgaW52YWxpZClcbiAqIEBwYXJhbSBpbmNsdWRlSGFzaCAtIFdoZXRoZXIgdG8gaW5jbHVkZSB0aGUgaGFzaCAoZGVmYXVsdDogZmFsc2UpXG4gKiBAcmV0dXJucyBQYWdlIGtleSBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhZ2VLZXkodXJsLCBpbmNsdWRlSGFzaCA9IGZhbHNlKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgdSA9IG5ldyBVUkwodXJsKTtcbiAgICAgICAgcmV0dXJuIGluY2x1ZGVIYXNoXG4gICAgICAgICAgICA/IGAke3Uub3JpZ2lufSR7dS5wYXRobmFtZX0ke3Uuc2VhcmNofSR7dS5oYXNofWBcbiAgICAgICAgICAgIDogYCR7dS5vcmlnaW59JHt1LnBhdGhuYW1lfSR7dS5zZWFyY2h9YDtcbiAgICB9XG4gICAgY2F0Y2gge1xuICAgICAgICByZXR1cm4gdXJsO1xuICAgIH1cbn1cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgVVJMIHNob3VsZCBiZSBleGNsdWRlZCBmcm9tIGV4dGVuc2lvbiBvcGVyYXRpb24uXG4gKlxuICogVW5wYXJzZWFibGUvdW5rbm93biBzY2hlbWVzIGFyZSB0cmVhdGVkIGFzIHJlc3RyaWN0ZWQuXG4gKiBOb24td2ViIHNjaGVtZXMgKGUuZy4sIHZpZXctc291cmNlOiwgZGF0YTosIGJsb2I6LCBmaWxlc3lzdGVtOikgYXJlIGJsb2NrZWQgZWFybHkuXG4gKiBDaHJvbWUgV2ViIFN0b3JlIHBhZ2VzIGFyZSBhbHdheXMgZXhjbHVkZWQgKGNvbnRlbnQgc2NyaXB0cyBhcmUgbm90IGFsbG93ZWQgdGhlcmUpLlxuICpcbiAqIEBwYXJhbSByYXcgLSBVUkwgc3RyaW5nIHRvIGV2YWx1YXRlLlxuICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBVUkwgc2hvdWxkIGJlIHNraXBwZWQgYnkgdGhlIGV4dGVuc2lvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUmVzdHJpY3RlZChyYXcpIHtcbiAgICBpZiAoIXJhdylcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgaWYgKHJhdy5zdGFydHNXaXRoKCd2aWV3LXNvdXJjZTonKSB8fFxuICAgICAgICByYXcuc3RhcnRzV2l0aCgnZGF0YTonKSB8fFxuICAgICAgICByYXcuc3RhcnRzV2l0aCgnYmxvYjonKSB8fFxuICAgICAgICByYXcuc3RhcnRzV2l0aCgnZmlsZXN5c3RlbTonKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgbGV0IHVybDtcbiAgICB0cnkge1xuICAgICAgICB1cmwgPSBuZXcgVVJMKHJhdyk7XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgLy8gSW52YWxpZCBvciBub24tc3RhbmRhcmQgVVJMIOKGkiBza2lwIGZvciBzYWZldHkuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBBbGxvdy1saXN0IHBvbGljeTogb25seSBvcGVyYXRlIG9uIHR5cGljYWwgd2ViIHBhZ2VzLlxuICAgIGNvbnN0IGFsbG93ZWQgPSBuZXcgU2V0KFsnaHR0cDonLCAnaHR0cHM6JywgJ2ZpbGU6J10pO1xuICAgIGlmICghYWxsb3dlZC5oYXModXJsLnByb3RvY29sKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gQ2hyb21lIFdlYiBTdG9yZSAoY3VycmVudCBhbmQgbGVnYWN5IGhvc3QpIOKAlCBjb250ZW50IHNjcmlwdHMgYXJlIGRpc2FsbG93ZWQgYnkgcGxhdGZvcm0gcG9saWN5LlxuICAgIGNvbnN0IHdlYlN0b3JlSG9zdHMgPSBuZXcgU2V0KFsnY2hyb21ld2Vic3RvcmUuZ29vZ2xlLmNvbScsICdjaHJvbWUuZ29vZ2xlLmNvbSddKTtcbiAgICBpZiAod2ViU3RvcmVIb3N0cy5oYXModXJsLmhvc3RuYW1lKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuIiwiY29uc3QgSVRFTV9DT0xPUlMgPSBbXG4gICAgJ0dyYXknLFxuICAgICdSZWQnLFxuICAgICdZZWxsb3cnLFxuICAgICdHcmVlbicsXG4gICAgJ0JsdWUnLFxuICAgICdMaW1lJyxcbiAgICAnUHVycGxlJyxcbiAgICAnUGluaycsXG4gICAgJ09yYW5nZScsXG4gICAgJ0N5YW4nLFxuXTtcbmV4cG9ydCBmdW5jdGlvbiBpc0l0ZW1Db2xvcih2KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2ID09PSAnc3RyaW5nJyAmJiBJVEVNX0NPTE9SUy5pbmNsdWRlcyh2KTtcbn1cbmNvbnN0IElURU1fU0hBUEUgPSBbJ2NpcmNsZScsICdzcXVhcmUnXTtcbmV4cG9ydCBmdW5jdGlvbiBpc0l0ZW1TaGFwZSh2KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2ID09PSAnc3RyaW5nJyAmJiBJVEVNX1NIQVBFLmluY2x1ZGVzKHYpO1xufVxuZXhwb3J0IGNvbnN0IElURU1fUE9TSVRJT05fVkFMVUVTID0gW1xuICAgICdyaWdodC10b3Atb3V0c2lkZScsXG4gICAgJ3JpZ2h0LXRvcC1pbnNpZGUnLFxuICAgICdyaWdodC1vdXRzaWRlJyxcbiAgICAncmlnaHQtaW5zaWRlJyxcbiAgICAncmlnaHQtYm90dG9tLW91dHNpZGUnLFxuICAgICdyaWdodC1ib3R0b20taW5zaWRlJyxcbiAgICAndG9wLW91dHNpZGUnLFxuICAgICd0b3AtaW5zaWRlJyxcbiAgICAnY2VudGVyJyxcbiAgICAnYm90dG9tLW91dHNpZGUnLFxuICAgICdib3R0b20taW5zaWRlJyxcbiAgICAnbGVmdC10b3Atb3V0c2lkZScsXG4gICAgJ2xlZnQtdG9wLWluc2lkZScsXG4gICAgJ2xlZnQtb3V0c2lkZScsXG4gICAgJ2xlZnQtaW5zaWRlJyxcbiAgICAnbGVmdC1ib3R0b20tb3V0c2lkZScsXG4gICAgJ2xlZnQtYm90dG9tLWluc2lkZScsXG5dO1xuZXhwb3J0IGZ1bmN0aW9uIGlzSXRlbVBvc2l0aW9uKHYpIHtcbiAgICByZXR1cm4gdHlwZW9mIHYgPT09ICdzdHJpbmcnICYmIElURU1fUE9TSVRJT05fVkFMVUVTLmluY2x1ZGVzKHYpO1xufVxuZXhwb3J0IGNvbnN0IFVOR1JPVVBFRCA9ICdfX3VuZ3JvdXBlZF9fJztcbmV4cG9ydCBjb25zdCBVTkdST1VQRURfVkFMVUUgPSAnJztcbmV4cG9ydCBjb25zdCBMQUJFTF9GT1JNQVQgPSBbJ051bWJlcnMnLCAnVXBwZXJBbHBoYScsICdMb3dlckFscGhhJywgJ05vbmUnXTtcbmV4cG9ydCBmdW5jdGlvbiBpc0xhYmVsRm9ybWF0KHYpIHtcbiAgICByZXR1cm4gdHlwZW9mIHYgPT09ICdzdHJpbmcnICYmIExBQkVMX0ZPUk1BVC5pbmNsdWRlcyh2KTtcbn1cbi8qKlxuICogTmFycm93aW5nIGd1YXJkIGZvciBhIG1pbmltYWwgYFNjcmVlbkl0ZW1gLWxpa2Ugc2hhcGUuXG4gKiBDaGVja3Mgb25seSB0aGUgZmllbGRzIHJlcXVpcmVkIGJ5IHRoaXMgaW1wb3J0IHBhdGggKGFuY2hvciBzdHJ1Y3R1cmUpLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNTY3JlZW5JdGVtTGlrZSh2KSB7XG4gICAgaWYgKCF2IHx8IHR5cGVvZiB2ICE9PSAnb2JqZWN0JylcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IG8gPSB2O1xuICAgIGNvbnN0IGFuY2hvciA9IG9bJ2FuY2hvciddO1xuICAgIGlmICghYW5jaG9yIHx8IHR5cGVvZiBhbmNob3IgIT09ICdvYmplY3QnKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgY29uc3QgYSA9IGFuY2hvcjtcbiAgICByZXR1cm4gKGFbJ2tpbmQnXSA9PT0gJ2NzcycgJiZcbiAgICAgICAgdHlwZW9mIGFbJ3ZhbHVlJ10gPT09ICdzdHJpbmcnICYmXG4gICAgICAgICh0eXBlb2YgYVsndmVyc2lvbiddID09PSAnbnVtYmVyJyB8fCBhWyd2ZXJzaW9uJ10gPT09IDEpKTtcbn1cbi8qKlxuICogVmFsaWRhdGVzIGEgcGFyc2VkIEpTT04gdmFsdWUgYWdhaW5zdCB0aGUgZXhwZWN0ZWQgZXhwb3J0IHBheWxvYWQgY29udHJhY3QuXG4gKiBSZXF1aXJlczogYGZvcm1hdCA9PT0gJ3NwZWNza2V0Y2gtZXhwb3J0J2AsIGBraW5kID09PSAnc2NyZWVuLXN0YXRlJ2AsXG4gKiBgdmVyc2lvbjogbnVtYmVyYCwgYHBhZ2VLZXk6IHN0cmluZ2AsIGFuZCBgaXRlbXM6IFNjcmVlbkl0ZW1bXWAtbGlrZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRQYXlsb2FkKHYpIHtcbiAgICBpZiAoIXYgfHwgdHlwZW9mIHYgIT09ICdvYmplY3QnKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgY29uc3QgbyA9IHY7XG4gICAgaWYgKG9bJ2Zvcm1hdCddICE9PSAnc3BlY3NrZXRjaC1leHBvcnQnKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKG9bJ2tpbmQnXSAhPT0gJ3NjcmVlbi1zdGF0ZScpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAodHlwZW9mIG9bJ3ZlcnNpb24nXSAhPT0gJ251bWJlcicpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAodHlwZW9mIG9bJ3BhZ2VLZXknXSAhPT0gJ3N0cmluZycpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkob1snaXRlbXMnXSkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gb1snaXRlbXMnXS5ldmVyeShpc1NjcmVlbkl0ZW1MaWtlKTtcbn1cbiIsImltcG9ydCB7IFVOR1JPVVBFRF9WQUxVRSwgfSBmcm9tICdAY29tbW9uL3R5cGVzJztcbmV4cG9ydCBjb25zdCBpbml0aWFsTW9kZWwgPSB7XG4gICAgc3RhdHVzOiAnRElTQ09OTkVDVEVEJyxcbiAgICB0YWJJZDogbnVsbCxcbiAgICBwYWdlS2V5OiAnJyxcbiAgICBwYWdlS2V5czogW10sXG4gICAgdGhlbWU6ICdkZXZpY2UnLFxuICAgIHNlbGVjdGlvbkVuYWJsZWQ6IGZhbHNlLFxuICAgIGl0ZW1zOiBbXSxcbiAgICBkZWZhdWx0U2l6ZTogMTQsXG4gICAgZGVmYXVsdENvbG9yOiAnQmx1ZScsXG4gICAgZGVmYXVsdFNoYXBlOiAnY2lyY2xlJyxcbiAgICBkZWZhdWx0TGFiZWxGb3JtYXQ6ICdOdW1iZXJzJyxcbiAgICBkZWZhdWx0VmlzaWJsZTogdHJ1ZSxcbiAgICBkZWZhdWx0UG9zaXRpb246ICdsZWZ0LXRvcC1vdXRzaWRlJyxcbiAgICBkZWZhdWx0R3JvdXA6IFVOR1JPVVBFRF9WQUxVRSxcbiAgICBjYXB0dXJlOiB7XG4gICAgICAgIGZvcm1hdDogJ3BuZycsXG4gICAgICAgIGFyZWE6ICdmdWxsJyxcbiAgICAgICAgcXVhbGl0eTogOTAsXG4gICAgICAgIHNjYWxlOiAxLFxuICAgICAgICBwYW5lbEV4cGFuZGVkOiBmYWxzZSxcbiAgICB9LFxuICAgIHNlbGVjdEl0ZW1zOiBbXSxcbiAgICBtaXNzaW5nSWRzOiBbXSxcbiAgICB0b2FzdE1lc3NhZ2VzOiBbXSxcbn07XG4iLCJleHBvcnQgZnVuY3Rpb24gdGltZXN0YW1wKGQgPSBuZXcgRGF0ZSgpKSB7XG4gICAgY29uc3QgcGFkID0gKG4sIHcgPSAyKSA9PiBTdHJpbmcobikucGFkU3RhcnQodywgJzAnKTtcbiAgICBjb25zdCB0em8gPSAtZC5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgIGNvbnN0IHNpZ24gPSB0em8gPj0gMCA/ICcrJyA6ICctJztcbiAgICBjb25zdCBoaCA9IHBhZChNYXRoLmZsb29yKE1hdGguYWJzKHR6bykgLyA2MCkpO1xuICAgIGNvbnN0IG1tID0gcGFkKE1hdGguYWJzKHR6bykgJSA2MCk7XG4gICAgcmV0dXJuIGAke2QuZ2V0RnVsbFllYXIoKX0tJHtwYWQoZC5nZXRNb250aCgpICsgMSl9LSR7cGFkKGQuZ2V0RGF0ZSgpKX1fJHtwYWQoZC5nZXRIb3VycygpKX0tJHtwYWQoZC5nZXRNaW51dGVzKCkpfS0ke3BhZChkLmdldFNlY29uZHMoKSl9JHtzaWdufSR7aGh9JHttbX1gO1xufVxuLyoqXG4gKiBTb3J0cyBpdGVtcyBieSBwcmVzZXJ2aW5nIHRoZSAqKmZpcnN0LXNlZW4gZ3JvdXAgb3JkZXIqKiBmcm9tIHRoZSBpbnB1dFxuICogYW5kIHNvcnRpbmcgKip3aXRoaW4gZWFjaCBncm91cCBieSBhc2NlbmRpbmcgYGxhYmVsYCoqLlxuICogV2hlbiBib3RoIGdyb3VwIGFuZCBsYWJlbCBhcmUgZXF1YWwsIG9yaWdpbmFsIG9yZGVyIGlzIHByZXNlcnZlZCAoc3RhYmxlKS5cbiAqXG4gKiBAcGFyYW0gaXRlbXMgLSBBcnJheSBvZiB7QGxpbmsgU2NyZWVuSXRlbX0gdG8gc29ydCAobm90IG11dGF0ZWQpLlxuICogQHJldHVybnMgQSBuZXcgYXJyYXkgc29ydGVkIGJ5IGdyb3VwIChmaXJzdCBhcHBlYXJhbmNlKSBhbmQgdGhlbiBieSBsYWJlbC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNvcnRTY3JlZW5JdGVtc0J5R3JvdXBBbmRMYWJlbChpdGVtcykge1xuICAgIC8vIEF0dGFjaCBvcmlnaW5hbCBpbmRpY2VzIHRvIHByZXNlcnZlIHN0YWJsZSBvcmRlcmluZyBmb3IgZXhhY3QgdGllcy5cbiAgICBjb25zdCBpbmRleGVkID0gaXRlbXMubWFwKChpdCwgaSkgPT4gKHsgaXQsIGkgfSkpO1xuICAgIC8vIFJlY29yZCB0aGUgZmlyc3Qtc2VlbiBvcmRlciBvZiBlYWNoIGdyb3VwICh0cmVhdHMgYHVuZGVmaW5lZGAgYXMgYSB2YWxpZCBncm91cCkuXG4gICAgY29uc3QgZ3JvdXBPcmRlciA9IG5ldyBNYXAoKTtcbiAgICBsZXQgb3JkZXIgPSAwO1xuICAgIGZvciAoY29uc3QgeyBpdCB9IG9mIGluZGV4ZWQpIHtcbiAgICAgICAgY29uc3QgZyA9IGl0Lmdyb3VwOyAvLyBhbGxvdyB1bmRlZmluZWRcbiAgICAgICAgaWYgKCFncm91cE9yZGVyLmhhcyhnKSlcbiAgICAgICAgICAgIGdyb3VwT3JkZXIuc2V0KGcsIG9yZGVyKyspO1xuICAgIH1cbiAgICAvLyBDb21wYXJlIGJ5OiBncm91cCBmaXJzdC1zZWVuIG9yZGVyIOKGkiBsYWJlbCBhc2NlbmRpbmcg4oaSIG9yaWdpbmFsIGluZGV4IChzdGFiaWxpdHkpLlxuICAgIGluZGV4ZWQuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICBjb25zdCBnYSA9IGdyb3VwT3JkZXIuZ2V0KGEuaXQuZ3JvdXApO1xuICAgICAgICBjb25zdCBnYiA9IGdyb3VwT3JkZXIuZ2V0KGIuaXQuZ3JvdXApO1xuICAgICAgICBpZiAoZ2EgIT09IGdiKVxuICAgICAgICAgICAgcmV0dXJuIGdhIC0gZ2I7XG4gICAgICAgIGlmIChhLml0LmxhYmVsICE9PSBiLml0LmxhYmVsKVxuICAgICAgICAgICAgcmV0dXJuIGEuaXQubGFiZWwgLSBiLml0LmxhYmVsO1xuICAgICAgICAvLyBUaWUtYnJlYWtlciB0byBlbnN1cmUgc3RhYmlsaXR5IGZvciBpZGVudGljYWwgKGdyb3VwLCBsYWJlbCkuXG4gICAgICAgIHJldHVybiBhLmkgLSBiLmk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGluZGV4ZWQubWFwKCh4KSA9PiB4Lml0KTtcbn1cbiIsImltcG9ydCB7IFVOR1JPVVBFRF9WQUxVRSB9IGZyb20gJ0Bjb21tb24vdHlwZXMnO1xuLyoqXG4gKiBDcmVhdGVzIGEga2V5LXNjb3BlZCDigJxtYXAgdGFibGXigJ0gdGhhdCBzdG9yZXMgYSByZWNvcmQgYHsgW3BhZ2VLZXldOiBUIH1gXG4gKiB1bmRlciBhIHNpbmdsZSByb290IGtleSBpbiBgY2hyb21lLnN0b3JhZ2UubG9jYWxgLlxuICpcbiAqIFVzZSB0aGlzIGZvciBwZXItcGFnZSBvciBwZXItc2NvcGUgc3RhdGUgd2hlcmUgdmFsdWVzIGFyZSBkaXN0aW5ndWlzaGVkIGJ5IGEgcm93IGtleS5cbiAqXG4gKiBAdHlwZVBhcmFtIFQgLSBWYWx1ZSB0eXBlIHN0b3JlZCBwZXIgcm93LlxuICogQHBhcmFtIHJvb3RLZXkgLSBSb290IGtleSAod2l0aG91dCBuYW1lc3BhY2UgcHJlZml4KSB1bmRlciB3aGljaCB0aGUgZW50aXJlIG1hcCBpcyBzdG9yZWQuXG4gKiBAcGFyYW0gZGVmYXVsdE9mIC0gT3B0aW9uYWwgZmFjdG9yeSB0aGF0IHJldHVybnMgYSBkZWZhdWx0IHZhbHVlIHdoZW4gYSByb3cgaXMgbWlzc2luZy5cbiAqIEByZXR1cm5zIEFuIG9iamVjdCB3aXRoIENSVUQgaGVscGVycyBmb3IgdGhlIHRhYmxlOiBgeyBrZXksIHJlYWRBbGwsIHdyaXRlQWxsLCBnZXQsIHNldCwgcmVtb3ZlLCBjbGVhciB9YC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU1hcFRhYmxlKHJvb3RLZXksIGRlZmF1bHRPZikge1xuICAgIGNvbnN0IEtFWSA9IHJvb3RLZXk7XG4gICAgLyoqXG4gICAgICogTG9hZHMgdGhlIGVudGlyZSBzdGF0ZSBtYXAgZnJvbSBgY2hyb21lLnN0b3JhZ2UubG9jYWxgIGZvciB0aGlzIHRhYmxlLlxuICAgICAqXG4gICAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgdG8gdGhlIGZ1bGwgc3RhdGUgbWFwOyByZXR1cm5zIGFuIGVtcHR5IG9iamVjdCB3aGVuIG5vdGhpbmcgaXMgc3RvcmVkLlxuICAgICAqIEByZW1hcmtzIFBlcmZvcm1zIHN0b3JhZ2UgSS9PIG9uIGV2ZXJ5IGNhbGwuXG4gICAgICovXG4gICAgYXN5bmMgZnVuY3Rpb24gcmVhZEFsbCgpIHtcbiAgICAgICAgY29uc3QgcmF3ID0gYXdhaXQgY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KEtFWSk7XG4gICAgICAgIHJldHVybiByYXdbS0VZXSA/PyB7fTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGVyc2lzdHMgdGhlIGVudGlyZSBzdGF0ZSBtYXAgdG8gYGNocm9tZS5zdG9yYWdlLmxvY2FsYCBmb3IgdGhpcyB0YWJsZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBtYXAgLSBUaGUgY29tcGxldGUgc3RhdGUgbWFwIHRvIHdyaXRlLlxuICAgICAqIEByZXR1cm5zIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSB3cml0ZSBjb21wbGV0ZXMuXG4gICAgICovXG4gICAgYXN5bmMgZnVuY3Rpb24gd3JpdGVBbGwobWFwKSB7XG4gICAgICAgIGF3YWl0IGNocm9tZS5zdG9yYWdlLmxvY2FsLnNldCh7IFtLRVldOiBtYXAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyBhIHNpbmdsZSByb3cgYnkgaXRzIHBhZ2Uga2V5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhZ2VLZXkgLSBSb3cga2V5IChlLmcuLCBwYWdlIGlkZW50aWZpZXIpLlxuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIHRoZSBzdG9yZWQgdmFsdWU7IGlmIG1pc3NpbmcgYW5kIGBkZWZhdWx0T2ZgIGlzIHByb3ZpZGVkLCB0aGF0IGRlZmF1bHQgaXMgcmV0dXJuZWQuXG4gICAgICogQHJlbWFya3MgV2hlbiBgZGVmYXVsdE9mYCBpcyBub3QgcHJvdmlkZWQgYW5kIHRoZSByb3cgaXMgbWlzc2luZywgYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQgKHR5cGVkIGFzIGBUYCkuXG4gICAgICovXG4gICAgYXN5bmMgZnVuY3Rpb24gZ2V0KHBhZ2VLZXkpIHtcbiAgICAgICAgY29uc3QgbWFwID0gYXdhaXQgcmVhZEFsbCgpO1xuICAgICAgICBjb25zdCBmb3VuZCA9IG1hcFtwYWdlS2V5XTtcbiAgICAgICAgaWYgKGZvdW5kICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gZm91bmQ7XG4gICAgICAgIGlmIChkZWZhdWx0T2YpXG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdE9mKHBhZ2VLZXkpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcHNlcnRzIGEgc2luZ2xlIHJvdyBmb3IgdGhlIGdpdmVuIHBhZ2Uga2V5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhZ2VLZXkgLSBSb3cga2V5IHRvIHdyaXRlLlxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIFZhbHVlIHRvIHBlcnNpc3QuXG4gICAgICovXG4gICAgYXN5bmMgZnVuY3Rpb24gc2V0KHBhZ2VLZXksIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG1hcCA9IGF3YWl0IHJlYWRBbGwoKTtcbiAgICAgICAgbWFwW3BhZ2VLZXldID0gdmFsdWU7XG4gICAgICAgIGF3YWl0IHdyaXRlQWxsKG1hcCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZXMgYSBzaW5nbGUgcm93IGZvciB0aGUgZ2l2ZW4gcGFnZSBrZXkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFnZUtleSAtIFJvdyBrZXkgdG8gZGVsZXRlLlxuICAgICAqL1xuICAgIGFzeW5jIGZ1bmN0aW9uIHJlbW92ZShwYWdlS2V5KSB7XG4gICAgICAgIGNvbnN0IG1hcCA9IGF3YWl0IHJlYWRBbGwoKTtcbiAgICAgICAgaWYgKHBhZ2VLZXkgaW4gbWFwKSB7XG4gICAgICAgICAgICBkZWxldGUgbWFwW3BhZ2VLZXldO1xuICAgICAgICAgICAgYXdhaXQgd3JpdGVBbGwobWFwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgdGhlIGVudGlyZSB0YWJsZSAocmVtb3ZlcyBhbGwgcm93cyB1bmRlciB0aGlzIHJvb3Qga2V5KS5cbiAgICAgKi9cbiAgICBhc3luYyBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgYXdhaXQgd3JpdGVBbGwoe30pO1xuICAgIH1cbiAgICByZXR1cm4geyBrZXk6IEtFWSwgcmVhZEFsbCwgd3JpdGVBbGwsIGdldCwgc2V0LCByZW1vdmUsIGNsZWFyIH07XG59XG4vKipcbiAqIENyZWF0ZXMgYSBrZXktc2NvcGVkIOKAnHNpbmdsZXRvbuKAnSBzdG9yZSB0aGF0IHNhdmVzIGEgc2luZ2xlIHZhbHVlIGRpcmVjdGx5XG4gKiB1bmRlciB0aGUgZ2l2ZW4gcm9vdCBrZXkgaW4gYGNocm9tZS5zdG9yYWdlLmxvY2FsYC5cbiAqXG4gKiBVc2UgdGhpcyBmb3IgZ2xvYmFsIHNldHRpbmdzIG9yIGFueSBjb25maWd1cmF0aW9uIHRoYXQgaXMgbm90IGtleWVkIGJ5IHBhZ2UuXG4gKlxuICogQHR5cGVQYXJhbSBUIC0gVmFsdWUgdHlwZSBzdG9yZWQgYXMgYSBzaW5nbGV0b24uXG4gKiBAcGFyYW0gcm9vdEtleSAtIFJvb3Qga2V5ICh3aXRob3V0IG5hbWVzcGFjZSBwcmVmaXgpIHVuZGVyIHdoaWNoIHRoZSB2YWx1ZSBpcyBzdG9yZWQuXG4gKiBAcGFyYW0gZGVmYXVsdEZhY3RvcnkgLSBGYWN0b3J5IGZ1bmN0aW9uIHRvIGxhemlseSBzdXBwbHkgdGhlIGRlZmF1bHQgd2hlbiBubyB2YWx1ZSBleGlzdHMuXG4gKiBAcmV0dXJucyBBbiBvYmplY3Qgd2l0aCBoZWxwZXJzIGZvciB0aGUgc2luZ2xldG9uOiBgeyBrZXksIGdldCwgc2V0LCByZW1vdmUgfWAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTaW5nbGV0b24ocm9vdEtleSwgZGVmYXVsdEZhY3RvcnkpIHtcbiAgICBjb25zdCBLRVkgPSByb290S2V5O1xuICAgIC8qKlxuICAgICAqIFJlYWRzIHRoZSBzaW5nbGV0b24gdmFsdWUgZnJvbSBzdG9yYWdlLlxuICAgICAqXG4gICAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgdG8gdGhlIHN0b3JlZCB2YWx1ZTsgZmFsbHMgYmFjayB0byBgZGVmYXVsdEZhY3RvcnkoKWAgd2hlbiBtaXNzaW5nLlxuICAgICAqL1xuICAgIGFzeW5jIGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgY29uc3QgcmF3ID0gYXdhaXQgY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KEtFWSk7XG4gICAgICAgIGNvbnN0IHZhbCA9IHJhd1tLRVldO1xuICAgICAgICByZXR1cm4gdmFsID09PSB1bmRlZmluZWQgPyBkZWZhdWx0RmFjdG9yeSgpIDogdmFsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXcml0ZXMgdGhlIHNpbmdsZXRvbiB2YWx1ZSB0byBzdG9yYWdlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlIC0gVmFsdWUgdG8gcGVyc2lzdC5cbiAgICAgKi9cbiAgICBhc3luYyBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgYXdhaXQgY2hyb21lLnN0b3JhZ2UubG9jYWwuc2V0KHsgW0tFWV06IHZhbHVlIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBzaW5nbGV0b24gdmFsdWUgZnJvbSBzdG9yYWdlLlxuICAgICAqL1xuICAgIGFzeW5jIGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgICAgYXdhaXQgY2hyb21lLnN0b3JhZ2UubG9jYWwucmVtb3ZlKEtFWSk7XG4gICAgfVxuICAgIHJldHVybiB7IGtleTogS0VZLCBnZXQsIHNldCwgcmVtb3ZlIH07XG59XG5mdW5jdGlvbiBkZWZhdWx0U2NyZWVuU3RhdGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgICBuZXh0SWQ6IDEsXG4gICAgICAgIGRlZmF1bHRTaXplOiAxNCxcbiAgICAgICAgZGVmYXVsdENvbG9yOiAnQmx1ZScsXG4gICAgICAgIGRlZmF1bHRTaGFwZTogJ2NpcmNsZScsXG4gICAgICAgIGRlZmF1bHRMYWJlbEZvcm1hdDogJ051bWJlcnMnLFxuICAgICAgICBkZWZhdWx0VmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgZGVmYXVsdFBvc2l0aW9uOiAnbGVmdC10b3Atb3V0c2lkZScsXG4gICAgICAgIGRlZmF1bHRHcm91cDogVU5HUk9VUEVEX1ZBTFVFLFxuICAgIH07XG59XG4vKipcbiAqIFRhYmxlIGZvciBwZXItcGFnZSBgU2NyZWVuU3RhdGVgIHZhbHVlcy5cbiAqIEVhY2ggcm93IGlzIGFkZHJlc3NlZCBieSBhIHBhZ2Uga2V5OyBtaXNzaW5nIHJvd3MgZmFsbCBiYWNrIHRvIGBkZWZhdWx0U2NyZWVuU3RhdGUoKWAuXG4gKi9cbmV4cG9ydCBjb25zdCBzY3JlZW5TdGF0ZVRhYmxlID0gY3JlYXRlTWFwVGFibGUoJ3NjcmVlblN0YXRlQnlQYWdlJywgKCkgPT4gZGVmYXVsdFNjcmVlblN0YXRlKCkpO1xuLyoqXG4gKiBTaW5nbGV0b24gZm9yIGdsb2JhbCB0aGVtZSBtb2RlLlxuICogU3RvcmVzIGEgc2luZ2xlIGBUaGVtZU1vZGVgIHZhbHVlOyBkZWZhdWx0cyB0byBgJ2RldmljZSdgIHdoZW4gbm90IHNldC5cbiAqL1xuZXhwb3J0IGNvbnN0IHRoZW1lVGFibGUgPSBjcmVhdGVTaW5nbGV0b24oJ3RoZW1lTW9kZScsICgpID0+ICdkZXZpY2UnKTtcbiIsImltcG9ydCB7IHNjcmVlblN0YXRlVGFibGUgfSBmcm9tICdAcGFuZWwvc3RvcmFnZS90YWJsZXMnO1xuLyoqXG4gKiBBcHBsaWVzIGEgcGF0Y2ggKGFkZC91cGRhdGUvcmVtb3ZlKSB0byB0aGUgc3RhdGUgZm9yIHRoZSBnaXZlbiBwYWdlIGtleSxcbiAqIHJlbGFiZWxzIHNlcXVlbnRpYWxseSBpZiBhbnkgcmVtb3ZhbCBvY2N1cnJlZCwgcGVyc2lzdHMgdGhlIHJlc3VsdCxcbiAqIGFuZCByZXR1cm5zIHRoZSB1cGRhdGVkIHN0YXRlLlxuICpcbiAqIEBwYXJhbSBwYWdlS2V5U3RyIC0gUGFnZSBrZXkgb2YgdGhlIHN0YXRlIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSBwYXRjaCAtIENoYW5nZXMgdG8gYXBwbHkgdG8gdGhlIHN0YXRlLlxuICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgdG8gdGhlIHVwZGF0ZWQgU2NyZWVuU3RhdGUuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhcHBseVBhdGNoKHBhZ2VLZXksIHBhdGNoKSB7XG4gICAgY29uc3Qgc3RhdGUgPSBhd2FpdCBzY3JlZW5TdGF0ZVRhYmxlLmdldChwYWdlS2V5KTtcbiAgICBpZiAocGF0Y2gucmVtb3ZlZElkcz8ubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHRvUmVtb3ZlID0gbmV3IFNldChwYXRjaC5yZW1vdmVkSWRzKTtcbiAgICAgICAgc3RhdGUuaXRlbXMgPSBzdGF0ZS5pdGVtcy5maWx0ZXIoKGl0KSA9PiAhdG9SZW1vdmUuaGFzKGl0LmlkKSk7XG4gICAgfVxuICAgIGlmIChwYXRjaC5hZGRlZD8ubGVuZ3RoKSB7XG4gICAgICAgIGZvciAoY29uc3QgYSBvZiBwYXRjaC5hZGRlZCkge1xuICAgICAgICAgICAgY29uc3QgaWQgPSBzdGF0ZS5uZXh0SWQrKztcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gSW5maW5pdHk7XG4gICAgICAgICAgICBjb25zdCBpdCA9IHtcbiAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgICBsYWJlbCxcbiAgICAgICAgICAgICAgICBhbmNob3I6IGEuYW5jaG9yLFxuICAgICAgICAgICAgICAgIHNpemU6IGEuc2l6ZSA/PyBzdGF0ZS5kZWZhdWx0U2l6ZSxcbiAgICAgICAgICAgICAgICBjb2xvcjogYS5jb2xvciA/PyBzdGF0ZS5kZWZhdWx0Q29sb3IsXG4gICAgICAgICAgICAgICAgc2hhcGU6IGEuc2hhcGUgPz8gc3RhdGUuZGVmYXVsdFNoYXBlLFxuICAgICAgICAgICAgICAgIGxhYmVsRm9ybWF0OiBhLmxhYmVsRm9ybWF0ID8/IHN0YXRlLmRlZmF1bHRMYWJlbEZvcm1hdCxcbiAgICAgICAgICAgICAgICB2aXNpYmxlOiBhLnZpc2libGUgPz8gc3RhdGUuZGVmYXVsdFZpc2libGUsXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGEucG9zaXRpb24gPz8gc3RhdGUuZGVmYXVsdFBvc2l0aW9uLFxuICAgICAgICAgICAgICAgIGdyb3VwOiBhLmdyb3VwID8/IHN0YXRlLmRlZmF1bHRHcm91cCxcbiAgICAgICAgICAgICAgICBjb21tZW50OiBhLmNvbW1lbnQgPz8gJycsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc3RhdGUuaXRlbXMucHVzaChpdCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGUuaXRlbXMgPSBub3JtYWxpemVHcm91cExhYmVsc0FuZENvdW50VW5ncm91cGVkKHN0YXRlLml0ZW1zKTtcbiAgICBhd2FpdCBzY3JlZW5TdGF0ZVRhYmxlLnNldChwYWdlS2V5LCBzdGF0ZSk7XG4gICAgcmV0dXJuIHN0YXRlO1xufVxuLyoqXG4gKiBUb2dnbGVzIHNlbGVjdGlvbiBmb3IgdGhlIGdpdmVuIGFuY2hvcnMgKGZyb20gQ29udGVudCk6IGlmIGFuIGFuY2hvciBhbHJlYWR5XG4gKiBleGlzdHMsIHJlbW92ZSBpdDsgb3RoZXJ3aXNlIGFkZCBpdC4gRGVkdXBlIGluY29taW5nIGFuY2hvcnMgYnkgYHZhbHVlYCxcbiAqIGFwcGx5IHRoZSBjb3JyZXNwb25kaW5nIHBhdGNoLCBwZXJzaXN0LCBhbmQgcmV0dXJuIHRoZSBsYXRlc3Qgc3RhdGUuXG4gKlxuICogQHBhcmFtIHBhZ2VLZXlTdHIgLSBQYWdlIGtleSBvZiB0aGUgc3RhdGUgdG8gdXBkYXRlLlxuICogQHBhcmFtIGFuY2hvcnMgLSBBbmNob3JzIHJlcG9ydGVkIGJ5IENvbnRlbnQuXG4gKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB0byB0aGUgdXBkYXRlZCBTY3JlZW5TdGF0ZS5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZVNlbGVjdGVkKHBhZ2VLZXksIGFuY2hvcnMpIHtcbiAgICBjb25zdCBzdGF0ZSA9IGF3YWl0IHNjcmVlblN0YXRlVGFibGUuZ2V0KHBhZ2VLZXkpO1xuICAgIGNvbnN0IHVuaXEgPSBBcnJheS5mcm9tKG5ldyBTZXQoYW5jaG9ycy5tYXAoKGEpID0+IGEudmFsdWUpKSlcbiAgICAgICAgLm1hcCgodikgPT4gYW5jaG9ycy5maW5kKChhKSA9PiBhLnZhbHVlID09PSB2KSlcbiAgICAgICAgLmZpbHRlcihCb29sZWFuKTtcbiAgICBjb25zdCByZW1vdmVkSWRzID0gW107XG4gICAgY29uc3QgdG9BZGQgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGEgb2YgdW5pcSkge1xuICAgICAgICBjb25zdCBmb3VuZCA9IHN0YXRlLml0ZW1zLmZpbmQoKGl0KSA9PiBpdC5hbmNob3Iua2luZCA9PT0gYS5raW5kICYmIGl0LmFuY2hvci52YWx1ZSA9PT0gYS52YWx1ZSk7XG4gICAgICAgIGlmIChmb3VuZCkge1xuICAgICAgICAgICAgcmVtb3ZlZElkcy5wdXNoKGZvdW5kLmlkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRvQWRkLnB1c2goeyBhbmNob3I6IGEgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcGF0Y2ggPSB7fTtcbiAgICBpZiAocmVtb3ZlZElkcy5sZW5ndGgpXG4gICAgICAgIHBhdGNoLnJlbW92ZWRJZHMgPSByZW1vdmVkSWRzO1xuICAgIGlmICh0b0FkZC5sZW5ndGgpXG4gICAgICAgIHBhdGNoLmFkZGVkID0gdG9BZGQ7XG4gICAgcmV0dXJuIGFwcGx5UGF0Y2gocGFnZUtleSwgcGF0Y2gpO1xufVxuLyoqXG4gKiBSZWxhYmVscyBpdGVtcyBjb25zZWN1dGl2ZWx5ICgxLi5uKSAqd2l0aGluIGVhY2ggZ3JvdXAqIGFuZCByZXBvcnRzXG4gKiB0aGUgY3VycmVudCBzaXplIG9mIHRoZSBcIm5vIGdyb3VwXCIgYnVja2V0LlxuICpcbiAqIEBwYXJhbSBpdGVtcyAtIFRoZSBvcmlnaW5hbCBsaXN0IG9mIGl0ZW1zICh0cmVhdGVkIGltbXV0YWJseSkuXG4gKiBAcmV0dXJucyBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgbm9ybWFsaXplZCBpdGVtcyBhbmQgdGhlIG5vLWdyb3VwIGNvdW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplR3JvdXBMYWJlbHNBbmRDb3VudFVuZ3JvdXBlZChpdGVtcykge1xuICAgIGNvbnN0IG5vcm1hbGl6ZSA9IChnKSA9PiAoZyA/PyAnJykudHJpbSgpOyAvLyAnJyBpcyB1bmlmaWVkIGFzIFVuR3JvdXBcbiAgICAvLyBCdWNrZXQgW2luZGV4LCBpdGVtXSBmb3IgZWFjaCBncm91cFxuICAgIGNvbnN0IGJ1Y2tldHMgPSBuZXcgTWFwKCk7XG4gICAgaXRlbXMuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3Qga2V5ID0gbm9ybWFsaXplKGl0ZW0uZ3JvdXApO1xuICAgICAgICBpZiAoIWJ1Y2tldHMuaGFzKGtleSkpXG4gICAgICAgICAgICBidWNrZXRzLnNldChrZXksIFtdKTtcbiAgICAgICAgYnVja2V0cy5nZXQoa2V5KS5wdXNoKHsgaW5kZXgsIGl0ZW0gfSk7XG4gICAgfSk7XG4gICAgY29uc3Qgb3V0ID0gaXRlbXMuc2xpY2UoKTtcbiAgICAvLyBTb3J0IGVhY2ggZ3JvdXAg4oaSIFJlYXNzaWduIDEuLm5cbiAgICBmb3IgKGNvbnN0IFssIGJ1Y2tldF0gb2YgYnVja2V0cykge1xuICAgICAgICBidWNrZXQuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgaWYgKGEuaXRlbS5sYWJlbCAhPT0gYi5pdGVtLmxhYmVsKVxuICAgICAgICAgICAgICAgIHJldHVybiBhLml0ZW0ubGFiZWwgLSBiLml0ZW0ubGFiZWw7XG4gICAgICAgICAgICByZXR1cm4gYS5pdGVtLmlkIC0gYi5pdGVtLmlkO1xuICAgICAgICB9KTtcbiAgICAgICAgYnVja2V0LmZvckVhY2goKHsgaW5kZXgsIGl0ZW0gfSwgaSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGVzaXJlZCA9IGkgKyAxO1xuICAgICAgICAgICAgaWYgKGl0ZW0ubGFiZWwgIT09IGRlc2lyZWQpIHtcbiAgICAgICAgICAgICAgICBvdXRbaW5kZXhdID0geyAuLi5pdGVtLCBsYWJlbDogZGVzaXJlZCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbn1cbiIsImNvbnN0IGkxOG4gPSB7IGdldCwgbG9jYWxpemUgfTtcbi8qKlxuICogUmV0cmlldmVzIGEgbG9jYWxpemVkIG1lc3NhZ2UgYnkga2V5LiBGYWxscyBiYWNrIHRvIHRoZSBrZXkgaXRzZWxmIHdoZW4gbm90IGZvdW5kLlxuICpcbiAqIEBwYXJhbSBrZXkgLSBLZXkgZGVmaW5lZCBpbiBfbG9jYWxlcy9tZXNzYWdlcy5qc29uXG4gKiBAcGFyYW0gc3VicyAtIE9wdGlvbmFsIHN1YnN0aXR1dGlvbiBhcmd1bWVudHNcbiAqIEByZXR1cm5zIExvY2FsaXplZCBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gZ2V0KGtleSwgc3Vicykge1xuICAgIHJldHVybiBjaHJvbWUuaTE4bi5nZXRNZXNzYWdlKGtleSwgc3VicykgfHwga2V5O1xufVxuLyoqXG4gKiBXYWxrcyB0aGUgRE9NIGFuZCBhcHBsaWVzIGxvY2FsaXplZCBzdHJpbmdzIHRvIGVsZW1lbnRzIHdpdGhcbiAqIGBkYXRhLWkxOG5gIGFuZCBgZGF0YS1pMThuLWF0dHJgLlxuICpcbiAqIEBwYXJhbSByb290IC0gUm9vdCBub2RlIHRvIGxvY2FsaXplIChkZWZhdWx0cyB0byBkb2N1bWVudClcbiAqIEByZW1hcmtzXG4gKiAtIGBkYXRhLWkxOG5gIHJlcGxhY2VzIGB0ZXh0Q29udGVudGAuXG4gKiAtIGBkYXRhLWkxOG4tYXR0cmAgdXNlcyBgYXR0cjprZXk7YXR0cjprZXk7Li4uYCB0byBzZXQgYXR0cmlidXRlcy5cbiAqIC0gTXV0YXRlcyB0aGUgRE9NIGluIHBsYWNlLlxuICovXG5mdW5jdGlvbiBsb2NhbGl6ZShyb290ID0gZG9jdW1lbnQpIHtcbiAgICByb290LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWkxOG5dJykuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgICAgY29uc3Qga2V5ID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLWkxOG4nKTtcbiAgICAgICAgaWYgKGtleSlcbiAgICAgICAgICAgIGVsLnRleHRDb250ZW50ID0gZ2V0KGtleSk7XG4gICAgfSk7XG4gICAgcm9vdC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1pMThuLWF0dHJdJykuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgICAgY29uc3Qgc3BlYyA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1pMThuLWF0dHInKTtcbiAgICAgICAgaWYgKCFzcGVjKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBmb3IgKGNvbnN0IHBhaXIgb2Ygc3BlYy5zcGxpdCgnOycpKSB7XG4gICAgICAgICAgICBjb25zdCBbYXR0ciwga2V5XSA9IHBhaXIuc3BsaXQoJzonKS5tYXAoKHMpID0+IHM/LnRyaW0oKSk7XG4gICAgICAgICAgICBpZiAoYXR0ciAmJiBrZXkpXG4gICAgICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKGF0dHIsIGdldChrZXkpKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0IGRlZmF1bHQgaTE4bjtcbiIsImltcG9ydCBpMThuIGZyb20gJ0Bjb21tb24vaTE4bic7XG5leHBvcnQgY29uc3QgU1RBVFVTID0ge1xuICAgIFJFU1RSSUNURUQ6ICdSRVNUUklDVEVEJyxcbiAgICBDT05ORUNUSU5HOiAnQ09OTkVDVElORycsXG4gICAgQ09OTkVDVEVEOiAnQ09OTkVDVEVEJyxcbiAgICBESVNDT05ORUNURUQ6ICdESVNDT05ORUNURUQnLFxufTtcbmNvbnN0IFNUQVRVU19NU0dfS0VZID0ge1xuICAgIFJFU1RSSUNURUQ6ICdzdGF0dXNfcmVzdHJpY3RlZCcsXG4gICAgQ09OTkVDVElORzogJ3N0YXR1c19jb25uZWN0aW5nJyxcbiAgICBDT05ORUNURUQ6ICdzdGF0dXNfY29ubmVjdGVkJyxcbiAgICBESVNDT05ORUNURUQ6ICdzdGF0dXNfZGlzY29ubmVjdGVkJyxcbn07XG5leHBvcnQgY29uc3QgU1RBVFVTX0NMQVNTX0JZX0tFWSA9IHtcbiAgICBSRVNUUklDVEVEOiAnY29ubmVjdC1zdGF0dXMtLXJlc3RyaWN0ZWQnLFxuICAgIENPTk5FQ1RJTkc6ICdjb25uZWN0LXN0YXR1cy0tY29ubmVjdGluZycsXG4gICAgQ09OTkVDVEVEOiAnY29ubmVjdC1zdGF0dXMtLWNvbm5lY3RlZCcsXG4gICAgRElTQ09OTkVDVEVEOiAnY29ubmVjdC1zdGF0dXMtLWRpc2Nvbm5lY3RlZCcsXG59O1xuZXhwb3J0IGZ1bmN0aW9uIGdldFN0YXR1c01lc3NhZ2Uoa2V5KSB7XG4gICAgY29uc3QgbXNnS2V5ID0gU1RBVFVTX01TR19LRVlba2V5XTtcbiAgICByZXR1cm4gaTE4bi5nZXQobXNnS2V5KSB8fCBtc2dLZXk7XG59XG4iLCIvKipcbiAqIEFjdGlvblR5cGVcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBBbiBleGhhdXN0aXZlIGxpc3Qgb2YgKmFwcGxpY2F0aW9uLWxldmVsIGV2ZW50cyogY29uc3VtZWQgYnkgdGhlIHJlZHVjZXIgKHVwZGF0ZS50cykuXG4gKiBPcmlnaW5zOlxuICogICAtIFZpZXcgVUkgZXZlbnRzIChub3JtYWxpemVkIGJ5IHRoZSBDb250cm9sbGVyKVxuICogICAtIE1lc3NhZ2VzIGZyb20gQ29udGVudC9CYWNrZ3JvdW5kIHNjcmlwdHNcbiAqICAgLSBSZXN1bHRzIG9mIGFzeW5jIEkvTyAoY2FwdHVyZSBzdWNjZXNzL2ZhaWx1cmUsIGV0Yy4pXG4gKiBVc2FnZTpcbiAqICAgLSBBY3RzIGFzIHRoZSBkaXNjcmltaW5hbnQgZm9yIGBzd2l0Y2goYWN0aW9uLnR5cGUpYCBpbiB0aGUgcmVkdWNlclxuICogICAtIFB1cmVseSBkZXRlcm1pbmVzIGhvdyB0aGUgTW9kZWwgdHJhbnNpdGlvbnMgKG5vIHNpZGUgZWZmZWN0cyBoZXJlKVxuICovXG5leHBvcnQgdmFyIEFjdGlvblR5cGU7XG4oZnVuY3Rpb24gKEFjdGlvblR5cGUpIHtcbiAgICAvKiogQXBwIGJvb3RzdHJhcCAvIHN0YXJ0ICovXG4gICAgQWN0aW9uVHlwZVtcIklOSVRcIl0gPSBcIklOSVRcIjtcbiAgICAvKiogQWN0aXZlIHRhYiByZXNvbHZlZCBhbmQgY29ubmVjdGlvbiBlc3RhYmxpc2hlZCAodGFiSWQvcGFnZUtleSBkZWNpZGVkKSAqL1xuICAgIEFjdGlvblR5cGVbXCJDT05ORUNURURcIl0gPSBcIkNPTk5FQ1RFRFwiO1xuICAgIC8qKiBVcGRhdGUgcGFuZWwgc3RhdHVzIChDT05ORUNUSU5HIC8gQ09OTkVDVEVEIC8gUkVTVFJJQ1RFRCAvIERJU0NPTk5FQ1RFRCwgZXRjLikgKi9cbiAgICBBY3Rpb25UeXBlW1wiU0VUX1NUQVRVU1wiXSA9IFwiU0VUX1NUQVRVU1wiO1xuICAgIC8qKiBSZXN0b3JlIHBlcnNpc3RlZCBzdGF0ZTogaXRlbXMgYW5kIGRlZmF1bHRzIChzaXplL2NvbG9yL3NoYXBlKSAqL1xuICAgIEFjdGlvblR5cGVbXCJSRVNUT1JFX1NUQVRFXCJdID0gXCJSRVNUT1JFX1NUQVRFXCI7XG4gICAgLyoqIE92ZXJ3cml0ZXMgdGhlIHNldCBvZiBlbGVtZW50cyB0aGF0IGFyZSBub3QgcHJlc2VudCBpbiB0aGUgY29udGVudCAqL1xuICAgIEFjdGlvblR5cGVbXCJTRVRfTUlTU0lOR19JRFNcIl0gPSBcIlNFVF9NSVNTSU5HX0lEU1wiO1xuICAgIC8qKiBUb2dnbGUgc2VsZWN0aW9uIG1vZGUgb24gdGhlIHBhZ2Ugb3ZlcmxheSAqL1xuICAgIEFjdGlvblR5cGVbXCJUT0dHTEVfU0VMRUNUXCJdID0gXCJUT0dHTEVfU0VMRUNUXCI7XG4gICAgLyoqIENsZWFyIGFsbCBzZWxlY3Rpb25zICovXG4gICAgQWN0aW9uVHlwZVtcIkNMRUFSX0FMTFwiXSA9IFwiQ0xFQVJfQUxMXCI7XG4gICAgLyoqIENvbnRlbnQg4oaSIFBhbmVsOiBhbmNob3JzIHdlcmUgdG9nZ2xlZCAoc2VsZWN0ZWQvdW5zZWxlY3RlZCkgb24gdGhlIHBhZ2UgKi9cbiAgICBBY3Rpb25UeXBlW1wiQ09OVEVOVF9TRUxFQ1RFRFwiXSA9IFwiQ09OVEVOVF9TRUxFQ1RFRFwiO1xuICAgIC8qKiBVcGRhdGUgZGVmYXVsdCBiYWRnZSBzaXplIChhbHNvIGFwcGx5IHRvIGV4aXN0aW5nIGl0ZW1zKSAqL1xuICAgIEFjdGlvblR5cGVbXCJTRVRfQkFER0VfU0laRVwiXSA9IFwiU0VUX0JBREdFX1NJWkVcIjtcbiAgICAvKiogVXBkYXRlIGRlZmF1bHQgYmFkZ2UgY29sb3IgKGFsc28gYXBwbHkgdG8gZXhpc3RpbmcgaXRlbXMpICovXG4gICAgQWN0aW9uVHlwZVtcIlNFVF9CQURHRV9DT0xPUlwiXSA9IFwiU0VUX0JBREdFX0NPTE9SXCI7XG4gICAgLyoqIFVwZGF0ZSBkZWZhdWx0IGJhZGdlIHNoYXBlIChhbHNvIGFwcGx5IHRvIGV4aXN0aW5nIGl0ZW1zKSAqL1xuICAgIEFjdGlvblR5cGVbXCJTRVRfQkFER0VfU0hBUEVcIl0gPSBcIlNFVF9CQURHRV9TSEFQRVwiO1xuICAgIC8qKiBVcGRhdGUgZGVmYXVsdCBiYWRnZSBsYWJlbCBmb3JtYXQgKGFsc28gYXBwbHkgdG8gZXhpc3RpbmcgaXRlbXMpICovXG4gICAgQWN0aW9uVHlwZVtcIlNFVF9CQURHRV9MQUJFTF9GT1JNQVRcIl0gPSBcIlNFVF9CQURHRV9MQUJFTF9GT1JNQVRcIjtcbiAgICAvKiogVXBkYXRlIGRlZmF1bHQgYmFkZ2UgdmlzYWJsZSAoYWxzbyBhcHBseSB0byBleGlzdGluZyBpdGVtcykgKi9cbiAgICBBY3Rpb25UeXBlW1wiU0VUX0JBREdFX1ZJU0lCTEVcIl0gPSBcIlNFVF9CQURHRV9WSVNJQkxFXCI7XG4gICAgLyoqIERlbGV0ZSB0aGUgc2VsZWN0ZWQgYmFkZ2UgKi9cbiAgICBBY3Rpb25UeXBlW1wiQkFER0VfREVMRVRFXCJdID0gXCJCQURHRV9ERUxFVEVcIjtcbiAgICAvKiogVXBkYXRlIGRlZmF1bHQgYmFkZ2UgcG9zaXRpb24gKGFsc28gYXBwbHkgdG8gZXhpc3RpbmcgaXRlbXMpICovXG4gICAgQWN0aW9uVHlwZVtcIlNFVF9CQURHRV9QT1NJVElPTlwiXSA9IFwiU0VUX0JBREdFX1BPU0lUSU9OXCI7XG4gICAgLyoqIFVwZGF0ZSBjYXB0dXJlIGZvcm1hdCAocG5nL2pwZWcpICovXG4gICAgQWN0aW9uVHlwZVtcIlNFVF9DQVBUVVJFX0ZPUk1BVFwiXSA9IFwiU0VUX0NBUFRVUkVfRk9STUFUXCI7XG4gICAgLyoqIFVwZGF0ZSBjYXB0dXJlIGFyZWEgKGZ1bGwvdmlld3BvcnQpICovXG4gICAgQWN0aW9uVHlwZVtcIlNFVF9DQVBUVVJFX0FSRUFcIl0gPSBcIlNFVF9DQVBUVVJFX0FSRUFcIjtcbiAgICAvKiogVXBkYXRlIEpQRUcgcXVhbGl0eSAqL1xuICAgIEFjdGlvblR5cGVbXCJTRVRfQ0FQVFVSRV9RVUFMSVRZXCJdID0gXCJTRVRfQ0FQVFVSRV9RVUFMSVRZXCI7XG4gICAgLyoqIFVwZGF0ZSBjYXB0dXJlIHNjYWxlIGZhY3RvciAqL1xuICAgIEFjdGlvblR5cGVbXCJTRVRfQ0FQVFVSRV9TQ0FMRVwiXSA9IFwiU0VUX0NBUFRVUkVfU0NBTEVcIjtcbiAgICAvKiogVG9nZ2xlIGNhcHR1cmUgb3B0aW9ucyBkcm9wZG93biAoZXhwYW5kL2NvbGxhcHNlKSAqL1xuICAgIEFjdGlvblR5cGVbXCJUT0dHTEVfQ0FQVFVSRV9QQU5FTFwiXSA9IFwiVE9HR0xFX0NBUFRVUkVfUEFORUxcIjtcbiAgICAvKiogcmVxdWVzdCBtZWFzdXJpbmcgdGhlIGNvbnRlbnQgc2l6ZSAqL1xuICAgIEFjdGlvblR5cGVbXCJNRUFTVVJFX0NPTlRFTlRfU0laRVwiXSA9IFwiTUVBU1VSRV9DT05URU5UX1NJWkVcIjtcbiAgICAvKiogUmVxdWVzdCB0byBydW4gYSBjYXB0dXJlICovXG4gICAgQWN0aW9uVHlwZVtcIkNBUFRVUkVfUkVRVUVTVEVEXCJdID0gXCJDQVBUVVJFX1JFUVVFU1RFRFwiO1xuICAgIC8qKiBDYXB0dXJlIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkgKi9cbiAgICBBY3Rpb25UeXBlW1wiQ0FQVFVSRV9TVUNDRUVERURcIl0gPSBcIkNBUFRVUkVfU1VDQ0VFREVEXCI7XG4gICAgLyoqIENhcHR1cmUgZmFpbGVkIHdpdGggYW4gZXJyb3IgKi9cbiAgICBBY3Rpb25UeXBlW1wiQ0FQVFVSRV9GQUlMRURcIl0gPSBcIkNBUFRVUkVfRkFJTEVEXCI7XG4gICAgLyoqIFJlb3JkZXJpbmcgc2VsZWN0ZWQgaXRlbXMgKGRyYWcgYW5kIGRyb3ApICovXG4gICAgQWN0aW9uVHlwZVtcIlJFT1JERVJfSVRFTVNcIl0gPSBcIlJFT1JERVJfSVRFTVNcIjtcbiAgICAvKiogVXBkYXRlIGEgZ3JvdXAgb2YgZWxlbWVudHMgKi9cbiAgICBBY3Rpb25UeXBlW1wiU0VUX0dST1VQXCJdID0gXCJTRVRfR1JPVVBcIjtcbiAgICAvKiogUG9ydCBkaXNjb25uZWN0ZWQgKGxvc3QgY29ubmVjdGlvbiB0byBDb250ZW50L1NlcnZpY2UgV29ya2VyKSAqL1xuICAgIEFjdGlvblR5cGVbXCJQT1JUX0RJU0NPTk5FQ1RFRFwiXSA9IFwiUE9SVF9ESVNDT05ORUNURURcIjtcbiAgICAvKiogUmVxdWVzdCB0byBjbG9zZSB0aGUgcGFuZWwgd2hlbiB0aGUgdGFiSWQgbWF0Y2hlcyAoQmFja2dyb3VuZCDihpIgUGFuZWwpICovXG4gICAgQWN0aW9uVHlwZVtcIkNMT1NFX1BBTkVMX1JFUVVFU1RFRFwiXSA9IFwiQ0xPU0VfUEFORUxfUkVRVUVTVEVEXCI7XG4gICAgLyoqIEVtaXR0ZWQgd2hlbiBhbiBpdGVtJ3MgZWRpdC1zZWxlY3Rpb24gY2hlY2tib3ggY2hhbmdlcyBzdGF0ZSAqL1xuICAgIEFjdGlvblR5cGVbXCJJVEVNX1NFTEVDVElPTl9DSEFOR0VEXCJdID0gXCJJVEVNX1NFTEVDVElPTl9DSEFOR0VEXCI7XG4gICAgLyoqIFN0YXJ0IGl0ZW0gaG92ZXIgKi9cbiAgICBBY3Rpb25UeXBlW1wiSVRFTV9IT1ZFUl9JTlwiXSA9IFwiSVRFTV9IT1ZFUl9JTlwiO1xuICAgIC8qKiBFbmQgaXRlbSBob3ZlciAqL1xuICAgIEFjdGlvblR5cGVbXCJJVEVNX0hPVkVSX09VVFwiXSA9IFwiSVRFTV9IT1ZFUl9PVVRcIjtcbiAgICAvKiogUGVyc2lzdCB0aGUgZWRpdGVkIGNvbW1lbnQgdGV4dCBmb3IgdGhlIHRhcmdldGVkIGl0ZW0gKi9cbiAgICBBY3Rpb25UeXBlW1wiVVBEQVRFX0lURU1fQ09NTUVOVFwiXSA9IFwiVVBEQVRFX0lURU1fQ09NTUVOVFwiO1xuICAgIC8qKiBTZXRlIFVJIHRoZW1lICovXG4gICAgQWN0aW9uVHlwZVtcIlNFVF9USEVNRVwiXSA9IFwiU0VUX1RIRU1FXCI7XG4gICAgLyoqIFVwZGF0ZSB0aGUgVUkgdGhlbWUgKi9cbiAgICBBY3Rpb25UeXBlW1wiVVBEQVRFX1RIRU1FXCJdID0gXCJVUERBVEVfVEhFTUVcIjtcbiAgICAvKiogRGlzcGF0Y2hlZCB0byByZXF1ZXN0IHJlbG9hZGluZyB0aGUgbGF0ZXN0IGRhdGEgKi9cbiAgICBBY3Rpb25UeXBlW1wiU1RPUkVfUkVMT0FEX1JFUVVFU1RFRFwiXSA9IFwiU1RPUkVfUkVMT0FEX1JFUVVFU1RFRFwiO1xuICAgIC8qKiBEaXNwYXRjaGVkIGFmdGVyIHRoZSBzdG9yZSBpcyBzdWNjZXNzZnVsbHkgcmVsb2FkZWQgd2l0aCB0aGUgbGF0ZXN0IGRhdGEgKi9cbiAgICBBY3Rpb25UeXBlW1wiU1RPUkVfUkVMT0FEX1NVQ0NFRURFRFwiXSA9IFwiU1RPUkVfUkVMT0FEX1NVQ0NFRURFRFwiO1xuICAgIC8qKiBJbXBvcnQgYSBTY3JlZW5TdGF0ZSBmcm9tIGEgc2VsZWN0ZWQgSlNPTiBmaWxlLiAqL1xuICAgIEFjdGlvblR5cGVbXCJJTVBPUlRfU0NSRUFOX1NUQVRFX0ZJTEVcIl0gPSBcIklNUE9SVF9TQ1JFQU5fU1RBVEVfRklMRVwiO1xuICAgIC8qKiBFbWl0dGVkIHdoZW4gdGhlIGltcG9ydCBvcGVyYXRpb24gc3VjY2VlZHMuICovXG4gICAgQWN0aW9uVHlwZVtcIklNUE9SVF9TVUNDRUVERURcIl0gPSBcIklNUE9SVF9TVUNDRUVERURcIjtcbiAgICAvKiogRW1pdHRlZCB3aGVuIHRoZSBpbXBvcnQgb3BlcmF0aW9uIGZhaWxzLiAqL1xuICAgIEFjdGlvblR5cGVbXCJJTVBPUlRfRkFJTEVEXCJdID0gXCJJTVBPUlRfRkFJTEVEXCI7XG4gICAgLyoqIERpc21pc3MgYSB0b2FzdCBieSBVVUlEICovXG4gICAgQWN0aW9uVHlwZVtcIlRPQVNUX0RJU01JU1NfUkVRVUVTVEVEXCJdID0gXCJUT0FTVF9ESVNNSVNTX1JFUVVFU1RFRFwiO1xuICAgIC8qKiBSZW1vdmUgc2NyZWVuIHN0YXRlIGJ5IHBhZ2Uga2V5ICovXG4gICAgQWN0aW9uVHlwZVtcIlJFTU9WRV9TQ1JFRU5fU1RBVEVfQllfUEFHRVwiXSA9IFwiUkVNT1ZFX1NDUkVFTl9TVEFURV9CWV9QQUdFXCI7XG4gICAgLyoqIEV4cG9ydCBzY3JlZW4gc3RhdGUgYnkgcGFnZSBrZXkgKi9cbiAgICBBY3Rpb25UeXBlW1wiRVhQT1JUX1NDUkVFTl9TVEFURV9CWV9QQUdFXCJdID0gXCJFWFBPUlRfU0NSRUVOX1NUQVRFX0JZX1BBR0VcIjtcbiAgICAvKiogRXhwb3J0IGZhaWxlZCB3aXRoIGFuIGVycm9yICovXG4gICAgQWN0aW9uVHlwZVtcIkVYUE9SVF9GQUlMRURcIl0gPSBcIkVYUE9SVF9GQUlMRURcIjtcbn0pKEFjdGlvblR5cGUgfHwgKEFjdGlvblR5cGUgPSB7fSkpO1xuIiwiLyoqXG4gKiBFZmZlY3RUeXBlXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQSBkZWNsYXJhdGl2ZSBzZXQgb2YgKnNpZGUtZWZmZWN0IHJlcXVlc3RzKiBwcm9kdWNlZCBieSB0aGUgcmVkdWNlci5cbiAqIEV4ZWN1dG9yOlxuICogICAtIFRoZSBDb250cm9sbGVyIGludGVycHJldHMgYW5kIHBlcmZvcm1zIGVhY2ggZWZmZWN0IChJL08sIFJQQywgcGVyc2lzdGVuY2UpLlxuICogUHVycG9zZTpcbiAqICAgLSBLZWVwIHRoZSByZWR1Y2VyIHB1cmUgd2hpbGUgc3RpbGwgZW5hYmxpbmcgbmVjZXNzYXJ5IGV4dGVybmFsIGVmZmVjdHMuXG4gKi9cbmV4cG9ydCB2YXIgRWZmZWN0VHlwZTtcbihmdW5jdGlvbiAoRWZmZWN0VHlwZSkge1xuICAgIC8qKiBQdXNoIHRoZSBjdXJyZW50IGl0ZW1zIHRvIHRoZSBDb250ZW50IHNjcmlwdCB0byByZW5kZXIgdGhlIG92ZXJsYXkgKi9cbiAgICBFZmZlY3RUeXBlW1wiUkVOREVSX0NPTlRFTlRcIl0gPSBcIlJFTkRFUl9DT05URU5UXCI7XG4gICAgLyoqIEVuYWJsZS9kaXNhYmxlIHNlbGVjdGlvbiBtb2RlIG9uIHRoZSBDb250ZW50IHNpZGUgKi9cbiAgICBFZmZlY3RUeXBlW1wiVE9HR0xFX1NFTEVDVF9PTl9DT05URU5UXCJdID0gXCJUT0dHTEVfU0VMRUNUX09OX0NPTlRFTlRcIjtcbiAgICAvKiogQ2xlYXIgb3ZlcmxheSBvbiB0aGUgQ29udGVudCBzaWRlICovXG4gICAgRWZmZWN0VHlwZVtcIkNMRUFSX0NPTlRFTlRcIl0gPSBcIkNMRUFSX0NPTlRFTlRcIjtcbiAgICAvKiogaXRlbSBob3ZlciAqL1xuICAgIEVmZmVjdFR5cGVbXCJIT1ZFUlwiXSA9IFwiSE9WRVJcIjtcbiAgICAvKiogcmVxdWVzdCBtZWFzdXJpbmcgdGhlIGNvbnRlbnQgc2l6ZSAqL1xuICAgIEVmZmVjdFR5cGVbXCJNRUFTVVJFX0NPTlRFTlRfU0laRVwiXSA9IFwiTUVBU1VSRV9DT05URU5UX1NJWkVcIjtcbiAgICAvKiogUnVuIGEgY2FwdHVyZSB3aXRoIHRoZSBnaXZlbiBwYXJhbWV0ZXJzICh0YWJJZC9mb3JtYXQvYXJlYS9xdWFsaXR5L3NjYWxlKSAqL1xuICAgIEVmZmVjdFR5cGVbXCJDQVBUVVJFXCJdID0gXCJDQVBUVVJFXCI7XG4gICAgLyoqIFBlcnNpc3QgdGhlIHN0YXRlIHRvIHN0b3JhZ2Ugd2l0aCBzZWxlY3RlZCBpdGVtcyByZXNldCAoY2xlYXJlZCkuICovXG4gICAgRWZmZWN0VHlwZVtcIkNMRUFSX1NUQVRFXCJdID0gXCJDTEVBUl9TVEFURVwiO1xuICAgIC8qKlxuICAgICAqIFBlcnNpc3QgdGhlIGN1cnJlbnQgc3RhdGUgdG8gc3RvcmFnZS5cbiAgICAgKiBOT1RFOiBNdXN0IHByZXNlcnZlIGV4aXN0aW5nIGNvdW50ZXJzIChuZXh0SWQvbmV4dExhYmVsKTsgZG8gbm90IHJlc2V0IHRoZW0uXG4gICAgICovXG4gICAgRWZmZWN0VHlwZVtcIlBFUlNJU1RfU1RBVEVcIl0gPSBcIlBFUlNJU1RfU1RBVEVcIjtcbiAgICAvKiogU2V0ZSBVSSB0aGVtZSAqL1xuICAgIEVmZmVjdFR5cGVbXCJTRVRfVEhFTUVcIl0gPSBcIlNFVF9USEVNRVwiO1xuICAgIC8qKiBVcGRhdGUgdGhlIFVJIHRoZW1lICovXG4gICAgRWZmZWN0VHlwZVtcIlVQREFURV9USEVNRVwiXSA9IFwiVVBEQVRFX1RIRU1FXCI7XG4gICAgLyoqIFJlYWQgdGhlIHNjcmVlbi1zdGF0ZSBtYXAgZnJvbSBgY2hyb21lLnN0b3JhZ2UubG9jYWxgICovXG4gICAgRWZmZWN0VHlwZVtcIlJFQURfU0NSRUVOX1NUQVRFX1NUT1JFXCJdID0gXCJSRUFEX1NDUkVFTl9TVEFURV9TVE9SRVwiO1xuICAgIC8qKiBJbXBvcnQgYSBTY3JlZW5TdGF0ZSBmcm9tIGEgc2VsZWN0ZWQgSlNPTiBmaWxlLiAqL1xuICAgIEVmZmVjdFR5cGVbXCJJTVBPUlRfU0NSRUFOX1NUQVRFX0ZJTEVcIl0gPSBcIklNUE9SVF9TQ1JFQU5fU1RBVEVfRklMRVwiO1xuICAgIC8qKiBSZW1vdmUgc2NyZWVuIHN0YXRlIGJ5IHBhZ2Uga2V5ICovXG4gICAgRWZmZWN0VHlwZVtcIlJFTU9WRV9TQ1JFRU5fU1RBVEVfU1RPUkVfQllfUEFHRV9LRVlcIl0gPSBcIlJFTU9WRV9TQ1JFRU5fU1RBVEVfU1RPUkVfQllfUEFHRV9LRVlcIjtcbiAgICAvKiogRXhwb3J0IHNjcmVlbiBzdGF0ZSBieSBwYWdlIGtleSAqL1xuICAgIEVmZmVjdFR5cGVbXCJFWFBPUlRfU0NSRUVOX1NUQVRFX0JZX1BBR0VfS0VZXCJdID0gXCJFWFBPUlRfU0NSRUVOX1NUQVRFX0JZX1BBR0VfS0VZXCI7XG4gICAgLyoqIFJlcG9ydC9sb2cgYW4gZXJyb3IgKGFuZCBvcHRpb25hbGx5IHN1cmZhY2UgaXQgdG8gdGhlIFVJKSAqL1xuICAgIEVmZmVjdFR5cGVbXCJOT1RJRllfRVJST1JcIl0gPSBcIk5PVElGWV9FUlJPUlwiO1xufSkoRWZmZWN0VHlwZSB8fCAoRWZmZWN0VHlwZSA9IHt9KSk7XG4iLCJleHBvcnQgY29uc3QgUFJPVE9DT0xfVkVSU0lPTiA9IDE7XG5leHBvcnQgY29uc3QgQ0hBTk5FTCA9IHtcbiAgICBQQU5FTF9DT05URU5UOiBgc3BzazpwYW5lbC1jb250ZW50OnYke1BST1RPQ09MX1ZFUlNJT059YCxcbn07XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBQb3J0Lm5hbWUgbWF0Y2hlcyB0aGUgc3BlY2lmaWVkIGNoYW5uZWwuXG4gKiBVc2UgdGhpcyB0byBzYWZlbHkgZGlzdGluZ3Vpc2ggY29ubmVjdGlvbiB0eXBlcyBiZXR3ZWVuIFBhbmVsIGFuZCBDb250ZW50LlxuICpcbiAqIEBwYXJhbSBwb3J0IC0gQSBjb25uZWN0ZWQgcnVudGltZS5Qb3J0XG4gKiBAcGFyYW0gbmFtZSAtIFRhcmdldCBjaGFubmVsIG5hbWUgdG8gY29tcGFyZVxuICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgcG9ydCBiZWxvbmdzIHRvIHRoZSBjaGFubmVsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0NoYW5uZWwocG9ydCwgbmFtZSkge1xuICAgIHJldHVybiBwb3J0Lm5hbWUgPT09IG5hbWU7XG59XG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgcG9ydCBpcyB1c2VkIGZvciBQYW5lbCDihpQgQ29udGVudCBjb21tdW5pY2F0aW9uLlxuICogQSBjb252ZW5pZW5jZSB3cmFwcGVyIGZvciBDSEFOTkVMLlBBTkVMX0NPTlRFTlQuXG4gKlxuICogQHBhcmFtIHBvcnQgLSBBIGNvbm5lY3RlZCBydW50aW1lLlBvcnRcbiAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHBvcnQgaXMgdGhlIFBhbmVs4oCTQ29udGVudCBjaGFubmVsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1BhbmVsQ29udGVudFBvcnQocG9ydCkge1xuICAgIHJldHVybiBpc0NoYW5uZWwocG9ydCwgQ0hBTk5FTC5QQU5FTF9DT05URU5UKTtcbn1cbiIsImltcG9ydCB7IE1TR19UWVBFIH0gZnJvbSAnQGNvbW1vbi9tZXNzYWdlcyc7XG4vKipcbiAqIFRoaW4gUlBDIHdyYXBwZXIgZm9yIHNlbmRpbmcgbWVzc2FnZXMgZnJvbSBQYW5lbCB0byBDb250ZW50LlxuICogRXhwb3NlcyBoaWdoLWxldmVsIG1ldGhvZHMgZm9yIGVhY2ggbWVzc2FnZSB0eXBlLlxuICovXG5leHBvcnQgY2xhc3MgUGFuZWxBcGkge1xuICAgIHJwYztcbiAgICBjb25zdHJ1Y3RvcihycGMpIHtcbiAgICAgICAgdGhpcy5ycGMgPSBycGM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEludGVybmFsIHNlbmQgaGVscGVyIHRoYXQgYXR0YWNoZXMgYW4gUlBDIHJlcXVlc3QgaWQgYXMgbmVlZGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIGJvZHkgLSBNZXNzYWdlIHBheWxvYWQgdG8gc2VuZFxuICAgICAqIEByZXR1cm5zIFZvaWQtbGlrZSB3aGVuIG5vIHJlcGx5IGlzIGV4cGVjdGVkOyBvdGhlcndpc2UgcmVzb2x2ZXMgd2l0aCBhIHJlc3BvbnNlXG4gICAgICovXG4gICAgc2VuZChib2R5KSB7XG4gICAgICAgIGNvbnN0IHJlcSA9IHtcbiAgICAgICAgICAgIGlkOiBjcnlwdG8ucmFuZG9tVVVJRCgpLFxuICAgICAgICAgICAgZXhwZWN0UmVwbHk6IGZhbHNlLFxuICAgICAgICAgICAgLi4uYm9keSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMucnBjLnNlbmQocmVxKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVxdWVzdHMgQ29udGVudCB0byByZW5kZXIgdGhlIGdpdmVuIGl0ZW1zLlxuICAgICAqIEBwYXJhbSBpdGVtcyAtIEl0ZW1zIHRvIGRyYXdcbiAgICAgKi9cbiAgICByZW5kZXIoaXRlbXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCh7IHR5cGU6IE1TR19UWVBFLlJFTkRFUiwgcGF5bG9hZDogeyBpdGVtcyB9IH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUb2dnbGVzIHNlbGVjdGlvbiBtb2RlIGluIENvbnRlbnQuXG4gICAgICogQHBhcmFtIGVuYWJsZWQgLSBUcnVlIHRvIGVuYWJsZVxuICAgICAqL1xuICAgIHRvZ2dsZVNlbGVjdChlbmFibGVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoeyB0eXBlOiBNU0dfVFlQRS5UT0dHTEVfU0VMRUNULCBwYXlsb2FkOiB7IGVuYWJsZWQgfSB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xlYXJzIHRoZSBDb250ZW50IG92ZXJsYXkuXG4gICAgICovXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoeyB0eXBlOiBNU0dfVFlQRS5DTEVBUiB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBob3ZlcmVkIGl0ZW0gYW5kIHJlcXVlc3QgYSB0cmFuc2llbnQgaGlnaGxpZ2h0IG9uIENvbnRlbnQuXG4gICAgICogUGFzcyBgbnVsbGAgdG8gY2xlYXIgdGhlIGN1cnJlbnQgaG92ZXIgaGlnaGxpZ2h0LlxuICAgICAqXG4gICAgICogQHBhcmFtIGlkIC0gVGFyZ2V0IGl0ZW0gSUQsIG9yIGBudWxsYCB0byBjbGVhci5cbiAgICAgKi9cbiAgICBob3ZlcihpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKHsgdHlwZTogTVNHX1RZUEUuSE9WRVIsIHBheWxvYWQ6IHsgaWQgfSB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZHMgYSByZXF1ZXN0IHRvIG1lYXN1cmUgdGhlIGN1cnJlbnQgY29udGVudCBzaXplLlxuICAgICAqL1xuICAgIG1lYXN1cmVTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKHsgdHlwZTogTVNHX1RZUEUuTUVBU1VSRV9TSVpFIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIGNvbm5lY3Rpdml0eSBoZWFsdGggY2hlY2sgKHJvdW5kLXRyaXApLlxuICAgICAqIFNlbnQgYXMgYSByZXF1ZXN0IGV4cGVjdGluZyBhIHJlcGx5LlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIHJlc3BvbnNlLCBvciB1bmRlZmluZWQgb24gdGltZW91dFxuICAgICAqL1xuICAgIHBpbmcoKSB7XG4gICAgICAgIGNvbnN0IHJlcSA9IHtcbiAgICAgICAgICAgIGlkOiBjcnlwdG8ucmFuZG9tVVVJRCgpLFxuICAgICAgICAgICAgZXhwZWN0UmVwbHk6IHRydWUsXG4gICAgICAgICAgICB0eXBlOiBNU0dfVFlQRS5QSU5HLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5ycGMuc2VuZChyZXEsIDUwMDApO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGlzUmVzcG9uc2UgfSBmcm9tICdAY29tbW9uL21lc3NhZ2VzJztcbi8qKlxuICogSW1wbGVtZW50cyBhIG1pbmltYWwgcmVxdWVzdC9yZXNwb25zZSBSUEMgb3ZlciBjaHJvbWUucnVudGltZS5Qb3J0LlxuICogVHJhY2tzIHBlbmRpbmcgcmVxdWVzdHMgYnkgaWQgYW5kIGhhbmRsZXMgdGltZW91dHMgYW5kIGRpc2Nvbm5lY3RzLlxuICovXG5leHBvcnQgY2xhc3MgUG9ydFJwYyB7XG4gICAgcG9ydDtcbiAgICBwZW5kaW5nID0gbmV3IE1hcCgpO1xuICAgIGFsaXZlID0gdHJ1ZTtcbiAgICAvKipcbiAgICAgKiBTdWJzY3JpYmVzIHRvIHBvcnQgbWVzc2FnZSBhbmQgZGlzY29ubmVjdCBldmVudHMuXG4gICAgICogQHBhcmFtIHBvcnQgLSBUaGUgcnVudGltZS5Qb3J0IHVzZWQgZm9yIG1lc3NhZ2luZ1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHBvcnQpIHtcbiAgICAgICAgdGhpcy5wb3J0ID0gcG9ydDtcbiAgICAgICAgdGhpcy5wb3J0Lm9uTWVzc2FnZS5hZGRMaXN0ZW5lcigobXNnKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNSZXNwb25zZShtc2cpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5nLmdldChtc2cuaWQpPy4obXNnKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmcuZGVsZXRlKG1zZy5pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnBvcnQub25EaXNjb25uZWN0LmFkZExpc3RlbmVyKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWxpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIC8vIFJlYXNvbnMgc3VjaCBhcyBCRkNhY2hlIG1heSBiZSBpbmNsdWRlZFxuICAgICAgICAgICAgY29uc3QgcmVhc29uID0gY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yPy5tZXNzYWdlID8/ICdkaXNjb25uZWN0ZWQnO1xuICAgICAgICAgICAgLy8gVHJlYXQgcGVuZGluZyBzdGF0dXMgYXMgZmFpbHVyZSB3aGVuIGEgZGlzY29ubmVjdGlvbiBvY2N1cnMuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtpZCwgcmVzb2x2ZV0gb2YgdGhpcy5wZW5kaW5nKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh7IGlkLCBvazogZmFsc2UsIGVycm9yOiByZWFzb24gfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnBlbmRpbmcuY2xlYXIoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIEdldCB0aGUgY3VycmVudCBjb25uZWN0aW9uIHN0YXR1c1xuICAgIGdldCBpc0FsaXZlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hbGl2ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZHMgYW4gUlBDIHJlcXVlc3QgYW5kIG9wdGlvbmFsbHkgYXdhaXRzIGEgcmVzcG9uc2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVxIC0gVGhlIFJQQyByZXF1ZXN0IHRvIHNlbmRcbiAgICAgKiBAcGFyYW0gdGltZW91dE1zIC0gVGltZW91dCAobXMpIHdoZW4gd2FpdGluZyBmb3IgYSByZXBseSAoZGVmYXVsdCA1MDAwKVxuICAgICAqIEByZXR1cm5zIFRoZSByZXNwb25zZSB3aGVuIGBleHBlY3RSZXBseWAgaXMgdHJ1ZTsgb3RoZXJ3aXNlIHVuZGVmaW5lZFxuICAgICAqL1xuICAgIHNlbmQocmVxLCB0aW1lb3V0TXMgPSA1MDAwKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgLy8gSWYgYWxyZWFkeSBkaXNjb25uZWN0ZWQsIGltbWVkaWF0ZWx5IHRlcm1pbmF0ZSAoYXZvaWQgVW5jaGVja2VkIHJ1bnRpbWUubGFzdEVycm9yKVxuICAgICAgICAgICAgaWYgKCF0aGlzLmFsaXZlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUocmVxLmV4cGVjdFJlcGx5ID8gdW5kZWZpbmVkIDogdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXEuZXhwZWN0UmVwbHkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmcuZGVsZXRlKHJlcS5pZCk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICB9LCB0aW1lb3V0TXMpO1xuICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZy5zZXQocmVxLmlkLCAocmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wb3J0LnBvc3RNZXNzYWdlKHJlcSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICAgICAgaWYgKHJlcS5leHBlY3RSZXBseSlcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5nLmRlbGV0ZShyZXEuaWQpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUodW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXJlcS5leHBlY3RSZXBseSlcbiAgICAgICAgICAgICAgICByZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsImV4cG9ydCBjb25zdCBDRFBfVkVSU0lPTiA9ICcxLjMnO1xuLyoqXG4gKiBXcmFwcyBgY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yYCBpbnRvIGEgc3RhbmRhcmQgYEVycm9yYCBpbnN0YW5jZS5cbiAqXG4gKiBAcmV0dXJucyBBbiBgRXJyb3JgIGlmIGEgbGFzdCBlcnJvciBleGlzdHM7IG90aGVyd2lzZSBgbnVsbGAuXG4gKi9cbmZ1bmN0aW9uIGxhc3RFcnJvcigpIHtcbiAgICBjb25zdCBlcnIgPSBjaHJvbWUucnVudGltZS5sYXN0RXJyb3I7XG4gICAgcmV0dXJuIGVyciA/IG5ldyBFcnJvcihlcnIubWVzc2FnZSB8fCBTdHJpbmcoZXJyKSkgOiBudWxsO1xufVxuLyoqIFRyYWNrcyB0YWJJZHMgdGhhdCB0aGlzIGV4dGVuc2lvbiBjdXJyZW50bHkgb3ducyAoYXR0YWNoZWQgYnkgaXRzZWxmKS4gKi9cbmNvbnN0IE9XTkVEID0gbmV3IFNldCgpO1xuLyoqIENsZWFycyBvd25lcnNoaXAgb24gZGV0YWNoIChjb3ZlcnMgZXh0ZXJuYWwgY2F1c2VzIGxpa2Ugb3BlbmluZy9jbG9zaW5nIERldlRvb2xzKS4gKi9cbmNocm9tZS5kZWJ1Z2dlci5vbkRldGFjaC5hZGRMaXN0ZW5lcigoZGVidWdnZWUpID0+IHtcbiAgICBjb25zdCBpZCA9IGRlYnVnZ2VlLnRhYklkO1xuICAgIGlmICh0eXBlb2YgaWQgPT09ICdudW1iZXInKVxuICAgICAgICBPV05FRC5kZWxldGUoaWQpO1xufSk7XG4vKipcbiAqIERldGFjaGVzIHRoZSBDaHJvbWUgRGVidWdnZXIgKENEUCkgZnJvbSB0aGUgZ2l2ZW4gdGFyZ2V0LlxuICpcbiAqIEBwYXJhbSB0YXJnZXQgLSBUaGUgZGVidWdnZWUgdG8gZGV0YWNoIGZyb20uXG4gKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyBvbmNlIGRldGFjaG1lbnQgY29tcGxldGVzLlxuICovXG5hc3luYyBmdW5jdGlvbiBkZXRhY2godGFyZ2V0KSB7XG4gICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgY2hyb21lLmRlYnVnZ2VyLmRldGFjaCh0YXJnZXQsICgpID0+IHJlc29sdmUoKSk7XG4gICAgfSk7XG59XG4vKipcbiAqIFNhZmVseSBhdHRhY2hlcyB0byB0aGUgdGFyZ2V0LiBJZiBhIHByZXZpb3VzIHNlc3Npb24gb3duZWQgYnkgdGhpcyBleHRlbnNpb25cbiAqIGlzIGFscmVhZHkgYXR0YWNoZWQsIGl0IHJldXNlcyBpdCBpbnN0ZWFkIG9mIGZhaWxpbmcuXG4gKlxuICogQHBhcmFtIHRhcmdldCAtIFRoZSBkZWJ1Z2dlZSB0byBhdHRhY2ggdG8gKGUuZy4sIGB7IHRhYklkIH1gKS5cbiAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGB0cnVlYCB3aGVuIHRoaXMgY2FsbCBwZXJmb3JtZWQgYSBuZXcgYXR0YWNoLFxuICogICAgICAgICAgb3IgYGZhbHNlYCB3aGVuIGFuIGV4aXN0aW5nIG93bmVkIHNlc3Npb24gaXMgcmV1c2VkLlxuICogQHRocm93cyBJZiBhbm90aGVyIGNsaWVudCAoRGV2VG9vbHMvYW5vdGhlciBleHRlbnNpb24pIGlzIGF0dGFjaGVkLCBvciBvbiBvdGhlciBhdHRhY2ggZXJyb3JzLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYXR0YWNoT3duZWQodGFyZ2V0KSB7XG4gICAgY29uc3QgdGFiSWQgPSB0YXJnZXQudGFiSWQgPz8gbnVsbDtcbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjaHJvbWUuZGVidWdnZXIuYXR0YWNoKHRhcmdldCwgQ0RQX1ZFUlNJT04sICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVyciA9IGNocm9tZS5ydW50aW1lLmxhc3RFcnJvcjtcbiAgICAgICAgICAgIGlmICghZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRhYklkICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIE9XTkVELmFkZCh0YWJJZCk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTsgLy8gbmV3bHkgYXR0YWNoZWQgYnkgdGhpcyBjYWxsXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbXNnID0gZXJyLm1lc3NhZ2UgfHwgJyc7XG4gICAgICAgICAgICBpZiAobXNnLmluY2x1ZGVzKCdBbm90aGVyIGRlYnVnZ2VyIGlzIGFscmVhZHkgYXR0YWNoZWQnKSkge1xuICAgICAgICAgICAgICAgIC8vIEFscmVhZHkgYXR0YWNoZWQ6IHJldXNlIG9ubHkgaWYgb3duZWQgYnkgdGhpcyBleHRlbnNpb24uXG4gICAgICAgICAgICAgICAgaWYgKHRhYklkICE9IG51bGwgJiYgT1dORUQuaGFzKHRhYklkKSkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGZhbHNlKTsgLy8gcmV1c2UgZXhpc3Rpbmcgb3duZWQgc2Vzc2lvblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignRGVidWdnZXIgaXMgYWxyZWFkeSBhdHRhY2hlZCBieSBhbm90aGVyIGNsaWVudCAoRGV2VG9vbHMvZXh0ZW5zaW9uKS4nKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihtc2cpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4vKipcbiAqIFNhZmVseSBkZXRhY2hlcyBvbmx5IHdoZW4gdGhlIGN1cnJlbnQgZXh0ZW5zaW9uIG93bnMgdGhlIHNlc3Npb24uXG4gKiBOby1vcHMgaWYgdGhlIHRhcmdldCBpcyBub3Qgb3duZWQuXG4gKlxuICogQHBhcmFtIHRhcmdldCAtIFRoZSBkZWJ1Z2dlZSB0byBkZXRhY2ggZnJvbS5cbiAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIGFmdGVyIGRldGFjaGluZyAob3IgaW1tZWRpYXRlbHkgaWYgbm90IG93bmVkKS5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRldGFjaE93bmVkKHRhcmdldCkge1xuICAgIGNvbnN0IHRhYklkID0gdGFyZ2V0LnRhYklkID8/IG51bGw7XG4gICAgaWYgKHRhYklkID09IG51bGwpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAoIU9XTkVELmhhcyh0YWJJZCkpXG4gICAgICAgIHJldHVybjsgLy8gbm90IG93bmVkIGJ5IHRoaXMgZXh0ZW5zaW9uXG4gICAgYXdhaXQgZGV0YWNoKHRhcmdldCk7XG4gICAgT1dORUQuZGVsZXRlKHRhYklkKTtcbn1cbi8qKlxuICogU2VuZHMgYSBDRFAgY29tbWFuZCB0byB0aGUgYXR0YWNoZWQgdGFyZ2V0LlxuICpcbiAqIEB0eXBlUGFyYW0gVCAtIEV4cGVjdGVkIHJlc3VsdCB0eXBlIG9mIHRoZSBjb21tYW5kLlxuICogQHBhcmFtIHRhcmdldCAtIFRoZSBkZWJ1Z2dlZSB0byB3aGljaCB0aGUgY29tbWFuZCBpcyBzZW50LlxuICogQHBhcmFtIG1ldGhvZCAtIENEUCBtZXRob2QgbmFtZSAoZS5nLiwgYCdQYWdlLmNhcHR1cmVTY3JlZW5zaG90J2ApLlxuICogQHBhcmFtIHBhcmFtcyAtIE9wdGlvbmFsIHBhcmFtZXRlcnMgb2JqZWN0IGZvciB0aGUgY29tbWFuZC5cbiAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGNvbW1hbmQgcmVzdWx0IG9yIHJlamVjdHMgaWYgYW4gZXJyb3Igb2NjdXJzLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VuZCh0YXJnZXQsIG1ldGhvZCwgcGFyYW1zKSB7XG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY2hyb21lLmRlYnVnZ2VyLnNlbmRDb21tYW5kKHRhcmdldCwgbWV0aG9kLCBwYXJhbXMgPz8ge30sIChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVyciA9IGxhc3RFcnJvcigpO1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgocmVzdWx0ID8/IHt9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuIiwiaW1wb3J0IHsgaXNSZXN0cmljdGVkIH0gZnJvbSAnQGNvbW1vbi91cmwnO1xuaW1wb3J0IHsgYXR0YWNoT3duZWQsIGRldGFjaE93bmVkLCBzZW5kIH0gZnJvbSAnQGluZnJhL2NkcC9jZHBfY2xpZW50Jztcbi8qKlxuICogTm9ybWFsaXplcyBhIHN0cmluZyBmb3Igc2FmZSB1c2UgYXMgYSBmaWxlbmFtZTpcbiAqIHJlcGxhY2VzIHJlc2VydmVkIGNoYXJhY3RlcnMsIGNvbGxhcHNlcyB3aGl0ZXNwYWNlLCBhbmQgdHJpbXMgZW5kcy5cbiAqXG4gKiBAcGFyYW0gcyAtIFJhdyBzdHJpbmcgdG8gc2FuaXRpemUuXG4gKiBAcmV0dXJucyBTYW5pdGl6ZWQgZmlsZW5hbWUtc2FmZSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIHNhbml0aXplRm9yRmlsZW5hbWUocykge1xuICAgIHJldHVybiBzXG4gICAgICAgIC5yZXBsYWNlKC9bXFxcXC86Kj9cIjw+fF0vZywgJ18nKVxuICAgICAgICAucmVwbGFjZSgvXFxzKy9nLCAnICcpXG4gICAgICAgIC50cmltKCk7XG59XG4vKipcbiAqIEJ1aWxkcyBhIHRpbWVzdGFtcGVkIGZpbGVuYW1lIGZvciB0aGUgY2FwdHVyZSBiYXNlZCBvbiB0aGUgdGFiJ3MgdGl0bGUgb3IgaG9zdC5cbiAqIFRydW5jYXRlcyB0aGUgYmFzZSBuYW1lIHRvIDgwIGNoYXJhY3RlcnMgYW5kIGFwcGVuZHMgdGhlIHByb3BlciBleHRlbnNpb24uXG4gKlxuICogQHBhcmFtIHRhYiAtIFNvdXJjZSB0YWIgKHRpdGxlL3VybCB1c2VkIGZvciBuYW1pbmcpLlxuICogQHBhcmFtIGZtdCAtIFRhcmdldCBpbWFnZSBmb3JtYXQgKCdwbmcnIHwgJ2pwZWcnKS5cbiAqIEByZXR1cm5zIEEgZmlsZW5hbWUgbGlrZSBgcGFnZS0yMDI1LTA4LTEzVDEwLTIwLTMwLTAwMFoucG5nYC5cbiAqL1xuZnVuY3Rpb24gbWFrZUZpbGVuYW1lKHRhYiwgZm10KSB7XG4gICAgY29uc3QgdGl0bGUgPSB0YWIudGl0bGUgJiYgdGFiLnRpdGxlLnRyaW0oKSA/IHRhYi50aXRsZSA6ICcnO1xuICAgIGxldCBiYXNlID0gdGl0bGUgfHxcbiAgICAgICAgKCgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVUkwodGFiLnVybCA/PyAnJykuaG9zdCB8fCAncGFnZSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdwYWdlJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkoKTtcbiAgICBiYXNlID0gc2FuaXRpemVGb3JGaWxlbmFtZShiYXNlKTtcbiAgICBpZiAoYmFzZS5sZW5ndGggPiA4MClcbiAgICAgICAgYmFzZSA9IGJhc2Uuc2xpY2UoMCwgODApO1xuICAgIGNvbnN0IHRzID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpLnJlcGxhY2UoL1s6Ll0vZywgJy0nKTtcbiAgICByZXR1cm4gYCR7YmFzZX0tJHt0c30uJHtmbXR9YDtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCB2aXN1YWwgdmlld3BvcnQgcmVjdGFuZ2xlIGluIENTUyBwaXhlbHMgKGZvciB2aWV3cG9ydCBjYXB0dXJlKS5cbiAqIEBwYXJhbSB0YXJnZXQgLSBEZXZUb29scyBQcm90b2NvbCB0YXJnZXQgdGFiIChgY2hyb21lLmRlYnVnZ2VyLkRlYnVnZ2VlYCkuXG4gKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB0byBgeyB4LCB5LCB3aWR0aCwgaGVpZ2h0IH1gIGluIENTUyBwaXhlbHMuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdldFZpZXdwb3J0Q3NzUmVjdCh0YXJnZXQpIHtcbiAgICBjb25zdCBsbSA9IGF3YWl0IHNlbmQodGFyZ2V0LCAnUGFnZS5nZXRMYXlvdXRNZXRyaWNzJyk7XG4gICAgY29uc3QgdiA9IGxtLmNzc1Zpc3VhbFZpZXdwb3J0O1xuICAgIHJldHVybiB7XG4gICAgICAgIHg6IE1hdGgubWF4KDAsIE1hdGguZmxvb3Iodi5wYWdlWCkgfCAwKSxcbiAgICAgICAgeTogTWF0aC5tYXgoMCwgTWF0aC5mbG9vcih2LnBhZ2VZKSB8IDApLFxuICAgICAgICB3aWR0aDogTWF0aC5tYXgoMSwgTWF0aC5jZWlsKHYuY2xpZW50V2lkdGgpIHwgMCksXG4gICAgICAgIGhlaWdodDogTWF0aC5tYXgoMSwgTWF0aC5jZWlsKHYuY2xpZW50SGVpZ2h0KSB8IDApLFxuICAgIH07XG59XG4vKipcbiAqIFJlc29sdmVzIHNjcmVlbnNob3QgZ2VvbWV0cnkgZm9yIHRoZSBzZWxlY3RlZCBjYXB0dXJlIGFyZWEuXG4gKiBAcGFyYW0gdGFyZ2V0IC0gRGV2VG9vbHMgUHJvdG9jb2wgdGFyZ2V0IHRhYiAoYGNocm9tZS5kZWJ1Z2dlci5EZWJ1Z2dlZWApLlxuICogQHBhcmFtIGFyZWEgLSBDYXB0dXJlIGFyZWE6IGAnZnVsbCdgIChlbnRpcmUgcGFnZSkgb3IgYCd2aWV3cG9ydCdgICh2aXNpYmxlIGFyZWEpLlxuICogQHBhcmFtIHNjYWxlIC0gSW1hZ2Ugc2NhbGUgZmFjdG9yIGFwcGxpZWQgdG8gYGNsaXAuc2NhbGVgLlxuICogQHBhcmFtIGNvbnRlbnRTaXplIC0gTWVhc3VyZWQgcGFnZSBjb250ZW50IHNpemUgaW4gQ1NTIHBpeGVscyB1c2VkIHdoZW4gYGFyZWFgIGlzIGAnZnVsbCdgLlxuICogQHJldHVybnMgYENhcHR1cmVHZW9tZXRyeWAgZGVzY3JpYmluZyB3aGV0aGVyIGRldmljZSBtZXRyaWNzIG92ZXJyaWRlIGlzIHJlcXVpcmVkIGFuZCB0aGUgY2xpcCByZWN0YW5nbGUgZm9yIGBQYWdlLmNhcHR1cmVTY3JlZW5zaG90YC5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gcmVzb2x2ZUdlb21ldHJ5KHRhcmdldCwgYXJlYSwgc2NhbGUsIGNvbnRlbnRTaXplKSB7XG4gICAgaWYgKGFyZWEgPT09ICd2aWV3cG9ydCcpIHtcbiAgICAgICAgLy8gTm8gb3ZlcnJpZGUgcmVxdWlyZWQ6IENsaXAgdGhlIGN1cnJlbnQgZGlzcGxheSBhcmVhIHdpdGggY2xpcFxuICAgICAgICBjb25zdCB7IHgsIHksIHdpZHRoLCBoZWlnaHQgfSA9IGF3YWl0IGdldFZpZXdwb3J0Q3NzUmVjdCh0YXJnZXQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdXNlT3ZlcnJpZGU6IGZhbHNlLFxuICAgICAgICAgICAgY2xpcDogeyB4LCB5LCB3aWR0aCwgaGVpZ2h0LCBzY2FsZSB9LFxuICAgICAgICAgICAgY2FwdHVyZUJleW9uZFZpZXdwb3J0OiB0cnVlLFxuICAgICAgICAgICAgc2hvdWxkU2Nyb2xsVG9wOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY29uc3Qgd2lkdGggPSBNYXRoLm1heCgxLCBNYXRoLmNlaWwoY29udGVudFNpemUud2lkdGgpIHwgMCk7XG4gICAgY29uc3QgaGVpZ2h0ID0gTWF0aC5tYXgoMSwgTWF0aC5jZWlsKGNvbnRlbnRTaXplLmhlaWdodCkgfCAwKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB1c2VPdmVycmlkZTogdHJ1ZSxcbiAgICAgICAgbWV0cmljczoge1xuICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQsXG4gICAgICAgICAgICBkZXZpY2VTY2FsZUZhY3RvcjogMSxcbiAgICAgICAgICAgIG1vYmlsZTogZmFsc2UsXG4gICAgICAgICAgICBzY3JlZW5XaWR0aDogd2lkdGgsXG4gICAgICAgICAgICBzY3JlZW5IZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICAgIHBvc2l0aW9uWDogMCxcbiAgICAgICAgICAgIHBvc2l0aW9uWTogMCxcbiAgICAgICAgfSxcbiAgICAgICAgY2xpcDogeyB4OiAwLCB5OiAwLCB3aWR0aCwgaGVpZ2h0LCBzY2FsZSB9LFxuICAgICAgICBjYXB0dXJlQmV5b25kVmlld3BvcnQ6IHRydWUsXG4gICAgICAgIHNob3VsZFNjcm9sbFRvcDogdHJ1ZSxcbiAgICB9O1xufVxuLyoqXG4gKiBDYXB0dXJlIHNjcmVlbnNob3RzIGFuZCBzYXZlIHRoZW0gdmlhIHRoZSBkb3dubG9hZCBBUEkuXG4gKlxuICogQHBhcmFtIG9wdHMgLSBDYXB0dXJlIG9wdGlvbnMgKHRhYiBpZCwgZm9ybWF0LCBxdWFsaXR5LCBzY2FsZSwgZXRjLikuXG4gKiBAcmV0dXJucyBUaGUgYGRvd25sb2FkSWRgIHdoZW4gc2F2ZWQgc3VjY2Vzc2Z1bGx5OyBgdW5kZWZpbmVkYCB3aGVuIGNhcHR1cmUgaXMgc2tpcHBlZC5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNhcHR1cmUob3B0cykge1xuICAgIGNvbnN0IHRhYiA9IGF3YWl0IGNocm9tZS50YWJzLmdldChvcHRzLnRhYklkKTtcbiAgICBpZiAoIXRhYi5pZCB8fCBpc1Jlc3RyaWN0ZWQodGFiLnVybCkpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdDYXB0dXJpbmcgaXMgbm90IHBvc3NpYmxlIGR1ZSB0byByZXN0cmljdGVkIFVSTDonLCB0YWIudXJsKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB0YXJnZXQgPSB7IHRhYklkOiB0YWIuaWQgfTtcbiAgICBjb25zdCBmbXQgPSBvcHRzLmZvcm1hdCA/PyAncG5nJztcbiAgICBjb25zdCBzZXR0bGVNcyA9IG9wdHMuc2V0dGxlTXMgPz8gNTAwO1xuICAgIGNvbnN0IHNjYWxlID0gb3B0cy5zY2FsZSA/PyAxO1xuICAgIGNvbnN0IGFyZWEgPSBvcHRzLmFyZWEgPz8gJ2Z1bGwnO1xuICAgIGxldCBkaWRBdHRhY2ggPSBmYWxzZTtcbiAgICBsZXQgdXNlZE92ZXJyaWRlID0gZmFsc2U7XG4gICAgdHJ5IHtcbiAgICAgICAgZGlkQXR0YWNoID0gYXdhaXQgYXR0YWNoT3duZWQodGFyZ2V0KTtcbiAgICAgICAgYXdhaXQgc2VuZCh0YXJnZXQsICdQYWdlLmVuYWJsZScpO1xuICAgICAgICBpZiAob3B0cy5icmluZ1RvRnJvbnQgPz8gdHJ1ZSkge1xuICAgICAgICAgICAgYXdhaXQgc2VuZCh0YXJnZXQsICdQYWdlLmJyaW5nVG9Gcm9udCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGdlb20gPSBhd2FpdCByZXNvbHZlR2VvbWV0cnkodGFyZ2V0LCBhcmVhLCBzY2FsZSwgb3B0cy5jb250ZW50U2l6ZSk7XG4gICAgICAgIGlmIChnZW9tLnNob3VsZFNjcm9sbFRvcCkge1xuICAgICAgICAgICAgYXdhaXQgc2VuZCh0YXJnZXQsICdSdW50aW1lLmV2YWx1YXRlJywgeyBleHByZXNzaW9uOiAnd2luZG93LnNjcm9sbFRvKDAsMCknIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChnZW9tLnVzZU92ZXJyaWRlICYmIGdlb20ubWV0cmljcykge1xuICAgICAgICAgICAgdXNlZE92ZXJyaWRlID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vIFNjcm9sbCB0byB0b3AgJiB3YWl0IGJyaWVmbHkgZm9yIGxheW91dC9pbWFnZSBzdGFiaWxpemF0aW9uXG4gICAgICAgICAgICBhd2FpdCBzZW5kKHRhcmdldCwgJ0VtdWxhdGlvbi5zZXREZXZpY2VNZXRyaWNzT3ZlcnJpZGUnLCBnZW9tLm1ldHJpY3MpO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyKSA9PiBzZXRUaW1lb3V0KHIsIHNldHRsZU1zKSk7XG4gICAgICAgIGNvbnN0IGNhcFBhcmFtcyA9IHtcbiAgICAgICAgICAgIGZvcm1hdDogZm10LFxuICAgICAgICAgICAgZnJvbVN1cmZhY2U6IHRydWUsXG4gICAgICAgICAgICBjYXB0dXJlQmV5b25kVmlld3BvcnQ6IGdlb20uY2FwdHVyZUJleW9uZFZpZXdwb3J0LFxuICAgICAgICAgICAgY2xpcDogZ2VvbS5jbGlwLFxuICAgICAgICB9O1xuICAgICAgICBpZiAoZm10ID09PSAnanBlZycgJiYgdHlwZW9mIG9wdHMucXVhbGl0eSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGNhcFBhcmFtcy5xdWFsaXR5ID0gTWF0aC5taW4oMTAwLCBNYXRoLm1heCgwLCBNYXRoLnJvdW5kKG9wdHMucXVhbGl0eSkpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHNlbmQodGFyZ2V0LCAnUGFnZS5jYXB0dXJlU2NyZWVuc2hvdCcsIGNhcFBhcmFtcyk7XG4gICAgICAgIGNvbnN0IG1pbWUgPSBmbXQgPT09ICdwbmcnID8gJ2ltYWdlL3BuZycgOiAnaW1hZ2UvanBlZyc7XG4gICAgICAgIGNvbnN0IHVybCA9IGBkYXRhOiR7bWltZX07YmFzZTY0LCR7ZGF0YX1gO1xuICAgICAgICBjb25zdCBmaWxlbmFtZSA9IG9wdHMuZmlsZW5hbWUgPz8gbWFrZUZpbGVuYW1lKHRhYiwgZm10KTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IGNocm9tZS5kb3dubG9hZHMuZG93bmxvYWQoeyB1cmwsIGZpbGVuYW1lLCBzYXZlQXM6IGZhbHNlIH0pO1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgaWYgKHVzZWRPdmVycmlkZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCBzZW5kKHRhcmdldCwgJ0VtdWxhdGlvbi5jbGVhckRldmljZU1ldHJpY3NPdmVycmlkZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2gge1xuICAgICAgICAgICAgICAgIC8qIG5vLW9wICovXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpZEF0dGFjaCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCBkZXRhY2hPd25lZCh0YXJnZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2gge1xuICAgICAgICAgICAgICAgIC8qIG5vLW9wICovXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyB0aW1lc3RhbXAgfSBmcm9tICdAY29tbW9uL3V0aWxzJztcbi8qKlxuICogRXhwb3J0cyBhIHtAbGluayBTY3JlZW5TdGF0ZX0gYXMgYSBKU09OIGZpbGUgYW5kIHNhdmVzXG4gKlxuICogVGhlIEpTT04gcGF5bG9hZCBpbmNsdWRlcyBiYXNpYyBtZXRhZGF0YSAoZm9ybWF0L2tpbmQvdmVyc2lvbi9leHBvcnRlZEF0L3BhZ2VLZXkpXG4gKiBhbmQgdGhlIHN0YXRlJ3MgYGl0ZW1zYCBmb3IgZnV0dXJlIGNvbXBhdGliaWxpdHkgYW5kIGVhc3kgcmUtaW1wb3J0LlxuICpcbiAqIEBwYXJhbSBzdGF0ZSAtIFRoZSBzY3JlZW4gc3RhdGUgdG8gZXhwb3J0LlxuICogQHBhcmFtIHBhZ2VLZXkgLSBBIHBhZ2Uga2V5IHRvIGVtYmVkIGludG8gdGhlIGV4cG9ydGVkIG1ldGFkYXRhIGFuZCB0byBkZXJpdmUgdGhlIGZpbGVuYW1lLlxuICogQHBhcmFtIG9wdHMgLSBFeHBvcnQgb3B0aW9ucyAoZS5nLiwgYHNhdmVBc2AsIGBwcmVmaXhgKS5cbiAqIEByZXR1cm5zIEEgcHJvbWlzZSByZXNvbHZpbmcgdG8gdGhlIGRvd25sb2FkIElEIHJldHVybmVkIGJ5IGBjaHJvbWUuZG93bmxvYWRzLmRvd25sb2FkYC5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGV4cG9ydFNjcmVlblN0YXRlKHN0YXRlLCBwYWdlS2V5LCBvcHRzID0ge30pIHtcbiAgICBjb25zdCB7IHNhdmVBcyA9IGZhbHNlLCBwcmVmaXggPSAnc3BlY3NrZXRjaC1zY3JlZW4tc3RhdGUnIH0gPSBvcHRzO1xuICAgIC8vIE1ldGFkYXRhICsgcGF5bG9hZCAoa2VlcCB2ZXJzaW9uaW5nIGZvciBmb3J3YXJkIGNvbXBhdGliaWxpdHkpXG4gICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgICAgZm9ybWF0OiAnc3BlY3NrZXRjaC1leHBvcnQnLFxuICAgICAgICBraW5kOiAnc2NyZWVuLXN0YXRlJyxcbiAgICAgICAgdmVyc2lvbjogMSxcbiAgICAgICAgZXhwb3J0ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICBwYWdlS2V5LFxuICAgICAgICBpdGVtczogc3RhdGUuaXRlbXMsXG4gICAgfTtcbiAgICBjb25zdCBqc29uID0gSlNPTi5zdHJpbmdpZnkocGF5bG9hZCwgbnVsbCwgMik7XG4gICAgY29uc3QgYmFzZTY0ID0gdG9CYXNlNjRVdGY4KGpzb24pO1xuICAgIGNvbnN0IG1pbWUgPSAnYXBwbGljYXRpb24vanNvbic7XG4gICAgY29uc3QgdXJsID0gYGRhdGE6JHttaW1lfTtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwke2Jhc2U2NH1gO1xuICAgIGNvbnN0IGZpbGVuYW1lID0gbWFrZUZpbGVuYW1lKHByZWZpeCwgcGFnZUtleSwgJ2pzb24nKTtcbiAgICAvLyBTYXZlIHVzaW5nIHRoZSBzYW1lIEFQSSBwYXR0ZXJuIGFzIGltYWdlIGRvd25sb2FkXG4gICAgcmV0dXJuIGF3YWl0IGNocm9tZS5kb3dubG9hZHMuZG93bmxvYWQoeyB1cmwsIGZpbGVuYW1lLCBzYXZlQXMgfSk7XG59XG4vKipcbiAqIEVuY29kZXMgYSBVVEYtOCBzdHJpbmcgdG8gQmFzZTY0IGZvciB1c2UgaW4gYSBkYXRhIFVSTC5cbiAqXG4gKiBAcGFyYW0gdGV4dCAtIFRoZSBVVEYtOCB0ZXh0IHRvIGVuY29kZS5cbiAqIEByZXR1cm5zIEJhc2U2NCBzdHJpbmcgKG5vIGRhdGEgVVJMIHByZWZpeCkuXG4gKi9cbmZ1bmN0aW9uIHRvQmFzZTY0VXRmOCh0ZXh0KSB7XG4gICAgY29uc3QgYnl0ZXMgPSBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUodGV4dCk7IC8vIFVpbnQ4QXJyYXlcbiAgICBsZXQgYmluID0gJyc7XG4gICAgZm9yIChjb25zdCBiIG9mIGJ5dGVzKSB7XG4gICAgICAgIGJpbiArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGIpO1xuICAgIH1cbiAgICByZXR1cm4gYnRvYShiaW4pO1xufVxuLyoqXG4gKiBCdWlsZHMgYSBzYW5pdGl6ZWQgZmlsZW5hbWUgaW4gdGhlIGZvcm06XG4gKiBge3ByZWZpeH1fe3Nhbml0aXplZFBhZ2VLZXl9X3tZWVlZLU1NLUREX0hILW1tLXNzKzA5MDB9LntleHR9YFxuICpcbiAqIEBwYXJhbSBwcmVmaXggLSBGaWxlbmFtZSBwcmVmaXggKGUuZy4sIHByb2R1Y3Qgb3IgZmVhdHVyZSBuYW1lKS5cbiAqIEBwYXJhbSBwYWdlS2V5IC0gVGhlIG9yaWdpbmFsIHBhZ2Uga2V5IHN0cmluZyB0byBkZXJpdmUgYSBzYWZlIGZpbGVuYW1lIHBhcnQuXG4gKiBAcGFyYW0gZXh0IC0gRmlsZSBleHRlbnNpb24gd2l0aG91dCBkb3QgKGUuZy4sICdqc29uJykuXG4gKiBAcmV0dXJucyBBIHNhZmUgZmlsZW5hbWUgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBtYWtlRmlsZW5hbWUocHJlZml4LCBwYWdlS2V5LCBleHQpIHtcbiAgICBjb25zdCBzYWZlS2V5ID0gKHBhZ2VLZXkgPz8gJycpXG4gICAgICAgIC5yZXBsYWNlKC9odHRwcz86XFwvXFwvLywgJycpXG4gICAgICAgIC5yZXBsYWNlKC9bXmEtekEtWjAtOS5fLV0rL2csICctJylcbiAgICAgICAgLnJlcGxhY2UoLy0rL2csICctJylcbiAgICAgICAgLnJlcGxhY2UoL14tfC0kL2csICcnKVxuICAgICAgICAuc2xpY2UoMCwgMTIwKSB8fCAncGFnZSc7XG4gICAgcmV0dXJuIGAke3ByZWZpeH1fJHtzYWZlS2V5fV8ke3RpbWVzdGFtcCgpfS4ke2V4dH1gO1xufVxuIiwiaW1wb3J0IGkxOG4gZnJvbSAnQGNvbW1vbi9pMThuJztcbmltcG9ydCB7IGlzVmFsaWRQYXlsb2FkIH0gZnJvbSAnQGNvbW1vbi90eXBlcyc7XG5pbXBvcnQgeyBzb3J0U2NyZWVuSXRlbXNCeUdyb3VwQW5kTGFiZWwgfSBmcm9tICdAY29tbW9uL3V0aWxzJztcbmltcG9ydCB7IHNjcmVlblN0YXRlVGFibGUgfSBmcm9tICdAcGFuZWwvc3RvcmFnZS90YWJsZXMnO1xuaW1wb3J0IHsgYXBwbHlQYXRjaCB9IGZyb20gJy4vc3RhdGUnO1xuLyoqXG4gKiBJbXBvcnQgYSBTY3JlZW5TdGF0ZS1saWtlIEpTT04gZmlsZSBhbmQgbWVyZ2UgaXRzIGl0ZW1zIGludG8gdGhlIGN1cnJlbnQgcGFnZS5cbiAqXG4gKiAtIE9ubHkgYC5qc29uYCAoYnkgZXh0ZW5zaW9uKSBvciBgYXBwbGljYXRpb24vanNvbmAgLyBgdGV4dC9qc29uYCAoYnkgTUlNRSkgaXMgYWNjZXB0ZWQuXG4gKiAtIFBheWxvYWQgbXVzdCBtYXRjaCB0aGUgXCJzcGVjc2tldGNoLWV4cG9ydCAvIHNjcmVlbi1zdGF0ZVwiIGNvbnRyYWN0LlxuICogLSBJdGVtcyBhcmUgbWVyZ2VkIGJ5ICoqYW5jaG9yKiogaWRlbnRpdHk7IGFuIGltcG9ydGVkIGl0ZW0gaXMgc2tpcHBlZCBpZiBhbiBpdGVtIHdpdGggdGhlXG4gKiAgIHNhbWUgYW5jaG9yIGB7a2luZCwgdmVyc2lvbiwgdmFsdWV9YCBhbHJlYWR5IGV4aXN0cyBpbiB0aGUgY3VycmVudCBwYWdlLlxuICpcbiAqIEBwYXJhbSBmaWxlICAgICBBIHVzZXItc2VsZWN0ZWQgSlNPTiBmaWxlIHRoYXQgY29udGFpbnMgZXhwb3J0IHBheWxvYWQuXG4gKiBAcGFyYW0gcGFnZUtleSAgVGhlIHRhcmdldCBwYWdlIGtleSB0byBtZXJnZSBpbnRvLlxuICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHVwZGF0ZWQge0BsaW5rIFNjcmVlblN0YXRlfSBhbmQgYSBodW1hbi1yZWFkYWJsZSBzdWNjZXNzIG1lc3NhZ2UuXG4gKlxuICogQHRocm93cyBFcnJvciB3aXRoIGkxOG4gbWVzc2FnZSBgaW1wb3J0X2ZpbGVfbm90X2pzb25gXG4gKiAgICAgICAgIHdoZW4gdGhlIGZpbGUgaXMgbm90IHJlY29nbml6ZWQgYXMgSlNPTi5cbiAqIEB0aHJvd3MgRXJyb3Igd2l0aCBpMThuIG1lc3NhZ2UgYGltcG9ydF9wYXlsb2FkX2ludmFsaWRgXG4gKiAgICAgICAgIHdoZW4gdGhlIHBhcnNlZCBKU09OIGRvZXMgbm90IHNhdGlzZnkgdGhlIGV4cGVjdGVkIHBheWxvYWQgY29udHJhY3QuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbXBvcnRTY3JlYW5TdGF0ZShmaWxlLCBwYWdlS2V5KSB7XG4gICAgLy8gVmFsaWRhdGUgZmlsZSB0eXBlIGFzIEpTT04gYnkgZXh0ZW5zaW9uIG9yIE1JTUUgKGVtcHR5IE1JTUUgaXMgYWxsb3dlZCBvbiBzb21lIGJyb3dzZXJzKS5cbiAgICBjb25zdCBpc0pzb25CeUV4dCA9IC9cXC5qc29uJC9pLnRlc3QoZmlsZS5uYW1lKTtcbiAgICBjb25zdCBpc0pzb25CeU1pbWUgPSBmaWxlLnR5cGUgPT09ICdhcHBsaWNhdGlvbi9qc29uJyB8fCBmaWxlLnR5cGUgPT09ICd0ZXh0L2pzb24nIHx8IGZpbGUudHlwZSA9PT0gJyc7XG4gICAgaWYgKCFpc0pzb25CeUV4dCAmJiAhaXNKc29uQnlNaW1lKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihpMThuLmdldCgnaW1wb3J0X2ZpbGVfbm90X2pzb24nKSk7XG4gICAgfVxuICAgIC8vIFBhcnNlIEpTT04gdGV4dCDihpIgdmFsdWUuXG4gICAgbGV0IHBhcnNlZDtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCB0ZXh0ID0gYXdhaXQgZmlsZS50ZXh0KCk7XG4gICAgICAgIHBhcnNlZCA9IEpTT04ucGFyc2UodGV4dCk7XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgLy8gVHJlYXQgbWFsZm9ybWVkIEpTT04gdGhlIHNhbWUgYXMgcGF5bG9hZCBpbnZhbGlkLlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoaTE4bi5nZXQoJ2ltcG9ydF9wYXlsb2FkX2ludmFsaWQnKSk7XG4gICAgfVxuICAgIC8vIFZhbGlkYXRlIHBheWxvYWQgY29udHJhY3Q6IGZvcm1hdC9raW5kL3ZlcnNpb24vcGFnZUtleS9pdGVtcyAoaXRlbXMgbXVzdCBiZSBhcnJheS1saWtlIFNjcmVlbkl0ZW0pLlxuICAgIGlmICghaXNWYWxpZFBheWxvYWQocGFyc2VkKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoaTE4bi5nZXQoJ2ltcG9ydF9wYXlsb2FkX2ludmFsaWQnKSk7XG4gICAgfVxuICAgIGNvbnN0IHBheWxvYWQgPSBwYXJzZWQ7XG4gICAgY29uc3QgaXRlbXMgPSBzb3J0U2NyZWVuSXRlbXNCeUdyb3VwQW5kTGFiZWwocGF5bG9hZC5pdGVtcyk7XG4gICAgLy8gRmV0Y2ggY3VycmVudCBzdGF0ZSAoaWYgbWlzc2luZywgdHJlYXQgYXMgZW1wdHkgaXRlbXMgZm9yIGNvbXBhcmlzb24pLlxuICAgIGNvbnN0IHN0YXRlID0gYXdhaXQgc2NyZWVuU3RhdGVUYWJsZS5nZXQocGFnZUtleSk7XG4gICAgY29uc3QgZXhpc3RpbmcgPSBzdGF0ZT8uaXRlbXMgPz8gW107XG4gICAgLy8gQnVpbGQgYSBmYXN0IGxvb2t1cCBvZiBleGlzdGluZyBhbmNob3JzIChpZGVudGl0eSA9IGtpbmQ6dmVyc2lvbjp2YWx1ZSkuXG4gICAgY29uc3Qga2V5T2YgPSAoaXQpID0+IGAke2l0LmFuY2hvci5raW5kfToke2l0LmFuY2hvci52ZXJzaW9ufToke2l0LmFuY2hvci52YWx1ZX1gO1xuICAgIGNvbnN0IGV4aXN0aW5nU2V0ID0gbmV3IFNldChleGlzdGluZy5tYXAoa2V5T2YpKTtcbiAgICAvLyBDcmVhdGUgdGhlIG1pbmltYWwgcGF0Y2ggcGF5bG9hZCBmb3IgYGFwcGx5UGF0Y2hgIOKAlCBvbmx5IGZpZWxkcyBzdXBwb3J0ZWQgYnkgXCJhZGRlZFwiLlxuICAgIGNvbnN0IGFkZGVkID0gaXRlbXNcbiAgICAgICAgLmZpbHRlcigoaXQpID0+ICFleGlzdGluZ1NldC5oYXMoa2V5T2YoaXQpKSlcbiAgICAgICAgLm1hcCgoaXQpID0+ICh7XG4gICAgICAgIGFuY2hvcjogaXQuYW5jaG9yLFxuICAgICAgICBzaXplOiBpdC5zaXplLFxuICAgICAgICBjb2xvcjogaXQuY29sb3IsXG4gICAgICAgIHNoYXBlOiBpdC5zaGFwZSxcbiAgICAgICAgcG9zaXRpb246IGl0LnBvc2l0aW9uLFxuICAgICAgICBncm91cDogaXQuZ3JvdXAsXG4gICAgICAgIGNvbW1lbnQ6IGl0LmNvbW1lbnQsXG4gICAgfSkpO1xuICAgIGNvbnN0IG5ld1N0YXRlID0gYXdhaXQgYXBwbHlQYXRjaChwYWdlS2V5LCB7IGFkZGVkIH0pO1xuICAgIGNvbnN0IHN1Y2Nlc3NNZXNzYWdlID0gaTE4bi5nZXQoJ2ltcG9ydF9zdWNjZWVkZWRfd2l0aF9jb3VudCcsIFtTdHJpbmcoYWRkZWQubGVuZ3RoKV0pO1xuICAgIHJldHVybiB7IHN0YXRlOiBuZXdTdGF0ZSwgc3VjY2Vzc01lc3NhZ2UgfTtcbn1cbiIsIi8qKlxuICogVUlFdmVudFR5cGUgLyBVSUV2ZW50UGF5bG9hZE1hcFxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEEgdHlwZWQgY2F0YWxvZyBvZiAqcHVyZSBVSSBldmVudHMqIGVtaXR0ZWQgYnkgdGhlIFZpZXcgKHBhbmVsX3ZpZXcudHMpLlxuICogLSBUaGUgVmlldyByZWFkcyBET00gc3RhdGUsIG5vcm1hbGl6ZXMgaXQsIGFuZCBlbWl0cyBvbmUgb2YgdGhlc2UgZXZlbnRzLlxuICogLSBUaGUgQ29udHJvbGxlciBtYXBzIGVhY2ggVUkgZXZlbnQgdG8gYW4gQWN0aW9uVHlwZSBhbmQgZGlzcGF0Y2hlcyBpdC5cbiAqIC0gUGF5bG9hZHMgYXJlIHN0cm9uZ2x5IHR5cGVkIHZpYSBVSUV2ZW50UGF5bG9hZE1hcDsgdXNlIGB1bmRlZmluZWRgIGZvciBubyBwYXlsb2FkLlxuICovXG5leHBvcnQgdmFyIFVJRXZlbnRUeXBlO1xuKGZ1bmN0aW9uIChVSUV2ZW50VHlwZSkge1xuICAgIC8qKiBUb2dnbGUgc2VsZWN0aW9uIG1vZGUgKi9cbiAgICBVSUV2ZW50VHlwZVtcIlRPR0dMRV9TRUxFQ1RcIl0gPSBcIlRPR0dMRV9TRUxFQ1RcIjtcbiAgICAvKiogQ2xlYXIgYWxsIHNlbGVjdGlvbnMgKi9cbiAgICBVSUV2ZW50VHlwZVtcIkNMRUFSXCJdID0gXCJDTEVBUlwiO1xuICAgIC8qKiBUcmlnZ2VyIHBhZ2UgY2FwdHVyZSAqL1xuICAgIFVJRXZlbnRUeXBlW1wiQ0FQVFVSRVwiXSA9IFwiQ0FQVFVSRVwiO1xuICAgIC8qKiBCYWRnZSBzaXplIGNoYW5nZWQgKHJhbmdlL251bWJlciBpbnB1dHMpICovXG4gICAgVUlFdmVudFR5cGVbXCJCQURHRV9TSVpFX0NIQU5HRVwiXSA9IFwiQkFER0VfU0laRV9DSEFOR0VcIjtcbiAgICAvKiogQmFkZ2UgY29sb3IgcGlja2VkIChwb3BvdmVyIGJ1dHRvbnMpICovXG4gICAgVUlFdmVudFR5cGVbXCJCQURHRV9DT0xPUl9TRUxFQ1RcIl0gPSBcIkJBREdFX0NPTE9SX1NFTEVDVFwiO1xuICAgIC8qKiBCYWRnZSBzaGFwZSBjaGFuZ2VkIChzZWxlY3QpICovXG4gICAgVUlFdmVudFR5cGVbXCJCQURHRV9TSEFQRV9DSEFOR0VcIl0gPSBcIkJBREdFX1NIQVBFX0NIQU5HRVwiO1xuICAgIC8qKiBCYWRnZSBsYWJlbCBmb3JtYXQgY2hhbmdlZCAoc2VsZWN0KSAqL1xuICAgIFVJRXZlbnRUeXBlW1wiQkFER0VfTEFCRUxfRk9STUFUX0NIQU5HRVwiXSA9IFwiQkFER0VfTEFCRUxfRk9STUFUX0NIQU5HRVwiO1xuICAgIC8qKiBCYWRnZSB2aXNpYmxlIGZvcm1hdCBjaGFuZ2VkIChzZWxlY3QpICovXG4gICAgVUlFdmVudFR5cGVbXCJCQURHRV9WSVNJQkxFX0NIQU5HRVwiXSA9IFwiQkFER0VfVklTSUJMRV9DSEFOR0VcIjtcbiAgICAvKiogRGVsZXRlIHRoZSBzZWxlY3RlZCBiYWRnZSAqL1xuICAgIFVJRXZlbnRUeXBlW1wiQkFER0VfREVMRVRFXCJdID0gXCJCQURHRV9ERUxFVEVcIjtcbiAgICAvKiogQmFkZ2UgcG9zaXRpb24gcGlja2VkIChwb3BvdmVyIGJ1dHRvbnMpICovXG4gICAgVUlFdmVudFR5cGVbXCJCQURHRV9QT1NJVElPTl9TRUxFQ1RcIl0gPSBcIkJBREdFX1BPU0lUSU9OX1NFTEVDVFwiO1xuICAgIC8qKiBVcGRhdGUgYSBncm91cCBvZiBlbGVtZW50cyAqL1xuICAgIFVJRXZlbnRUeXBlW1wiU0VUX0dST1VQXCJdID0gXCJTRVRfR1JPVVBcIjtcbiAgICAvKiogQ2FwdHVyZSBmb3JtYXQgY2hhbmdlZCAocmFkaW8pICovXG4gICAgVUlFdmVudFR5cGVbXCJDQVBUVVJFX0ZPUk1BVF9DSEFOR0VcIl0gPSBcIkNBUFRVUkVfRk9STUFUX0NIQU5HRVwiO1xuICAgIC8qKiBDYXB0dXJlIGFyZWEgY2hhbmdlZCAocmFkaW8pICovXG4gICAgVUlFdmVudFR5cGVbXCJDQVBUVVJFX0FSRUFfQ0hBTkdFXCJdID0gXCJDQVBUVVJFX0FSRUFfQ0hBTkdFXCI7XG4gICAgLyoqIEpQRUcgcXVhbGl0eSBjaGFuZ2VkIChyYW5nZS9udW1iZXIpICovXG4gICAgVUlFdmVudFR5cGVbXCJDQVBUVVJFX1FVQUxJVFlfQ0hBTkdFXCJdID0gXCJDQVBUVVJFX1FVQUxJVFlfQ0hBTkdFXCI7XG4gICAgLyoqIENhcHR1cmUgc2NhbGUgY2hhbmdlZCAocmFuZ2UvbnVtYmVyKSAqL1xuICAgIFVJRXZlbnRUeXBlW1wiQ0FQVFVSRV9TQ0FMRV9DSEFOR0VcIl0gPSBcIkNBUFRVUkVfU0NBTEVfQ0hBTkdFXCI7XG4gICAgLyoqIFRvZ2dsZSBjYXB0dXJlIG9wdGlvbnMgZHJvcGRvd24gKGV4cGFuZC9jb2xsYXBzZSkgKi9cbiAgICBVSUV2ZW50VHlwZVtcIlRPR0dMRV9DQVBUVVJFX1BBTkVMXCJdID0gXCJUT0dHTEVfQ0FQVFVSRV9QQU5FTFwiO1xuICAgIC8qKiBSZW9yZGVyaW5nIHNlbGVjdGVkIGl0ZW1zIChkcmFnIGFuZCBkcm9wKSAqL1xuICAgIFVJRXZlbnRUeXBlW1wiUkVPUkRFUl9JVEVNU1wiXSA9IFwiUkVPUkRFUl9JVEVNU1wiO1xuICAgIC8qKiBFbWl0dGVkIHdoZW4gYW4gaXRlbSdzIGVkaXQtc2VsZWN0aW9uIGNoZWNrYm94IGNoYW5nZXMgc3RhdGUgKi9cbiAgICBVSUV2ZW50VHlwZVtcIklURU1fU0VMRUNUSU9OX0NIQU5HRURcIl0gPSBcIklURU1fU0VMRUNUSU9OX0NIQU5HRURcIjtcbiAgICAvKiogU3RhcnQgaXRlbSBob3ZlciAqL1xuICAgIFVJRXZlbnRUeXBlW1wiSVRFTV9IT1ZFUl9JTlwiXSA9IFwiSVRFTV9IT1ZFUl9JTlwiO1xuICAgIC8qKiBFbmQgaXRlbSBob3ZlciAqL1xuICAgIFVJRXZlbnRUeXBlW1wiSVRFTV9IT1ZFUl9PVVRcIl0gPSBcIklURU1fSE9WRVJfT1VUXCI7XG4gICAgLyoqIEFwcGx5IHBlbmRpbmcgY29tbWVudCBlZGl0cyB0byB0aGUgc2VsZWN0ZWQgaXRlbSAqL1xuICAgIFVJRXZlbnRUeXBlW1wiSVRFTV9DT01NRU5UX0FQUExZXCJdID0gXCJJVEVNX0NPTU1FTlRfQVBQTFlcIjtcbiAgICAvKiogVXBkYXRlIHRoZSBVSSB0aGVtZSAqL1xuICAgIFVJRXZlbnRUeXBlW1wiVVBEQVRFX1RIRU1FXCJdID0gXCJVUERBVEVfVEhFTUVcIjtcbiAgICAvKiogRW1pdHRlZCBhZnRlciB0aGUgU2V0dGluZ3MgbW9kYWwgaXMgc2hvdyAqL1xuICAgIFVJRXZlbnRUeXBlW1wiU0VUVElOR19NT0RBTF9TSE9XXCJdID0gXCJTRVRUSU5HX01PREFMX1NIT1dcIjtcbiAgICAvKiogSW1wb3J0IGEgU2NyZWVuU3RhdGUgZnJvbSBhIHNlbGVjdGVkIEpTT04gZmlsZSAqL1xuICAgIFVJRXZlbnRUeXBlW1wiSU1QT1JUX1NDUkVBTl9TVEFURV9GSUxFXCJdID0gXCJJTVBPUlRfU0NSRUFOX1NUQVRFX0ZJTEVcIjtcbiAgICAvKiogRGlzbWlzcyBhIHRvYXN0IGJ5IFVVSUQgKi9cbiAgICBVSUV2ZW50VHlwZVtcIlRPQVNUX0RJU01JU1NfUkVRVUVTVEVEXCJdID0gXCJUT0FTVF9ESVNNSVNTX1JFUVVFU1RFRFwiO1xuICAgIC8qKiBDbGljayB0byByZW1vdmUgdGhlIHNhdmVkIHBhZ2UgKi9cbiAgICBVSUV2ZW50VHlwZVtcIlJFTU9WRV9QQUdFX0NMSUNLXCJdID0gXCJSRU1PVkVfUEFHRV9DTElDS1wiO1xuICAgIC8qKiBDbGljayB0aGUgZXhwb3J0IGJ1dHRvbiAqL1xuICAgIFVJRXZlbnRUeXBlW1wiRVhQT1JUX1BBR0VfQ0xJQ0tcIl0gPSBcIkVYUE9SVF9QQUdFX0NMSUNLXCI7XG59KShVSUV2ZW50VHlwZSB8fCAoVUlFdmVudFR5cGUgPSB7fSkpO1xuIiwiaW1wb3J0IHsgTVNHX1RZUEUgfSBmcm9tICdAY29tbW9uL21lc3NhZ2VzJztcbmltcG9ydCB7IGlzUmVzdHJpY3RlZCwgcGFnZUtleSB9IGZyb20gJ0Bjb21tb24vdXJsJztcbmltcG9ydCB7IGdldEFjdGl2ZVRhYiB9IGZyb20gJ0BpbmZyYS9jaHJvbWUvdGFicyc7XG5pbXBvcnQgeyBpbml0aWFsTW9kZWwgfSBmcm9tICdAcGFuZWwvYXBwL21vZGVsJztcbmltcG9ydCB7IHVwZGF0ZSB9IGZyb20gJ0BwYW5lbC9hcHAvdXBkYXRlJztcbmltcG9ydCB7IGNvbm5lY3RUb1RhYiB9IGZyb20gJ0BwYW5lbC9tZXNzYWdpbmcvY29ubmVjdGlvbic7XG5pbXBvcnQgeyBjYXB0dXJlIH0gZnJvbSAnQHBhbmVsL3NlcnZpY2VzL2NhcHR1cmUnO1xuaW1wb3J0IHsgZXhwb3J0U2NyZWVuU3RhdGUgfSBmcm9tICdAcGFuZWwvc2VydmljZXMvZXhwb3J0JztcbmltcG9ydCB7IGltcG9ydFNjcmVhblN0YXRlIH0gZnJvbSAnQHBhbmVsL3NlcnZpY2VzL2ltcG9ydCc7XG5pbXBvcnQgeyBoYW5kbGVTZWxlY3RlZCB9IGZyb20gJ0BwYW5lbC9zZXJ2aWNlcy9zdGF0ZSc7XG5pbXBvcnQgeyBzY3JlZW5TdGF0ZVRhYmxlLCB0aGVtZVRhYmxlIH0gZnJvbSAnQHBhbmVsL3N0b3JhZ2UvdGFibGVzJztcbmltcG9ydCB7IEFjdGlvblR5cGUgfSBmcm9tICdAcGFuZWwvdHlwZXMvYWN0aW9uX3R5cGVzJztcbmltcG9ydCB7IEVmZmVjdFR5cGUgfSBmcm9tICdAcGFuZWwvdHlwZXMvZWZmZWN0X3R5cGVzJztcbmltcG9ydCB7IFNUQVRVUyB9IGZyb20gJ0BwYW5lbC90eXBlcy9zdGF0dXMnO1xuaW1wb3J0IHsgVUlFdmVudFR5cGUgfSBmcm9tICdAcGFuZWwvdHlwZXMvdWlfZXZlbnRfdHlwZXMnO1xuZXhwb3J0IGNsYXNzIFBhbmVsQ29udHJvbGxlciB7XG4gICAgdmlldztcbiAgICBtb2RlbCA9IHN0cnVjdHVyZWRDbG9uZShpbml0aWFsTW9kZWwpO1xuICAgIGNvbm4gPSBudWxsO1xuICAgIGN1cnJlbnRXaW5kb3dJZCA9IG51bGw7XG4gICAgc3RhdGljIFJFUVVJUkVTX0NPTk4gPSBuZXcgU2V0KFtcbiAgICAgICAgRWZmZWN0VHlwZS5SRU5ERVJfQ09OVEVOVCxcbiAgICAgICAgRWZmZWN0VHlwZS5UT0dHTEVfU0VMRUNUX09OX0NPTlRFTlQsXG4gICAgICAgIEVmZmVjdFR5cGUuQ0xFQVJfQ09OVEVOVCxcbiAgICAgICAgRWZmZWN0VHlwZS5IT1ZFUixcbiAgICBdKTtcbiAgICBjb25zdHJ1Y3Rvcih2aWV3KSB7XG4gICAgICAgIHRoaXMudmlldyA9IHZpZXc7XG4gICAgfVxuICAgIGFzeW5jIHN0YXJ0KCkge1xuICAgICAgICB0aGlzLmRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZS5JTklUIH0pO1xuICAgICAgICBjb25zdCB7IG9rIH0gPSBhd2FpdCB0aGlzLmVuc3VyZUNvbm5lY3Rpb25BbGl2ZSh7IGZvcmNlUmVjb25uZWN0OiB0cnVlIH0pO1xuICAgICAgICBpZiAoIW9rKSB7XG4gICAgICAgICAgICB0aGlzLnZpZXcucmVuZGVyKHRoaXMubW9kZWwpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVnaXN0ZXJWaWV3SGFuZGxlcnMoKTtcbiAgICAgICAgdGhpcy52aWV3LnJlbmRlcih0aGlzLm1vZGVsKTtcbiAgICAgICAgY29uc3QgdyA9IGF3YWl0IGNocm9tZS53aW5kb3dzLmdldEN1cnJlbnQoKTtcbiAgICAgICAgdGhpcy5jdXJyZW50V2luZG93SWQgPSB3LmlkID8/IG51bGw7XG4gICAgICAgIGNocm9tZS5ydW50aW1lLm9uTWVzc2FnZS5hZGRMaXN0ZW5lcigobXNnKSA9PiB7XG4gICAgICAgICAgICBpZiAobXNnLnR5cGUgIT09IE1TR19UWVBFLkFDVElWRV9UQUJfQ0hBTkdFRClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjb25zdCBzZW5kZXJXaW5kb3dJZCA9IG1zZy5wYXlsb2FkLndpbmRvd0lkO1xuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudFdpbmRvd0lkID09IG51bGwgfHwgdGhpcy5jdXJyZW50V2luZG93SWQgIT09IHNlbmRlcldpbmRvd0lkKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHZvaWQgdGhpcy5lbnN1cmVDb25uZWN0aW9uQWxpdmUoeyBmb3JjZVJlY29ubmVjdDogdHJ1ZSB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlZ2lzdGVyVmlld0hhbmRsZXJzKCkge1xuICAgICAgICB0aGlzLnZpZXcub24oVUlFdmVudFR5cGUuVE9HR0xFX1NFTEVDVCwgKCkgPT4gdGhpcy5kaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGUuVE9HR0xFX1NFTEVDVCB9KSk7XG4gICAgICAgIHRoaXMudmlldy5vbihVSUV2ZW50VHlwZS5DTEVBUiwgKCkgPT4gdGhpcy5kaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGUuQ0xFQVJfQUxMIH0pKTtcbiAgICAgICAgdGhpcy52aWV3Lm9uKFVJRXZlbnRUeXBlLkNBUFRVUkUsICgpID0+IHRoaXMuZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlLk1FQVNVUkVfQ09OVEVOVF9TSVpFIH0pKTtcbiAgICAgICAgdGhpcy52aWV3Lm9uKFVJRXZlbnRUeXBlLkJBREdFX1NJWkVfQ0hBTkdFLCAoeyBzaXplIH0pID0+IHRoaXMuZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlLlNFVF9CQURHRV9TSVpFLCBzaXplIH0pKTtcbiAgICAgICAgdGhpcy52aWV3Lm9uKFVJRXZlbnRUeXBlLkJBREdFX0NPTE9SX1NFTEVDVCwgKHsgY29sb3IgfSkgPT4gdGhpcy5kaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGUuU0VUX0JBREdFX0NPTE9SLCBjb2xvciB9KSk7XG4gICAgICAgIHRoaXMudmlldy5vbihVSUV2ZW50VHlwZS5CQURHRV9TSEFQRV9DSEFOR0UsICh7IHNoYXBlIH0pID0+IHRoaXMuZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlLlNFVF9CQURHRV9TSEFQRSwgc2hhcGUgfSkpO1xuICAgICAgICB0aGlzLnZpZXcub24oVUlFdmVudFR5cGUuQkFER0VfTEFCRUxfRk9STUFUX0NIQU5HRSwgKHsgbGFiZWxGb3JtYXQgfSkgPT4gdGhpcy5kaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGUuU0VUX0JBREdFX0xBQkVMX0ZPUk1BVCwgbGFiZWxGb3JtYXQgfSkpO1xuICAgICAgICB0aGlzLnZpZXcub24oVUlFdmVudFR5cGUuQkFER0VfVklTSUJMRV9DSEFOR0UsICh7IHZpc2libGUgfSkgPT4gdGhpcy5kaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGUuU0VUX0JBREdFX1ZJU0lCTEUsIHZpc2libGUgfSkpO1xuICAgICAgICB0aGlzLnZpZXcub24oVUlFdmVudFR5cGUuQkFER0VfREVMRVRFLCAoKSA9PiB0aGlzLmRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZS5CQURHRV9ERUxFVEUgfSkpO1xuICAgICAgICB0aGlzLnZpZXcub24oVUlFdmVudFR5cGUuQkFER0VfUE9TSVRJT05fU0VMRUNULCAoeyBwb3NpdGlvbiB9KSA9PiB0aGlzLmRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZS5TRVRfQkFER0VfUE9TSVRJT04sIHBvc2l0aW9uIH0pKTtcbiAgICAgICAgdGhpcy52aWV3Lm9uKFVJRXZlbnRUeXBlLlRPR0dMRV9DQVBUVVJFX1BBTkVMLCAoKSA9PiB0aGlzLmRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZS5UT0dHTEVfQ0FQVFVSRV9QQU5FTCB9KSk7XG4gICAgICAgIHRoaXMudmlldy5vbihVSUV2ZW50VHlwZS5DQVBUVVJFX0ZPUk1BVF9DSEFOR0UsICh7IGZvcm1hdCB9KSA9PiB0aGlzLmRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZS5TRVRfQ0FQVFVSRV9GT1JNQVQsIGZvcm1hdCB9KSk7XG4gICAgICAgIHRoaXMudmlldy5vbihVSUV2ZW50VHlwZS5DQVBUVVJFX0FSRUFfQ0hBTkdFLCAoeyBhcmVhIH0pID0+IHRoaXMuZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlLlNFVF9DQVBUVVJFX0FSRUEsIGFyZWEgfSkpO1xuICAgICAgICB0aGlzLnZpZXcub24oVUlFdmVudFR5cGUuQ0FQVFVSRV9RVUFMSVRZX0NIQU5HRSwgKHsgcXVhbGl0eSB9KSA9PiB0aGlzLmRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZS5TRVRfQ0FQVFVSRV9RVUFMSVRZLCBxdWFsaXR5IH0pKTtcbiAgICAgICAgdGhpcy52aWV3Lm9uKFVJRXZlbnRUeXBlLkNBUFRVUkVfU0NBTEVfQ0hBTkdFLCAoeyBzY2FsZSB9KSA9PiB0aGlzLmRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZS5TRVRfQ0FQVFVSRV9TQ0FMRSwgc2NhbGUgfSkpO1xuICAgICAgICB0aGlzLnZpZXcub24oVUlFdmVudFR5cGUuUkVPUkRFUl9JVEVNUywgKHsgZnJvbUlkLCBmcm9tSW5kZXgsIHRvSW5kZXggfSkgPT4gdGhpcy5kaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGUuUkVPUkRFUl9JVEVNUywgZnJvbUlkLCBmcm9tSW5kZXgsIHRvSW5kZXggfSkpO1xuICAgICAgICB0aGlzLnZpZXcub24oVUlFdmVudFR5cGUuU0VUX0dST1VQLCAoeyBncm91cCB9KSA9PiB0aGlzLmRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZS5TRVRfR1JPVVAsIGdyb3VwIH0pKTtcbiAgICAgICAgdGhpcy52aWV3Lm9uKFVJRXZlbnRUeXBlLklURU1fU0VMRUNUSU9OX0NIQU5HRUQsIChwYXlsb2FkKSA9PiB0aGlzLmRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZS5JVEVNX1NFTEVDVElPTl9DSEFOR0VELCAuLi5wYXlsb2FkIH0pKTtcbiAgICAgICAgdGhpcy52aWV3Lm9uKFVJRXZlbnRUeXBlLklURU1fSE9WRVJfSU4sICh7IGlkIH0pID0+IHRoaXMuZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlLklURU1fSE9WRVJfSU4sIGlkIH0pKTtcbiAgICAgICAgdGhpcy52aWV3Lm9uKFVJRXZlbnRUeXBlLklURU1fSE9WRVJfT1VULCAoKSA9PiB0aGlzLmRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZS5JVEVNX0hPVkVSX09VVCB9KSk7XG4gICAgICAgIHRoaXMudmlldy5vbihVSUV2ZW50VHlwZS5JVEVNX0NPTU1FTlRfQVBQTFksICh7IGlkLCBjb21tZW50IH0pID0+IHRoaXMuZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlLlVQREFURV9JVEVNX0NPTU1FTlQsIGlkLCBjb21tZW50IH0pKTtcbiAgICAgICAgdGhpcy52aWV3Lm9uKFVJRXZlbnRUeXBlLlVQREFURV9USEVNRSwgKHsgdGhlbWUgfSkgPT4gdGhpcy5kaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGUuVVBEQVRFX1RIRU1FLCB0aGVtZSB9KSk7XG4gICAgICAgIHRoaXMudmlldy5vbihVSUV2ZW50VHlwZS5TRVRUSU5HX01PREFMX1NIT1csICgpID0+IHRoaXMuZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlLlNUT1JFX1JFTE9BRF9SRVFVRVNURUQgfSkpO1xuICAgICAgICB0aGlzLnZpZXcub24oVUlFdmVudFR5cGUuSU1QT1JUX1NDUkVBTl9TVEFURV9GSUxFLCAoeyBmaWxlIH0pID0+IHRoaXMuZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlLklNUE9SVF9TQ1JFQU5fU1RBVEVfRklMRSwgZmlsZSB9KSk7XG4gICAgICAgIHRoaXMudmlldy5vbihVSUV2ZW50VHlwZS5UT0FTVF9ESVNNSVNTX1JFUVVFU1RFRCwgKHsgdXVpZCB9KSA9PiB0aGlzLmRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZS5UT0FTVF9ESVNNSVNTX1JFUVVFU1RFRCwgdXVpZCB9KSk7XG4gICAgICAgIHRoaXMudmlldy5vbihVSUV2ZW50VHlwZS5SRU1PVkVfUEFHRV9DTElDSywgKHsgcGFnZUtleSB9KSA9PiB0aGlzLmRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZS5SRU1PVkVfU0NSRUVOX1NUQVRFX0JZX1BBR0UsIHBhZ2VLZXkgfSkpO1xuICAgICAgICB0aGlzLnZpZXcub24oVUlFdmVudFR5cGUuRVhQT1JUX1BBR0VfQ0xJQ0ssICh7IHBhZ2VLZXkgfSkgPT4gdGhpcy5kaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGUuRVhQT1JUX1NDUkVFTl9TVEFURV9CWV9QQUdFLCBwYWdlS2V5IH0pKTtcbiAgICB9XG4gICAgZGlzcGF0Y2goYWN0aW9uKSB7XG4gICAgICAgIGNvbnN0IHsgbW9kZWw6IG5leHQsIGVmZmVjdHMgfSA9IHVwZGF0ZSh0aGlzLm1vZGVsLCBhY3Rpb24pO1xuICAgICAgICB0aGlzLm1vZGVsID0gbmV4dDtcbiAgICAgICAgdGhpcy52aWV3LnJlbmRlcih0aGlzLm1vZGVsKTtcbiAgICAgICAgdm9pZCB0aGlzLmV4ZWNFZmZlY3RzKGVmZmVjdHMpLmNhdGNoKGNvbnNvbGUuZXJyb3IpO1xuICAgIH1cbiAgICBhc3luYyBleGVjRWZmZWN0cyhlZmZlY3RzKSB7XG4gICAgICAgIGNvbnN0IG5lZWRzQ29ubiA9IGVmZmVjdHMuc29tZSgoZngpID0+IFBhbmVsQ29udHJvbGxlci5SRVFVSVJFU19DT05OLmhhcyhmeC5raW5kKSk7XG4gICAgICAgIGlmIChuZWVkc0Nvbm4pIHtcbiAgICAgICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLmVuc3VyZUNvbm5lY3Rpb25BbGl2ZSgpO1xuICAgICAgICAgICAgaWYgKCFyLm9rIHx8IHIuY29udGV4dENoYW5nZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgZnggb2YgZWZmZWN0cykge1xuICAgICAgICAgICAgc3dpdGNoIChmeC5raW5kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBFZmZlY3RUeXBlLlJFTkRFUl9DT05URU5UOlxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmNvbm4/LmFwaS5yZW5kZXIoZnguaXRlbXMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEVmZmVjdFR5cGUuVE9HR0xFX1NFTEVDVF9PTl9DT05URU5UOlxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmNvbm4/LmFwaS50b2dnbGVTZWxlY3QoZnguZW5hYmxlZCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgRWZmZWN0VHlwZS5DTEVBUl9DT05URU5UOlxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmNvbm4/LmFwaS5jbGVhcigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEVmZmVjdFR5cGUuSE9WRVI6XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY29ubj8uYXBpLmhvdmVyKGZ4LmlkKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBFZmZlY3RUeXBlLkNMRUFSX1NUQVRFOlxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBzY3JlZW5TdGF0ZVRhYmxlLnNldCh0aGlzLm1vZGVsLnBhZ2VLZXksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiB0aGlzLm1vZGVsLml0ZW1zLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dElkOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFNpemU6IHRoaXMubW9kZWwuZGVmYXVsdFNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0Q29sb3I6IHRoaXMubW9kZWwuZGVmYXVsdENvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFNoYXBlOiB0aGlzLm1vZGVsLmRlZmF1bHRTaGFwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRMYWJlbEZvcm1hdDogdGhpcy5tb2RlbC5kZWZhdWx0TGFiZWxGb3JtYXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VmlzaWJsZTogdGhpcy5tb2RlbC5kZWZhdWx0VmlzaWJsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRQb3NpdGlvbjogdGhpcy5tb2RlbC5kZWZhdWx0UG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0R3JvdXA6IHRoaXMubW9kZWwuZGVmYXVsdEdyb3VwLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBFZmZlY3RUeXBlLlBFUlNJU1RfU1RBVEU6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldiA9IGF3YWl0IHNjcmVlblN0YXRlVGFibGUuZ2V0KHRoaXMubW9kZWwucGFnZUtleSk7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHNjcmVlblN0YXRlVGFibGUuc2V0KHRoaXMubW9kZWwucGFnZUtleSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4ucHJldixcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiB0aGlzLm1vZGVsLml0ZW1zLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFNpemU6IHRoaXMubW9kZWwuZGVmYXVsdFNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0Q29sb3I6IHRoaXMubW9kZWwuZGVmYXVsdENvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFNoYXBlOiB0aGlzLm1vZGVsLmRlZmF1bHRTaGFwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRMYWJlbEZvcm1hdDogdGhpcy5tb2RlbC5kZWZhdWx0TGFiZWxGb3JtYXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VmlzaWJsZTogdGhpcy5tb2RlbC5kZWZhdWx0VmlzaWJsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRQb3NpdGlvbjogdGhpcy5tb2RlbC5kZWZhdWx0UG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0R3JvdXA6IHRoaXMubW9kZWwuZGVmYXVsdEdyb3VwLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgRWZmZWN0VHlwZS5TRVRfVEhFTUU6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGhlbWUgPSBhd2FpdCB0aGVtZVRhYmxlLmdldCgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZS5TRVRfVEhFTUUsIHRoZW1lIH0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBFZmZlY3RUeXBlLlVQREFURV9USEVNRTpcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhlbWVUYWJsZS5zZXQoZngudGhlbWUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEVmZmVjdFR5cGUuUkVBRF9TQ1JFRU5fU1RBVEVfU1RPUkU6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2NyZWVuU3RhdGVzID0gYXdhaXQgc2NyZWVuU3RhdGVUYWJsZS5yZWFkQWxsKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhZ2VLZXlzID0gT2JqZWN0LmtleXMoc2NyZWVuU3RhdGVzKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBBY3Rpb25UeXBlLlNUT1JFX1JFTE9BRF9TVUNDRUVERUQsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlS2V5cyxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIEVmZmVjdFR5cGUuSU1QT1JUX1NDUkVBTl9TVEFURV9GSUxFOiB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHN0YXRlLCBzdWNjZXNzTWVzc2FnZSB9ID0gYXdhaXQgaW1wb3J0U2NyZWFuU3RhdGUoZnguZmlsZSwgdGhpcy5tb2RlbC5wYWdlS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IEFjdGlvblR5cGUuUkVTVE9SRV9TVEFURSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogc3RhdGUuaXRlbXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRTaXplOiBzdGF0ZS5kZWZhdWx0U2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdENvbG9yOiBzdGF0ZS5kZWZhdWx0Q29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRTaGFwZTogc3RhdGUuZGVmYXVsdFNoYXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0TGFiZWxGb3JtYXQ6IHN0YXRlLmRlZmF1bHRMYWJlbEZvcm1hdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZpc2libGU6IHN0YXRlLmRlZmF1bHRWaXNpYmxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UG9zaXRpb246IHN0YXRlLmRlZmF1bHRQb3NpdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdEdyb3VwOiBzdGF0ZS5kZWZhdWx0R3JvdXAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dWlkOiBjcnlwdG8ucmFuZG9tVVVJRCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHN1Y2Nlc3NNZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtpbmQ6ICdzdWNjZXNzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBBY3Rpb25UeXBlLklNUE9SVF9TVUNDRUVERUQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RNZXNzYWdlczogW21lc3NhZ2VdLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXVpZDogY3J5cHRvLnJhbmRvbVVVSUQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtpbmQ6ICdlcnJvcicsXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogQWN0aW9uVHlwZS5JTVBPUlRfRkFJTEVELFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0TWVzc2FnZXM6IFttZXNzYWdlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIEVmZmVjdFR5cGUuUkVNT1ZFX1NDUkVFTl9TVEFURV9TVE9SRV9CWV9QQUdFX0tFWToge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBzY3JlZW5TdGF0ZVRhYmxlLnJlbW92ZShmeC5wYWdlS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2NyZWVuU3RhdGVzID0gYXdhaXQgc2NyZWVuU3RhdGVUYWJsZS5yZWFkQWxsKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhZ2VLZXlzID0gT2JqZWN0LmtleXMoc2NyZWVuU3RhdGVzKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBBY3Rpb25UeXBlLlNUT1JFX1JFTE9BRF9TVUNDRUVERUQsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlS2V5cyxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0ID0gYXdhaXQgc2NyZWVuU3RhdGVUYWJsZS5nZXQodGhpcy5tb2RlbC5wYWdlS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBBY3Rpb25UeXBlLlJFU1RPUkVfU1RBVEUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBzdC5pdGVtcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0U2l6ZTogc3QuZGVmYXVsdFNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdENvbG9yOiBzdC5kZWZhdWx0Q29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFNoYXBlOiBzdC5kZWZhdWx0U2hhcGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdExhYmVsRm9ybWF0OiBzdC5kZWZhdWx0TGFiZWxGb3JtYXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZpc2libGU6IHN0LmRlZmF1bHRWaXNpYmxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRQb3NpdGlvbjogc3QuZGVmYXVsdFBvc2l0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRHcm91cDogc3QuZGVmYXVsdEdyb3VwLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIEVmZmVjdFR5cGUuRVhQT1JUX1NDUkVFTl9TVEFURV9CWV9QQUdFX0tFWToge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSBhd2FpdCBzY3JlZW5TdGF0ZVRhYmxlLmdldChmeC5wYWdlS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGV4cG9ydFNjcmVlblN0YXRlKHN0YXRlLCBmeC5wYWdlS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlLkVYUE9SVF9GQUlMRUQsIGVycm9yIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIEVmZmVjdFR5cGUuTUVBU1VSRV9DT05URU5UX1NJWkU6XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY29ubj8uYXBpLm1lYXN1cmVTaXplKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgRWZmZWN0VHlwZS5DQVBUVVJFOlxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgY2FwdHVyZShmeC5wYXlsb2FkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlLkNBUFRVUkVfU1VDQ0VFREVEIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZS5DQVBUVVJFX0ZBSUxFRCwgZXJyb3I6IGUgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBFZmZlY3RUeXBlLk5PVElGWV9FUlJPUjpcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihmeC5lcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGVuc3VyZUNvbm5lY3Rpb25BbGl2ZShvcHRzKSB7XG4gICAgICAgIGNvbnN0IHByZXZLZXkgPSB0aGlzLm1vZGVsLnBhZ2VLZXk7XG4gICAgICAgIGNvbnN0IGZvcmNlID0gb3B0cz8uZm9yY2VSZWNvbm5lY3QgPT09IHRydWU7XG4gICAgICAgIGlmICghZm9yY2UpIHtcbiAgICAgICAgICAgIGNvbnN0IHBvbmcgPSBhd2FpdCB0aGlzLmNvbm4/LmFwaS5waW5nKCk7XG4gICAgICAgICAgICBpZiAocG9uZyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHJldHVybiB7IG9rOiB0cnVlLCBjb250ZXh0Q2hhbmdlZDogZmFsc2UgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0YWIgPSBhd2FpdCBnZXRBY3RpdmVUYWIoKTtcbiAgICAgICAgaWYgKCF0YWI/LmlkIHx8IGlzUmVzdHJpY3RlZCh0YWIudXJsKSkge1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGUuU0VUX1NUQVRVUywgc3RhdHVzOiBTVEFUVVMuUkVTVFJJQ1RFRCB9KTtcbiAgICAgICAgICAgIHJldHVybiB7IG9rOiBmYWxzZSB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5ld0tleSA9IHBhZ2VLZXkodGFiLnVybCk7XG4gICAgICAgIGNvbnN0IHRhYklkID0gdGFiLmlkO1xuICAgICAgICB0aGlzLmRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZS5DT05ORUNURUQsIHRhYklkLCBwYWdlS2V5OiBuZXdLZXkgfSk7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlLlNFVF9TVEFUVVMsIHN0YXR1czogU1RBVFVTLkNPTk5FQ1RJTkcgfSk7XG4gICAgICAgIC8vIEV4cGxpY2l0bHkgY2xvc2UgdGhlIG9sZCBwb3J0XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmNvbm4/LnBvcnQuZGlzY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgIC8qIG5vLW9wICovXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb25uID0gYXdhaXQgY29ubmVjdFRvVGFiKHRhYklkKTtcbiAgICAgICAgdGhpcy5jb25uLm9uRGlzY29ubmVjdCgoKSA9PiB0aGlzLmRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZS5QT1JUX0RJU0NPTk5FQ1RFRCB9KSk7XG4gICAgICAgIHRoaXMuY29ubi5wb3J0Lm9uTWVzc2FnZS5hZGRMaXN0ZW5lcihhc3luYyAobXNnKSA9PiB7XG4gICAgICAgICAgICBpZiAobXNnPy50eXBlID09PSBNU0dfVFlQRS5TRUxFQ1RFRCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBhd2FpdCBoYW5kbGVTZWxlY3RlZCh0aGlzLm1vZGVsLnBhZ2VLZXksIG1zZy5wYXlsb2FkLmFuY2hvcnMpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBBY3Rpb25UeXBlLlJFU1RPUkVfU1RBVEUsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogcy5pdGVtcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRTaXplOiBzLmRlZmF1bHRTaXplLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdENvbG9yOiBzLmRlZmF1bHRDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRTaGFwZTogcy5kZWZhdWx0U2hhcGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0TGFiZWxGb3JtYXQ6IHMuZGVmYXVsdExhYmVsRm9ybWF0LFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZpc2libGU6IHMuZGVmYXVsdFZpc2libGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UG9zaXRpb246IHMuZGVmYXVsdFBvc2l0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdEdyb3VwOiBzLmRlZmF1bHRHcm91cCxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG1zZz8udHlwZSA9PT0gTVNHX1RZUEUuTUlTU0lOR19JRFMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogQWN0aW9uVHlwZS5TRVRfTUlTU0lOR19JRFMsXG4gICAgICAgICAgICAgICAgICAgIG1pc3NpbmdJZHM6IG1zZy5wYXlsb2FkLm1pc3NpbmdJZHMsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChtc2c/LnR5cGUgPT09IE1TR19UWVBFLkNPTlRFTlRfU0laRV9SRVNVTFQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogQWN0aW9uVHlwZS5DQVBUVVJFX1JFUVVFU1RFRCxcbiAgICAgICAgICAgICAgICAgICAgY29udGVudFNpemU6IG1zZy5wYXlsb2FkLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgc3QgPSBhd2FpdCBzY3JlZW5TdGF0ZVRhYmxlLmdldChuZXdLZXkpO1xuICAgICAgICB0aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6IEFjdGlvblR5cGUuUkVTVE9SRV9TVEFURSxcbiAgICAgICAgICAgIHN0YXRlOiB7XG4gICAgICAgICAgICAgICAgaXRlbXM6IHN0Lml0ZW1zLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRTaXplOiBzdC5kZWZhdWx0U2l6ZSxcbiAgICAgICAgICAgICAgICBkZWZhdWx0Q29sb3I6IHN0LmRlZmF1bHRDb2xvcixcbiAgICAgICAgICAgICAgICBkZWZhdWx0U2hhcGU6IHN0LmRlZmF1bHRTaGFwZSxcbiAgICAgICAgICAgICAgICBkZWZhdWx0TGFiZWxGb3JtYXQ6IHN0LmRlZmF1bHRMYWJlbEZvcm1hdCxcbiAgICAgICAgICAgICAgICBkZWZhdWx0VmlzaWJsZTogc3QuZGVmYXVsdFZpc2libGUsXG4gICAgICAgICAgICAgICAgZGVmYXVsdFBvc2l0aW9uOiBzdC5kZWZhdWx0UG9zaXRpb24sXG4gICAgICAgICAgICAgICAgZGVmYXVsdEdyb3VwOiBzdC5kZWZhdWx0R3JvdXAsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGUuU0VUX1NUQVRVUywgc3RhdHVzOiBTVEFUVVMuQ09OTkVDVEVEIH0pO1xuICAgICAgICBjb25zdCBjb250ZXh0Q2hhbmdlZCA9ICEhcHJldktleSAmJiBwcmV2S2V5ICE9PSBuZXdLZXk7XG4gICAgICAgIHJldHVybiB7IG9rOiB0cnVlLCBjb250ZXh0Q2hhbmdlZCB9O1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFVOR1JPVVBFRF9WQUxVRSB9IGZyb20gJ0Bjb21tb24vdHlwZXMnO1xuaW1wb3J0IHsgc29ydFNjcmVlbkl0ZW1zQnlHcm91cEFuZExhYmVsIH0gZnJvbSAnQGNvbW1vbi91dGlscyc7XG5pbXBvcnQgeyBub3JtYWxpemVHcm91cExhYmVsc0FuZENvdW50VW5ncm91cGVkIH0gZnJvbSAnQHBhbmVsL3NlcnZpY2VzL3N0YXRlJztcbmltcG9ydCB7IFNUQVRVUyB9IGZyb20gJ0BwYW5lbC90eXBlcy9zdGF0dXMnO1xuaW1wb3J0IHsgQWN0aW9uVHlwZSB9IGZyb20gJy4uL3R5cGVzL2FjdGlvbl90eXBlcyc7XG5pbXBvcnQgeyBFZmZlY3RUeXBlIH0gZnJvbSAnLi4vdHlwZXMvZWZmZWN0X3R5cGVzJztcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGUobW9kZWwsIGFjdGlvbikge1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLklOSVQ6XG4gICAgICAgICAgICByZXR1cm4geyBtb2RlbCwgZWZmZWN0czogW3sga2luZDogRWZmZWN0VHlwZS5TRVRfVEhFTUUgfV0gfTtcbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLkNPTk5FQ1RFRDpcbiAgICAgICAgICAgIHJldHVybiB7IG1vZGVsOiB7IC4uLm1vZGVsLCB0YWJJZDogYWN0aW9uLnRhYklkLCBwYWdlS2V5OiBhY3Rpb24ucGFnZUtleSB9LCBlZmZlY3RzOiBbXSB9O1xuICAgICAgICBjYXNlIEFjdGlvblR5cGUuU0VUX1NUQVRVUzoge1xuICAgICAgICAgICAgaWYgKGFjdGlvbi5zdGF0dXMgPT09IFNUQVRVUy5DT05ORUNURUQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBtb2RlbDogeyAuLi5tb2RlbCwgc3RhdHVzOiBhY3Rpb24uc3RhdHVzIH0sIGVmZmVjdHM6IFtdIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyBtb2RlbDogeyAuLi5tb2RlbCwgaXRlbXM6IFtdLCBzdGF0dXM6IGFjdGlvbi5zdGF0dXMgfSwgZWZmZWN0czogW10gfTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIEFjdGlvblR5cGUuUkVTVE9SRV9TVEFURTpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbW9kZWw6IHtcbiAgICAgICAgICAgICAgICAgICAgLi4ubW9kZWwsXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBhY3Rpb24uc3RhdGUuaXRlbXMsXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRTaXplOiBhY3Rpb24uc3RhdGUuZGVmYXVsdFNpemUsXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRDb2xvcjogYWN0aW9uLnN0YXRlLmRlZmF1bHRDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFNoYXBlOiBhY3Rpb24uc3RhdGUuZGVmYXVsdFNoYXBlLFxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0TGFiZWxGb3JtYXQ6IGFjdGlvbi5zdGF0ZS5kZWZhdWx0TGFiZWxGb3JtYXQsXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWaXNpYmxlOiBhY3Rpb24uc3RhdGUuZGVmYXVsdFZpc2libGUsXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRQb3NpdGlvbjogYWN0aW9uLnN0YXRlLmRlZmF1bHRQb3NpdGlvbixcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdEdyb3VwOiBhY3Rpb24uc3RhdGUuZGVmYXVsdEdyb3VwLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZWZmZWN0czogW3sga2luZDogRWZmZWN0VHlwZS5SRU5ERVJfQ09OVEVOVCwgaXRlbXM6IGFjdGlvbi5zdGF0ZS5pdGVtcyB9XSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5TRVRfTUlTU0lOR19JRFM6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1vZGVsOiB7IC4uLm1vZGVsLCBtaXNzaW5nSWRzOiBhY3Rpb24ubWlzc2luZ0lkcyB9LFxuICAgICAgICAgICAgICAgIGVmZmVjdHM6IFtdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLlRPR0dMRV9TRUxFQ1Q6IHtcbiAgICAgICAgICAgIGNvbnN0IG5leHQgPSAhbW9kZWwuc2VsZWN0aW9uRW5hYmxlZDtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbW9kZWw6IHsgLi4ubW9kZWwsIHNlbGVjdGlvbkVuYWJsZWQ6IG5leHQgfSxcbiAgICAgICAgICAgICAgICBlZmZlY3RzOiBbeyBraW5kOiBFZmZlY3RUeXBlLlRPR0dMRV9TRUxFQ1RfT05fQ09OVEVOVCwgZW5hYmxlZDogbmV4dCB9XSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLkNMRUFSX0FMTDpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbW9kZWw6IHsgLi4ubW9kZWwsIGl0ZW1zOiBbXSB9LFxuICAgICAgICAgICAgICAgIGVmZmVjdHM6IFt7IGtpbmQ6IEVmZmVjdFR5cGUuQ0xFQVJfQ09OVEVOVCB9LCB7IGtpbmQ6IEVmZmVjdFR5cGUuQ0xFQVJfU1RBVEUgfV0sXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIEFjdGlvblR5cGUuQ09OVEVOVF9TRUxFQ1RFRDpcbiAgICAgICAgICAgIHJldHVybiB7IG1vZGVsLCBlZmZlY3RzOiBbXSB9O1xuICAgICAgICBjYXNlIEFjdGlvblR5cGUuVE9HR0xFX0NBUFRVUkVfUEFORUw6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1vZGVsOiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLm1vZGVsLFxuICAgICAgICAgICAgICAgICAgICBjYXB0dXJlOiB7IC4uLm1vZGVsLmNhcHR1cmUsIHBhbmVsRXhwYW5kZWQ6ICFtb2RlbC5jYXB0dXJlLnBhbmVsRXhwYW5kZWQgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVmZmVjdHM6IFtdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLlNFVF9CQURHRV9TSVpFOiB7XG4gICAgICAgICAgICBjb25zdCBpdGVtcyA9IG1vZGVsLml0ZW1zLm1hcCgoaXQpID0+ICh7XG4gICAgICAgICAgICAgICAgLi4uaXQsXG4gICAgICAgICAgICAgICAgLi4uKG1vZGVsLnNlbGVjdEl0ZW1zLmluY2x1ZGVzKGl0LmlkKSA/IHsgc2l6ZTogYWN0aW9uLnNpemUgfSA6IHt9KSxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbW9kZWw6IHsgLi4ubW9kZWwsIGRlZmF1bHRTaXplOiBhY3Rpb24uc2l6ZSwgaXRlbXMgfSxcbiAgICAgICAgICAgICAgICBlZmZlY3RzOiBbeyBraW5kOiBFZmZlY3RUeXBlLlBFUlNJU1RfU1RBVEUgfSwgeyBraW5kOiBFZmZlY3RUeXBlLlJFTkRFUl9DT05URU5ULCBpdGVtcyB9XSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLlNFVF9CQURHRV9DT0xPUjoge1xuICAgICAgICAgICAgY29uc3QgaXRlbXMgPSBtb2RlbC5pdGVtcy5tYXAoKGl0KSA9PiAoe1xuICAgICAgICAgICAgICAgIC4uLml0LFxuICAgICAgICAgICAgICAgIC4uLihtb2RlbC5zZWxlY3RJdGVtcy5pbmNsdWRlcyhpdC5pZCkgPyB7IGNvbG9yOiBhY3Rpb24uY29sb3IgfSA6IHt9KSxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbW9kZWw6IHsgLi4ubW9kZWwsIGRlZmF1bHRDb2xvcjogYWN0aW9uLmNvbG9yLCBpdGVtcyB9LFxuICAgICAgICAgICAgICAgIGVmZmVjdHM6IFt7IGtpbmQ6IEVmZmVjdFR5cGUuUEVSU0lTVF9TVEFURSB9LCB7IGtpbmQ6IEVmZmVjdFR5cGUuUkVOREVSX0NPTlRFTlQsIGl0ZW1zIH1dLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIEFjdGlvblR5cGUuU0VUX0JBREdFX1NIQVBFOiB7XG4gICAgICAgICAgICBjb25zdCBpdGVtcyA9IG1vZGVsLml0ZW1zLm1hcCgoaXQpID0+ICh7XG4gICAgICAgICAgICAgICAgLi4uaXQsXG4gICAgICAgICAgICAgICAgLi4uKG1vZGVsLnNlbGVjdEl0ZW1zLmluY2x1ZGVzKGl0LmlkKSA/IHsgc2hhcGU6IGFjdGlvbi5zaGFwZSB9IDoge30pLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtb2RlbDogeyAuLi5tb2RlbCwgZGVmYXVsdFNoYXBlOiBhY3Rpb24uc2hhcGUsIGl0ZW1zIH0sXG4gICAgICAgICAgICAgICAgZWZmZWN0czogW3sga2luZDogRWZmZWN0VHlwZS5QRVJTSVNUX1NUQVRFIH0sIHsga2luZDogRWZmZWN0VHlwZS5SRU5ERVJfQ09OVEVOVCwgaXRlbXMgfV0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5TRVRfQkFER0VfTEFCRUxfRk9STUFUOiB7XG4gICAgICAgICAgICBjb25zdCBpdGVtcyA9IG1vZGVsLml0ZW1zLm1hcCgoaXQpID0+ICh7XG4gICAgICAgICAgICAgICAgLi4uaXQsXG4gICAgICAgICAgICAgICAgLi4uKG1vZGVsLnNlbGVjdEl0ZW1zLmluY2x1ZGVzKGl0LmlkKSA/IHsgbGFiZWxGb3JtYXQ6IGFjdGlvbi5sYWJlbEZvcm1hdCB9IDoge30pLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtb2RlbDogeyAuLi5tb2RlbCwgZGVmYXVsdExhYmVsRm9ybWF0OiBhY3Rpb24ubGFiZWxGb3JtYXQsIGl0ZW1zIH0sXG4gICAgICAgICAgICAgICAgZWZmZWN0czogW3sga2luZDogRWZmZWN0VHlwZS5QRVJTSVNUX1NUQVRFIH0sIHsga2luZDogRWZmZWN0VHlwZS5SRU5ERVJfQ09OVEVOVCwgaXRlbXMgfV0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5TRVRfQkFER0VfVklTSUJMRToge1xuICAgICAgICAgICAgY29uc3QgaXRlbXMgPSBtb2RlbC5pdGVtcy5tYXAoKGl0KSA9PiAoe1xuICAgICAgICAgICAgICAgIC4uLml0LFxuICAgICAgICAgICAgICAgIC4uLihtb2RlbC5zZWxlY3RJdGVtcy5pbmNsdWRlcyhpdC5pZCkgPyB7IHZpc2libGU6IGFjdGlvbi52aXNpYmxlIH0gOiB7fSksXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1vZGVsOiB7IC4uLm1vZGVsLCBkZWZhdWx0VmlzaWJsZTogYWN0aW9uLnZpc2libGUsIGl0ZW1zIH0sXG4gICAgICAgICAgICAgICAgZWZmZWN0czogW3sga2luZDogRWZmZWN0VHlwZS5QRVJTSVNUX1NUQVRFIH0sIHsga2luZDogRWZmZWN0VHlwZS5SRU5ERVJfQ09OVEVOVCwgaXRlbXMgfV0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5CQURHRV9ERUxFVEU6IHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zTWFya2VkRm9yUmVsYWJlbCA9IG1vZGVsLml0ZW1zLmZpbHRlcigoaXQpID0+ICFtb2RlbC5zZWxlY3RJdGVtcy5pbmNsdWRlcyhpdC5pZCkpO1xuICAgICAgICAgICAgY29uc3QgaXRlbXMgPSBub3JtYWxpemVHcm91cExhYmVsc0FuZENvdW50VW5ncm91cGVkKGl0ZW1zTWFya2VkRm9yUmVsYWJlbCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1vZGVsOiB7IC4uLm1vZGVsLCBpdGVtcyB9LFxuICAgICAgICAgICAgICAgIGVmZmVjdHM6IFt7IGtpbmQ6IEVmZmVjdFR5cGUuUEVSU0lTVF9TVEFURSB9LCB7IGtpbmQ6IEVmZmVjdFR5cGUuUkVOREVSX0NPTlRFTlQsIGl0ZW1zIH1dLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIEFjdGlvblR5cGUuU0VUX0JBREdFX1BPU0lUSU9OOiB7XG4gICAgICAgICAgICBjb25zdCBpdGVtcyA9IG1vZGVsLml0ZW1zLm1hcCgoaXQpID0+ICh7XG4gICAgICAgICAgICAgICAgLi4uaXQsXG4gICAgICAgICAgICAgICAgLi4uKG1vZGVsLnNlbGVjdEl0ZW1zLmluY2x1ZGVzKGl0LmlkKSA/IHsgcG9zaXRpb246IGFjdGlvbi5wb3NpdGlvbiB9IDoge30pLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtb2RlbDogeyAuLi5tb2RlbCwgZGVmYXVsdFBvc2l0aW9uOiBhY3Rpb24ucG9zaXRpb24sIGl0ZW1zIH0sXG4gICAgICAgICAgICAgICAgZWZmZWN0czogW3sga2luZDogRWZmZWN0VHlwZS5QRVJTSVNUX1NUQVRFIH0sIHsga2luZDogRWZmZWN0VHlwZS5SRU5ERVJfQ09OVEVOVCwgaXRlbXMgfV0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5TRVRfR1JPVVA6IHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zTWFya2VkRm9yUmVsYWJlbCA9IHVwZGF0ZUdyb3VwQW5kRGVmZXJSZWxhYmVsKG1vZGVsLml0ZW1zLCBtb2RlbC5zZWxlY3RJdGVtcywgYWN0aW9uLmdyb3VwKTtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gbm9ybWFsaXplR3JvdXBMYWJlbHNBbmRDb3VudFVuZ3JvdXBlZChpdGVtc01hcmtlZEZvclJlbGFiZWwpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtb2RlbDogeyAuLi5tb2RlbCwgZGVmYXVsdEdyb3VwOiBhY3Rpb24uZ3JvdXAsIGl0ZW1zIH0sXG4gICAgICAgICAgICAgICAgZWZmZWN0czogW3sga2luZDogRWZmZWN0VHlwZS5QRVJTSVNUX1NUQVRFIH0sIHsga2luZDogRWZmZWN0VHlwZS5SRU5ERVJfQ09OVEVOVCwgaXRlbXMgfV0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5TRVRfQ0FQVFVSRV9GT1JNQVQ6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1vZGVsOiB7IC4uLm1vZGVsLCBjYXB0dXJlOiB7IC4uLm1vZGVsLmNhcHR1cmUsIGZvcm1hdDogYWN0aW9uLmZvcm1hdCB9IH0sXG4gICAgICAgICAgICAgICAgZWZmZWN0czogW10sXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIEFjdGlvblR5cGUuU0VUX0NBUFRVUkVfQVJFQTpcbiAgICAgICAgICAgIHJldHVybiB7IG1vZGVsOiB7IC4uLm1vZGVsLCBjYXB0dXJlOiB7IC4uLm1vZGVsLmNhcHR1cmUsIGFyZWE6IGFjdGlvbi5hcmVhIH0gfSwgZWZmZWN0czogW10gfTtcbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLlNFVF9DQVBUVVJFX1FVQUxJVFk6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1vZGVsOiB7IC4uLm1vZGVsLCBjYXB0dXJlOiB7IC4uLm1vZGVsLmNhcHR1cmUsIHF1YWxpdHk6IGFjdGlvbi5xdWFsaXR5IH0gfSxcbiAgICAgICAgICAgICAgICBlZmZlY3RzOiBbXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5TRVRfQ0FQVFVSRV9TQ0FMRTpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbW9kZWw6IHsgLi4ubW9kZWwsIGNhcHR1cmU6IHsgLi4ubW9kZWwuY2FwdHVyZSwgc2NhbGU6IGFjdGlvbi5zY2FsZSB9IH0sXG4gICAgICAgICAgICAgICAgZWZmZWN0czogW10sXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIEFjdGlvblR5cGUuTUVBU1VSRV9DT05URU5UX1NJWkU6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1vZGVsLFxuICAgICAgICAgICAgICAgIGVmZmVjdHM6IFt7IGtpbmQ6IEVmZmVjdFR5cGUuTUVBU1VSRV9DT05URU5UX1NJWkUgfV0sXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIEFjdGlvblR5cGUuQ0FQVFVSRV9SRVFVRVNURUQ6IHtcbiAgICAgICAgICAgIGlmIChtb2RlbC50YWJJZCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgbW9kZWwsIGVmZmVjdHM6IFt7IGtpbmQ6IEVmZmVjdFR5cGUuTk9USUZZX0VSUk9SLCBlcnJvcjogJ05vIHRhYklkJyB9XSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtb2RlbCxcbiAgICAgICAgICAgICAgICBlZmZlY3RzOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtpbmQ6IEVmZmVjdFR5cGUuQ0FQVFVSRSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJJZDogbW9kZWwudGFiSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiBtb2RlbC5jYXB0dXJlLmZvcm1hdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmVhOiBtb2RlbC5jYXB0dXJlLmFyZWEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVhbGl0eTogbW9kZWwuY2FwdHVyZS5xdWFsaXR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlOiBtb2RlbC5jYXB0dXJlLnNjYWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRTaXplOiBhY3Rpb24uY29udGVudFNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5DQVBUVVJFX1NVQ0NFRURFRDpcbiAgICAgICAgICAgIHJldHVybiB7IG1vZGVsLCBlZmZlY3RzOiBbXSB9O1xuICAgICAgICBjYXNlIEFjdGlvblR5cGUuQ0FQVFVSRV9GQUlMRUQ6XG4gICAgICAgICAgICByZXR1cm4geyBtb2RlbCwgZWZmZWN0czogW3sga2luZDogRWZmZWN0VHlwZS5OT1RJRllfRVJST1IsIGVycm9yOiBhY3Rpb24uZXJyb3IgfV0gfTtcbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLlJFT1JERVJfSVRFTVM6IHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zTWFya2VkRm9yUmVsYWJlbCA9IHJlb3JkZXJJdGVtTGFiZWwobW9kZWwuaXRlbXMsIGFjdGlvbi5mcm9tSWQsIGFjdGlvbi5mcm9tSW5kZXgsIGFjdGlvbi50b0luZGV4KTtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gbm9ybWFsaXplR3JvdXBMYWJlbHNBbmRDb3VudFVuZ3JvdXBlZChpdGVtc01hcmtlZEZvclJlbGFiZWwpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtb2RlbDogeyAuLi5tb2RlbCwgaXRlbXMgfSxcbiAgICAgICAgICAgICAgICBlZmZlY3RzOiBbeyBraW5kOiBFZmZlY3RUeXBlLlBFUlNJU1RfU1RBVEUgfSwgeyBraW5kOiBFZmZlY3RUeXBlLlJFTkRFUl9DT05URU5ULCBpdGVtcyB9XSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLklURU1fU0VMRUNUSU9OX0NIQU5HRUQ6IHtcbiAgICAgICAgICAgIGlmICgnaWQnIGluIGFjdGlvbikge1xuICAgICAgICAgICAgICAgIC8vIFNlbGVjdC9kZXNlbGVjdCBhIHNpbmdsZSBpdGVtXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0SXRlbXMgPSBhcHBseUl0ZW1TZWxlY3Rpb25DaGFuZ2VkQnlJZChhY3Rpb24uaWQsIGFjdGlvbi5pc0NoZWNrLCBtb2RlbC5zZWxlY3RJdGVtcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHsgLi4ubW9kZWwsIHNlbGVjdEl0ZW1zIH0sXG4gICAgICAgICAgICAgICAgICAgIGVmZmVjdHM6IFtdLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgnZ3JvdXAnIGluIGFjdGlvbikge1xuICAgICAgICAgICAgICAgIC8vIFNlbGVjdC9kZXNlbGVjdCBhIGdyb3VwXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0SXRlbXMgPSBhcHBseUl0ZW1TZWxlY3Rpb25DaGFuZ2VkRm9yR3JvdXAoYWN0aW9uLmdyb3VwLCBhY3Rpb24uaXNDaGVjaywgbW9kZWwuc2VsZWN0SXRlbXMsIG1vZGVsLml0ZW1zKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBtb2RlbDogeyAuLi5tb2RlbCwgc2VsZWN0SXRlbXMgfSxcbiAgICAgICAgICAgICAgICAgICAgZWZmZWN0czogW10sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFNlbGVjdCBhbGwvRGVzZWxlY3QgYWxsXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0SXRlbXMgPSBhcHBseUl0ZW1TZWxlY3Rpb25DaGFuZ2VkRm9yQWxsKGFjdGlvbi5hbGxDaGVjaywgbW9kZWwuaXRlbXMpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIG1vZGVsOiB7IC4uLm1vZGVsLCBzZWxlY3RJdGVtcyB9LFxuICAgICAgICAgICAgICAgICAgICBlZmZlY3RzOiBbXSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5JVEVNX0hPVkVSX0lOOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtb2RlbCxcbiAgICAgICAgICAgICAgICBlZmZlY3RzOiBbeyBraW5kOiBFZmZlY3RUeXBlLkhPVkVSLCBpZDogYWN0aW9uLmlkIH1dLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLklURU1fSE9WRVJfT1VUOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtb2RlbCxcbiAgICAgICAgICAgICAgICBlZmZlY3RzOiBbeyBraW5kOiBFZmZlY3RUeXBlLkhPVkVSLCBpZDogbnVsbCB9XSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5VUERBVEVfSVRFTV9DT01NRU5UOiB7XG4gICAgICAgICAgICBjb25zdCBpdGVtcyA9IG1vZGVsLml0ZW1zLm1hcCgoaXQpID0+ICh7XG4gICAgICAgICAgICAgICAgLi4uaXQsXG4gICAgICAgICAgICAgICAgLi4uKGl0LmlkID09PSBhY3Rpb24uaWQgPyB7IGNvbW1lbnQ6IGFjdGlvbi5jb21tZW50IH0gOiB7fSksXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1vZGVsOiB7IC4uLm1vZGVsLCBpdGVtcyB9LFxuICAgICAgICAgICAgICAgIGVmZmVjdHM6IFt7IGtpbmQ6IEVmZmVjdFR5cGUuUEVSU0lTVF9TVEFURSB9LCB7IGtpbmQ6IEVmZmVjdFR5cGUuUkVOREVSX0NPTlRFTlQsIGl0ZW1zIH1dLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIEFjdGlvblR5cGUuUE9SVF9ESVNDT05ORUNURUQ6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1vZGVsOiB7IC4uLm1vZGVsLCBzdGF0dXM6IFNUQVRVUy5ESVNDT05ORUNURUQsIHNlbGVjdGlvbkVuYWJsZWQ6IGZhbHNlIH0sXG4gICAgICAgICAgICAgICAgZWZmZWN0czogW3sga2luZDogRWZmZWN0VHlwZS5UT0dHTEVfU0VMRUNUX09OX0NPTlRFTlQsIGVuYWJsZWQ6IGZhbHNlIH1dLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLlNFVF9USEVNRTpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbW9kZWw6IHsgLi4ubW9kZWwsIHRoZW1lOiBhY3Rpb24udGhlbWUgfSxcbiAgICAgICAgICAgICAgICBlZmZlY3RzOiBbXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5VUERBVEVfVEhFTUU6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1vZGVsOiB7IC4uLm1vZGVsLCB0aGVtZTogYWN0aW9uLnRoZW1lIH0sXG4gICAgICAgICAgICAgICAgZWZmZWN0czogW3sga2luZDogRWZmZWN0VHlwZS5VUERBVEVfVEhFTUUsIHRoZW1lOiBhY3Rpb24udGhlbWUgfV0sXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIEFjdGlvblR5cGUuU1RPUkVfUkVMT0FEX1JFUVVFU1RFRDpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbW9kZWwsXG4gICAgICAgICAgICAgICAgZWZmZWN0czogW3sga2luZDogRWZmZWN0VHlwZS5SRUFEX1NDUkVFTl9TVEFURV9TVE9SRSB9XSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5TVE9SRV9SRUxPQURfU1VDQ0VFREVEOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtb2RlbDogeyAuLi5tb2RlbCwgcGFnZUtleXM6IGFjdGlvbi5wYWdlS2V5cyB9LFxuICAgICAgICAgICAgICAgIGVmZmVjdHM6IFtdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLklNUE9SVF9TQ1JFQU5fU1RBVEVfRklMRTpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbW9kZWwsXG4gICAgICAgICAgICAgICAgZWZmZWN0czogW3sga2luZDogRWZmZWN0VHlwZS5JTVBPUlRfU0NSRUFOX1NUQVRFX0ZJTEUsIGZpbGU6IGFjdGlvbi5maWxlIH1dLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLklNUE9SVF9TVUNDRUVERUQ6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1vZGVsOiB7IC4uLm1vZGVsLCB0b2FzdE1lc3NhZ2VzOiBhY3Rpb24udG9hc3RNZXNzYWdlcyB9LFxuICAgICAgICAgICAgICAgIGVmZmVjdHM6IFtdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLklNUE9SVF9GQUlMRUQ6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1vZGVsOiB7IC4uLm1vZGVsLCB0b2FzdE1lc3NhZ2VzOiBhY3Rpb24udG9hc3RNZXNzYWdlcyB9LFxuICAgICAgICAgICAgICAgIGVmZmVjdHM6IFtdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLlRPQVNUX0RJU01JU1NfUkVRVUVTVEVEOiB7XG4gICAgICAgICAgICBjb25zdCB0b2FzdE1lc3NhZ2VzID0gbW9kZWwudG9hc3RNZXNzYWdlcy5maWx0ZXIoKHQpID0+IHQudXVpZCAhPT0gYWN0aW9uLnV1aWQpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtb2RlbDogeyAuLi5tb2RlbCwgdG9hc3RNZXNzYWdlcyB9LFxuICAgICAgICAgICAgICAgIGVmZmVjdHM6IFtdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIEFjdGlvblR5cGUuUkVNT1ZFX1NDUkVFTl9TVEFURV9CWV9QQUdFOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtb2RlbCxcbiAgICAgICAgICAgICAgICBlZmZlY3RzOiBbXG4gICAgICAgICAgICAgICAgICAgIHsga2luZDogRWZmZWN0VHlwZS5SRU1PVkVfU0NSRUVOX1NUQVRFX1NUT1JFX0JZX1BBR0VfS0VZLCBwYWdlS2V5OiBhY3Rpb24ucGFnZUtleSB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIEFjdGlvblR5cGUuRVhQT1JUX1NDUkVFTl9TVEFURV9CWV9QQUdFOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtb2RlbCxcbiAgICAgICAgICAgICAgICBlZmZlY3RzOiBbeyBraW5kOiBFZmZlY3RUeXBlLkVYUE9SVF9TQ1JFRU5fU1RBVEVfQllfUEFHRV9LRVksIHBhZ2VLZXk6IGFjdGlvbi5wYWdlS2V5IH1dLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLkVYUE9SVF9GQUlMRUQ6XG4gICAgICAgICAgICByZXR1cm4geyBtb2RlbCwgZWZmZWN0czogW3sga2luZDogRWZmZWN0VHlwZS5OT1RJRllfRVJST1IsIGVycm9yOiBhY3Rpb24uZXJyb3IgfV0gfTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiB7IG1vZGVsLCBlZmZlY3RzOiBbXSB9O1xuICAgIH1cbn1cbi8qKlxuICogUmVsYWJlbCBpdGVtcyBhcyBpZiB0aGUgaXRlbSB3aXRoIGBmcm9tSWRgIHdhcyBtb3ZlZCB0byB0aGUgcG9zaXRpb25cbiAqIHdob3NlIGxhYmVsIGVxdWFscyBgaXRlbXNbdG9JbmRleF0ubGFiZWxgLiBMYWJlbHMgb2YgdGhlIGl0ZW1zIGluIGJldHdlZW5cbiAqIGFyZSBzaGlmdGVkIGJ5IMKxMSB0byBrZWVwIGxhYmVscyB1bmlxdWUgYW5kIGNvbnRpZ3VvdXMgKGlmIHRoZXkgd2VyZSkuXG4gKlxuICogQHBhcmFtIGl0ZW1zICAgLSBTb3VyY2UgaXRlbXMgKG5vdCBtdXRhdGVkKS5cbiAqIEBwYXJhbSBmcm9tSWQgIC0gSUQgb2YgdGhlIGl0ZW0gdG8gbW92ZS5cbiAqIEBwYXJhbSBmcm9tSW5kZXggIC0gVGhlIGN1cnJlbnQgaW5kZXggb2YgdGhlIGl0ZW0gdG8gYmUgbW92ZWQuXG4gKiBAcGFyYW0gdG9JbmRleCAtIFRhcmdldCBpbmRleCBpbiBgaXRlbXNgIHdob3NlIGxhYmVsIGJlY29tZXMgdGhlIG5ldyBsYWJlbC5cbiAqIEByZXR1cm5zIEEgbmV3IGFycmF5IHdpdGggdXBkYXRlZCBsYWJlbHMuXG4gKiBAdGhyb3dzIFJhbmdlRXJyb3IgaWYgYHRvSW5kZXhgIGlzIG91dCBvZiBib3VuZHMgb3IgRXJyb3IgaWYgYGZyb21JZGAgbm90IGZvdW5kLlxuICovXG5mdW5jdGlvbiByZW9yZGVySXRlbUxhYmVsKGl0ZW1zLCBmcm9tSWQsIGZyb21JbmRleCwgdG9JbmRleCkge1xuICAgIGlmICh0b0luZGV4IDwgMCB8fCB0b0luZGV4ID49IGl0ZW1zLmxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgdG9JbmRleCBvdXQgb2YgcmFuZ2U6ICR7dG9JbmRleH1gKTtcbiAgICB9XG4gICAgY29uc3QgZnJvbUlkeCA9IGl0ZW1zLmZpbmRJbmRleCgoaSkgPT4gaS5pZCA9PT0gZnJvbUlkKTtcbiAgICBpZiAoZnJvbUlkeCA9PT0gLTEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJdGVtIG5vdCBmb3VuZCBmb3IgaWQ9JHtmcm9tSWR9YCk7XG4gICAgfVxuICAgIGlmICh0b0luZGV4IDwgMCB8fCB0b0luZGV4ID49IGl0ZW1zLmZpbHRlcigoaXQpID0+IGl0Lmdyb3VwID09PSBpdGVtc1tmcm9tSWR4XS5ncm91cCkubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGB0b0luZGV4IG91dCBvZiByYW5nZTogJHt0b0luZGV4fWApO1xuICAgIH1cbiAgICBjb25zdCBPRkZTRVRfQUZURVIgPSAxLjE7XG4gICAgY29uc3QgT0ZGU0VUX0JFRk9SRSA9IDAuMTtcbiAgICBjb25zdCBvZmZzZXQgPSBmcm9tSW5kZXggPCB0b0luZGV4ID8gT0ZGU0VUX0FGVEVSIDogT0ZGU0VUX0JFRk9SRTtcbiAgICBjb25zdCBsYWJlbCA9IHRvSW5kZXggKyBvZmZzZXQ7XG4gICAgcmV0dXJuIGl0ZW1zLm1hcCgoaXQpID0+IChpdC5pZCA9PT0gZnJvbUlkID8geyAuLi5pdCwgbGFiZWwgfSA6IGl0KSk7XG59XG4vKipcbiAqIEJ1bXBzIHRoZSBsYWJlbCBvZiBzZWxlY3RlZCBpdGVtcyB0aGF0IGFscmVhZHkgYmVsb25nIHRvIHRoZSB0cmltbWVkIHRhcmdldCBncm91cCwgd2hpbGUgZGVmZXJyaW5nIGxhYmVsIG5vcm1hbGl6YXRpb24uXG4gKlxuICogTm90ZXNcbiAqIC0gVGhlIGZ1bmN0aW9uIG9ubHkgdG91Y2hlcyBpdGVtcyB3aG9zZSBgaWRgIGlzIGluIGBzZWxlY3RJdGVtc2AgYW5kIHdob3NlIGN1cnJlbnQgYGdyb3VwYCBtYXRjaGVzIGBuZXh0R3JvdXBSYXdgIChhZnRlciB0cmltbWluZykuXG4gKiAtIExhYmVscyBhcmUgcmVhc3NpZ25lZCB0byBsYXJnZSBkZXNjZW5kaW5nIG51bWJlcnMgc28gdGhhdCBgcmVsYWJlbENvbnNlY3V0aXZlUGVyR3JvdXAoKWAgY2FuIGxhdGVyIGNvbXBhY3QgdGhlbS5cbiAqXG4gKiBAcGFyYW0gaXRlbXMgLSBGdWxsIGxpc3Qgb2Ygc2NyZWVuIGl0ZW1zLlxuICogQHBhcmFtIHNlbGVjdEl0ZW1zIC0gSURzIG9mIHRoZSBpdGVtcyB0aGF0IHNob3VsZCByZWNlaXZlIGEgdGVtcG9yYXJ5IGxhYmVsIGJ1bXAuXG4gKiBAcGFyYW0gbmV4dEdyb3VwUmF3IC0gVGFyZ2V0IGdyb3VwIG5hbWU7IHRyaW1tZWQgYmVmb3JlIGNvbXBhcmlzb24uXG4gKiBAcmV0dXJucyBBIG5ldyBhcnJheSB3aGVyZSB0aGUgbWF0Y2hpbmcgaXRlbXMgZ2FpbiBhIHRlbXBvcmFyeSBoaWdoLXByaW9yaXR5IGxhYmVsOyBvdGhlciBpdGVtcyBhcmUgdW50b3VjaGVkLlxuICovXG5mdW5jdGlvbiB1cGRhdGVHcm91cEFuZERlZmVyUmVsYWJlbChpdGVtcywgc2VsZWN0SXRlbXMsIG5leHRHcm91cFJhdykge1xuICAgIGNvbnN0IG5vcm1hbGl6ZSA9IChnKSA9PiAoZyA/PyAnJykudHJpbSgpO1xuICAgIGNvbnN0IG5leHRHcm91cCA9IG5vcm1hbGl6ZShuZXh0R3JvdXBSYXcpO1xuICAgIC8vIEFzc2lnbiB0ZW1wb3JhcnkgaHVnZSBsYWJlbHMgc28gc2VsZWN0ZWQgaXRlbXMgc29ydCB0byB0aGUgZW5kOyB3ZSByZS1sYWJlbCBsYXRlci5cbiAgICBjb25zdCB0ZW1wTGFiZWxCYXNlID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgLSBpdGVtcy5sZW5ndGg7XG4gICAgY29uc3Qgc29ydGVkSXRlbXMgPSBzb3J0U2NyZWVuSXRlbXNCeUdyb3VwQW5kTGFiZWwoaXRlbXMpO1xuICAgIHJldHVybiBzb3J0ZWRJdGVtcy5tYXAoKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgIGlmIChzZWxlY3RJdGVtcy5pbmNsdWRlcyhpdGVtLmlkKSAmJiBpdGVtLmdyb3VwICE9PSBuZXh0R3JvdXApIHtcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gdGVtcExhYmVsQmFzZSArIGluZGV4OyAvLyBrZWVwIHJlbGF0aXZlIG9yZGVyXG4gICAgICAgICAgICByZXR1cm4geyAuLi5pdGVtLCBncm91cDogbmV4dEdyb3VwLCBsYWJlbCB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gYXBwbHlJdGVtU2VsZWN0aW9uQ2hhbmdlZEJ5SWQoaWQsIGlzQ2hlY2ssIHNlbGVjdEl0ZW1zKSB7XG4gICAgaWYgKGlzQ2hlY2spIHtcbiAgICAgICAgaWYgKCFzZWxlY3RJdGVtcy5pbmNsdWRlcyhpZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBbLi4uc2VsZWN0SXRlbXMsIGlkXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2VsZWN0SXRlbXMuZmlsdGVyKChpdGVtKSA9PiBpdGVtICE9PSBpZCk7XG59XG5mdW5jdGlvbiBhcHBseUl0ZW1TZWxlY3Rpb25DaGFuZ2VkRm9yR3JvdXAoZ3JvdXAsIGlzQ2hlY2ssIHNlbGVjdEl0ZW1zLCBpdGVtcykge1xuICAgIGNvbnN0IGcgPSBncm91cC50cmltKCk7XG4gICAgY29uc3QgZ3JvdXBJZHMgPSBpdGVtc1xuICAgICAgICAuZmlsdGVyKChpdCkgPT4gKGl0Lmdyb3VwID8/IFVOR1JPVVBFRF9WQUxVRSkudHJpbSgpID09PSBnKVxuICAgICAgICAubWFwKChpdCkgPT4gaXQuaWQpO1xuICAgIGlmIChncm91cElkcy5sZW5ndGggPT09IDApXG4gICAgICAgIHJldHVybiBzZWxlY3RJdGVtcztcbiAgICBpZiAoaXNDaGVjaykge1xuICAgICAgICBjb25zdCBzZXQgPSBuZXcgU2V0KHNlbGVjdEl0ZW1zKTtcbiAgICAgICAgZm9yIChjb25zdCBpZCBvZiBncm91cElkcylcbiAgICAgICAgICAgIHNldC5hZGQoaWQpO1xuICAgICAgICByZXR1cm4gWy4uLnNldF07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBncm91cFNldCA9IG5ldyBTZXQoZ3JvdXBJZHMpO1xuICAgICAgICByZXR1cm4gc2VsZWN0SXRlbXMuZmlsdGVyKChpZCkgPT4gIWdyb3VwU2V0LmhhcyhpZCkpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFwcGx5SXRlbVNlbGVjdGlvbkNoYW5nZWRGb3JBbGwoYWxsQ2hlY2ssIGl0ZW1zKSB7XG4gICAgaWYgKGFsbENoZWNrKSB7XG4gICAgICAgIHJldHVybiBpdGVtcy5tYXAoKGl0KSA9PiBpdC5pZCk7XG4gICAgfVxuICAgIHJldHVybiBbXTtcbn1cbiIsImltcG9ydCB7IE1TR19UWVBFIH0gZnJvbSAnQGNvbW1vbi9tZXNzYWdlcyc7XG5pbXBvcnQgeyBwYWdlS2V5IH0gZnJvbSAnQGNvbW1vbi91cmwnO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEFjdGl2ZVRhYigpIHtcbiAgICBjb25zdCB0YWJzID0gYXdhaXQgY2hyb21lLnRhYnMucXVlcnkoeyBhY3RpdmU6IHRydWUsIGN1cnJlbnRXaW5kb3c6IHRydWUgfSk7XG4gICAgcmV0dXJuIHRhYnNbMF07XG59XG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJBY3RpdmVUYWJCcm9hZGNhc3QoKSB7XG4gICAgLy8gVGFiIHN3aXRjaGluZ1xuICAgIGNvbnN0IG9uQWN0aXZhdGVkID0gYXN5bmMgKHsgdGFiSWQsIHdpbmRvd0lkIH0pID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IFt0YWJdID0gYXdhaXQgY2hyb21lLnRhYnMucXVlcnkoeyBhY3RpdmU6IHRydWUsIHdpbmRvd0lkIH0pO1xuICAgICAgICAgICAgY29uc3QgdXJsID0gdGFiPy51cmw7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSB1cmwgPyBwYWdlS2V5KHVybCkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBhd2FpdCBjaHJvbWUucnVudGltZS5zZW5kTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgdHlwZTogTVNHX1RZUEUuQUNUSVZFX1RBQl9DSEFOR0VELFxuICAgICAgICAgICAgICAgIHBheWxvYWQ6IHsgdGFiSWQsIHdpbmRvd0lkLCB1cmwsIHBhZ2VLZXk6IGtleSB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2gge1xuICAgICAgICAgICAgLyogbm8tb3AgKi9cbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gUmVsb2FkL3RyYW5zaXRpb24gZGV0ZWN0aW9uIHdpdGhpbiB0aGUgc2FtZSB0YWJcbiAgICBjb25zdCBvblVwZGF0ZWQgPSBhc3luYyAodGFiSWQsIGluZm8sIHRhYikgPT4ge1xuICAgICAgICBpZiAoIXRhYj8uYWN0aXZlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAoaW5mby5zdGF0dXMgPT09ICdsb2FkaW5nJyB8fCB0eXBlb2YgaW5mby51cmwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IHRhYi51cmw7XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gdXJsID8gcGFnZUtleSh1cmwpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGF3YWl0IGNocm9tZS5ydW50aW1lLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogTVNHX1RZUEUuQUNUSVZFX1RBQl9DSEFOR0VELFxuICAgICAgICAgICAgICAgICAgICBwYXlsb2FkOiB7IHRhYklkLCB3aW5kb3dJZDogdGFiLndpbmRvd0lkLCB1cmwsIHBhZ2VLZXk6IGtleSB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2gge1xuICAgICAgICAgICAgICAgIC8qIG5vLW9wICovXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNocm9tZS50YWJzLm9uQWN0aXZhdGVkLmFkZExpc3RlbmVyKG9uQWN0aXZhdGVkKTtcbiAgICBjaHJvbWUudGFicy5vblVwZGF0ZWQuYWRkTGlzdGVuZXIob25VcGRhdGVkKTtcbn1cbiIsImltcG9ydCB7IENIQU5ORUwgfSBmcm9tICdAY29tbW9uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBQYW5lbEFwaSB9IGZyb20gJy4vYXBpJztcbmltcG9ydCB7IFBvcnRScGMgfSBmcm9tICcuL3BvcnRfcnBjJztcbi8qKlxuICogSW5qZWN0cyB0aGUgY29udGVudCBzY3JpcHQgaW50byB0aGUgdGFiIGlmIG5lZWRlZCwgYW5kXG4gKiBpbml0aWFsaXplcyB0aGUgUG9ydCBjb25uZWN0aW9uIGFuZCBSUEMgZm9yIFBhbmVsIOKGlCBDb250ZW50LlxuICpcbiAqIEBwYXJhbSB0YWJJZCAtIFRhcmdldCB0YWIgaWRcbiAqIEByZXR1cm5zIEEgY29ubmVjdGlvbiBvYmplY3QgYnVuZGxpbmcgQVBJLCBQb3J0LCBhbmQgUlBDXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb25uZWN0VG9UYWIodGFiSWQpIHtcbiAgICBhd2FpdCBjaHJvbWUuc2NyaXB0aW5nXG4gICAgICAgIC5leGVjdXRlU2NyaXB0KHtcbiAgICAgICAgdGFyZ2V0OiB7IHRhYklkIH0sXG4gICAgICAgIGZpbGVzOiBbJ2NvbnRlbnQvbWFpbi5qcyddLFxuICAgIH0pXG4gICAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgIC8qIElnbm9yZSBpZiBhbHJlYWR5IGluamVjdGVkICovXG4gICAgfSk7XG4gICAgY29uc3QgcG9ydCA9IGNocm9tZS50YWJzLmNvbm5lY3QodGFiSWQsIHsgbmFtZTogQ0hBTk5FTC5QQU5FTF9DT05URU5UIH0pO1xuICAgIGNvbnN0IHJwYyA9IG5ldyBQb3J0UnBjKHBvcnQpO1xuICAgIGNvbnN0IGFwaSA9IG5ldyBQYW5lbEFwaShycGMpO1xuICAgIGNvbnN0IGxpc3RlbmVycyA9IFtdO1xuICAgIHBvcnQub25EaXNjb25uZWN0LmFkZExpc3RlbmVyKCgpID0+IGxpc3RlbmVycy5mb3JFYWNoKChmbikgPT4gZm4oKSkpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGFwaSxcbiAgICAgICAgcG9ydCxcbiAgICAgICAgcnBjLFxuICAgICAgICBvbkRpc2Nvbm5lY3Q6IChjYikgPT4gbGlzdGVuZXJzLnB1c2goY2IpLFxuICAgICAgICBkaXNwb3NlOiAoKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBvcnQuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2gge1xuICAgICAgICAgICAgICAgIC8qIG5vLW9wICovXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbiIsImV4cG9ydCBjb25zdCBJQ09OUyA9IHtcbiAgICBjYXJldERvd246IHtcbiAgICAgICAgZDogJ001LjIzIDcuMjFhLjc1Ljc1IDAgMDExLjA2LjAyTDEwIDEwLjkzOWwzLjcxLTMuNzFhLjc1Ljc1IDAgMTExLjA2IDEuMDYyTDEwLjUzIDEyLjUzYS43NS43NSAwIDAxLTEuMDYgMEw1LjIzIDguMjdhLjc1Ljc1IDAgMDEuMDItMS4wNnonLFxuICAgICAgICB2aWV3Qm94OiAnMCAwIDIwIDIwJyxcbiAgICB9LFxuICAgIGNhcmV0RG93bkZpbGw6IHtcbiAgICAgICAgZDogJ003LjI0NyAxMS4xNCAyLjQ1MSA1LjY1OEMxLjg4NSA1LjAxMyAyLjM0NSA0IDMuMjA0IDRoOS41OTJhMSAxIDAgMCAxIC43NTMgMS42NTlsLTQuNzk2IDUuNDhhMSAxIDAgMCAxLTEuNTA2IDB6JyxcbiAgICAgICAgdmlld0JveDogJzAgMCAxNiAxNicsXG4gICAgfSxcbiAgICBjYXJldFJpZ2h0OiB7XG4gICAgICAgIGQ6ICdNNy4yOTMgMTQuNzA3YTEgMSAwIDAxLTEuNDE0LTEuNDE0TDEwLjE3MiA5IDUuODc5IDQuNzA3YTEgMSAwIDAxMS40MTQtMS40MTRsNSA1YTEgMSAwIDAxMCAxLjQxNGwtNSA1eicsXG4gICAgICAgIHZpZXdCb3g6ICcwIDAgMjAgMjAnLFxuICAgIH0sXG4gICAgY2FyZXRSaWdodEZpbGw6IHtcbiAgICAgICAgZDogJ20xMi4xNCA4Ljc1My01LjQ4MiA0Ljc5NmMtLjY0Ni41NjYtMS42NTguMTA2LTEuNjU4LS43NTNWMy4yMDRhMSAxIDAgMCAxIDEuNjU5LS43NTNsNS40OCA0Ljc5NmExIDEgMCAwIDEgMCAxLjUwNnonLFxuICAgICAgICB2aWV3Qm94OiAnMCAwIDE2IDE2JyxcbiAgICB9LFxuICAgIHN1Y2Nlc3M6IHtcbiAgICAgICAgZDogJ00xNiA4QTggOCAwIDEgMSAwIDhhOCA4IDAgMCAxIDE2IDBtLTMuOTctMy4wM2EuNzUuNzUgMCAwIDAtMS4wOC4wMjJMNy40NzcgOS40MTcgNS4zODQgNy4zMjNhLjc1Ljc1IDAgMCAwLTEuMDYgMS4wNkw2Ljk3IDExLjAzYS43NS43NSAwIDAgMCAxLjA3OS0uMDJsMy45OTItNC45OWEuNzUuNzUgMCAwIDAtLjAxLTEuMDV6JyxcbiAgICAgICAgdmlld0JveDogJzAgMCAxNiAxNicsXG4gICAgfSxcbiAgICBlcnJvcjoge1xuICAgICAgICBkOiAnTTE2IDhBOCA4IDAgMSAxIDAgOGE4IDggMCAwIDEgMTYgME04IDRhLjkwNS45MDUgMCAwIDAtLjkuOTk1bC4zNSAzLjUwN2EuNTUyLjU1MiAwIDAgMCAxLjEgMGwuMzUtMy41MDdBLjkwNS45MDUgMCAwIDAgOCA0bS4wMDIgNmExIDEgMCAxIDAgMCAyIDEgMSAwIDAgMCAwLTInLFxuICAgICAgICB2aWV3Qm94OiAnMCAwIDE2IDE2JyxcbiAgICB9LFxuICAgIHdhcm46IHtcbiAgICAgICAgZDogJ005LjA0OSAyLjkyN2ExLjUgMS41IDAgMDEyLjkwMiAwbDYuNDEgMTEuOTRBMS41IDEuNSAwIDAxMTcuMDEgMTdIMi45OWExLjUgMS41IDAgMDEtMS4zNTEtMi4xMzNsNi40MS0xMS45NHpNMTEgMTNhMSAxIDAgMTAtMiAwIDEgMSAwIDAwMiAwem0tMS0yYTEgMSAwIDAwMS0xVjdhMSAxIDAgMTAtMiAwdjNhMSAxIDAgMDAxIDF6JyxcbiAgICAgICAgdmlld0JveDogJzAgMCAyMCAyMCcsXG4gICAgfSxcbiAgICBjb21tZW50OiB7XG4gICAgICAgIGQ6ICdNMCAyYTIgMiAwIDAgMSAyLTJoMTJhMiAyIDAgMCAxIDIgMnY4YTIgMiAwIDAgMS0yIDJINC40MTRhMSAxIDAgMCAwLS43MDcuMjkzTC44NTQgMTUuMTQ2QS41LjUgMCAwIDEgMCAxNC43OTN6bTUgNGExIDEgMCAxIDAtMiAwIDEgMSAwIDAgMCAyIDBtNCAwYTEgMSAwIDEgMC0yIDAgMSAxIDAgMCAwIDIgMG0zIDFhMSAxIDAgMSAwIDAtMiAxIDEgMCAwIDAgMCAyJyxcbiAgICAgICAgdmlld0JveDogJzAgMCAxNiAxNicsXG4gICAgfSxcbiAgICByZW1vdmU6IHtcbiAgICAgICAgZDogJ003IDNhMSAxIDAgMCAxIDEtMWg0YTEgMSAwIDAgMSAxIDF2MWgzYTEgMSAwIDEgMSAwIDJoLTFsLTEgMTBhMiAyIDAgMCAxLTIgMkg4YTIgMiAwIDAgMS0yLTJMNSA2SDRhMSAxIDAgMSAxIDAtMmgzVjNabTEgM2ExIDEgMCAwIDAtMSAxdjhhMSAxIDAgMSAwIDIgMFY3YTEgMSAwIDAgMC0xLTFabTQgMGExIDEgMCAwIDAtMSAxdjhhMSAxIDAgMSAwIDIgMFY3YTEgMSAwIDAgMC0xLTFaJyxcbiAgICAgICAgdmlld0JveDogJzAgMCAyMCAyMCcsXG4gICAgfSxcbiAgICBleHBvcnQ6IHtcbiAgICAgICAgZDogW1xuICAgICAgICAgICAgJ00uNSA5LjlhLjUuNSAwIDAgMSAuNS41djIuNWExIDEgMCAwIDAgMSAxaDEyYTEgMSAwIDAgMCAxLTF2LTIuNWEuNS41IDAgMCAxIDEgMHYyLjVhMiAyIDAgMCAxLTIgMkgyYTIgMiAwIDAgMS0yLTJ2LTIuNWEuNS41IDAgMCAxIC41LS41JyxcbiAgICAgICAgICAgICdNNy42NDYgMS4xNDZhLjUuNSAwIDAgMSAuNzA4IDBsMyAzYS41LjUgMCAwIDEtLjcwOC43MDhMOC41IDIuNzA3VjExLjVhLjUuNSAwIDAgMS0xIDBWMi43MDdMNS4zNTQgNC44NTRhLjUuNSAwIDEgMS0uNzA4LS43MDh6JyxcbiAgICAgICAgXSxcbiAgICAgICAgdmlld0JveDogJzAgMCAxNiAxNicsXG4gICAgfSxcbiAgICBjbG9zZToge1xuICAgICAgICBkOiAnTTUuMjMgNS4yM2EuNzUuNzUgMCAwIDEgMS4wNiAwTDEwIDguOTRsMy43MS0zLjcxYS43NS43NSAwIDEgMSAxLjA2IDEuMDZMMTEuMDYgMTBsMy43MSAzLjcxYS43NS43NSAwIDEgMS0xLjA2IDEuMDZMMTAgMTEuMDZsLTMuNzEgMy43MWEuNzUuNzUgMCAxIDEtMS4wNi0xLjA2TDguOTQgMTAgNS4yMyA2LjI5YS43NS43NSAwIDAgMSAwLTEuMDZaJyxcbiAgICAgICAgdmlld0JveDogJzAgMCAyMCAyMCcsXG4gICAgfSxcbn07XG5leHBvcnQgZnVuY3Rpb24gZ2V0SWNvbihuYW1lKSB7XG4gICAgY29uc3QgeyBkLCB2aWV3Qm94ID0gJzAgMCAyMCAyMCcgfSA9IElDT05TW25hbWVdO1xuICAgIHJldHVybiB7IGQsIHZpZXdCb3ggfTtcbn1cbiIsImltcG9ydCBpMThuIGZyb20gJ0Bjb21tb24vaTE4bic7XG5pbXBvcnQgeyBnZXRJY29uIH0gZnJvbSAnQGNvbW1vbi9pY29ucyc7XG5pbXBvcnQgeyBpc0l0ZW1Db2xvciwgaXNJdGVtUG9zaXRpb24sIGlzSXRlbVNoYXBlLCBpc0xhYmVsRm9ybWF0LCBVTkdST1VQRUQsIFVOR1JPVVBFRF9WQUxVRSwgfSBmcm9tICdAY29tbW9uL3R5cGVzJztcbmltcG9ydCB7IGdldFN0YXR1c01lc3NhZ2UsIFNUQVRVUywgU1RBVFVTX0NMQVNTX0JZX0tFWSB9IGZyb20gJ0BwYW5lbC90eXBlcy9zdGF0dXMnO1xuaW1wb3J0IHsgVUlFdmVudFR5cGUgfSBmcm9tICcuLi90eXBlcy91aV9ldmVudF90eXBlcyc7XG5mdW5jdGlvbiBieUxhYmVsVGhlbklkKGEsIGIpIHtcbiAgICBpZiAoYS5sYWJlbCAhPT0gYi5sYWJlbClcbiAgICAgICAgcmV0dXJuIGEubGFiZWwgLSBiLmxhYmVsO1xuICAgIHJldHVybiBhLmlkIC0gYi5pZDtcbn1cbmV4cG9ydCBjbGFzcyBQYW5lbFZpZXcge1xuICAgIGRvYztcbiAgICBsaXN0ZW5lcnMgPSB7fTtcbiAgICBlbHM7XG4gICAgTkVXX0dST1VQID0gJ19fbmV3Z3JvdXBfXyc7XG4gICAgSE9WRVJfT1VUX0RFTEFZID0gMTAwMDtcbiAgICBkcmFnRWwgPSBudWxsO1xuICAgIGRyYWdTdGFydFBhcmVudCA9IG51bGw7XG4gICAgZHJhZ1N0YXJ0SW5kZXggPSAtMTtcbiAgICBob3Zlck91dFRpbWVyID0gbnVsbDtcbiAgICBjb2xsYXBzZWRHcm91cHMgPSBuZXcgU2V0KCk7XG4gICAgVE9BU1RfQVVUT19ESVNNSVNTID0gMTAwMDA7XG4gICAgY29uc3RydWN0b3IoZG9jKSB7XG4gICAgICAgIHRoaXMuZG9jID0gZG9jO1xuICAgICAgICBpMThuLmxvY2FsaXplKGRvYyk7XG4gICAgICAgIHRoaXMuZWxzID0ge1xuICAgICAgICAgICAgc3RhdHVzOiB0aGlzLiQoJyNzdGF0dXMnKSxcbiAgICAgICAgICAgIHRvZ2dsZUJ0bjogdGhpcy4kKCcjdG9nZ2xlLXNlbGVjdCcpLFxuICAgICAgICAgICAgdG9nZ2xlSWNvbjogdGhpcy4kKCcjdG9nZ2xlLXNlbGVjdC1pY29uJyksXG4gICAgICAgICAgICB0b2dnbGVMYWJlbDogdGhpcy4kKCcjdG9nZ2xlLXNlbGVjdC1sYWJlbCcpLFxuICAgICAgICAgICAgY2xlYXJCdG46IHRoaXMuJCgnI2NsZWFyJyksXG4gICAgICAgICAgICBjYXB0dXJlQnRuOiB0aGlzLiQoJyNjYXB0dXJlJyksXG4gICAgICAgICAgICBsaXN0OiB0aGlzLiQoJyNzZWxlY3QtbGlzdCcpLFxuICAgICAgICAgICAgZW1wdHk6IHRoaXMuJCgnI3NlbGVjdC1lbXB0eScpLFxuICAgICAgICAgICAgY291bnQ6IHRoaXMuJCgnI3NlbGVjdC1jb3VudCcpLFxuICAgICAgICAgICAgY2FwdHVyZU9wdGlvbnNUb2dnbGU6IHRoaXMuJCgnI2NhcHR1cmUtb3B0aW9ucy10b2dnbGUnKSxcbiAgICAgICAgICAgIGNhcHR1cmVPcHRpb25zUGFuZWw6IHRoaXMuJCgnI2NhcHR1cmUtb3B0aW9ucycpLFxuICAgICAgICAgICAgY2FwdHVyZUZtdFJhZGlvczogdGhpcy4kYWxsKCdpbnB1dFtuYW1lPVwiY2FwdHVyZS1mb3JtYXRcIl0nKSxcbiAgICAgICAgICAgIGNhcHR1cmVBcmVhUmFkaW9zOiB0aGlzLiRhbGwoJ2lucHV0W25hbWU9XCJjYXB0dXJlLWFyZWFcIl0nKSxcbiAgICAgICAgICAgIGpwZWdPbmx5RWxzOiB0aGlzLiRhbGwoJy5qcGVnLW9ubHknKSxcbiAgICAgICAgICAgIGpwZWdRdWFsaXR5UmFuZ2U6IHRoaXMuJCgnI2pwZWctcXVhbGl0eS1yYW5nZScpLFxuICAgICAgICAgICAganBlZ1F1YWxpdHlOdW1iZXI6IHRoaXMuJCgnI2pwZWctcXVhbGl0eS1udW1iZXInKSxcbiAgICAgICAgICAgIGNhcHR1cmVTY2FsZVJhbmdlOiB0aGlzLiQoJyNjYXB0dXJlLXNjYWxlLXJhbmdlJyksXG4gICAgICAgICAgICBjYXB0dXJlU2NhbGVOdW1iZXI6IHRoaXMuJCgnI2NhcHR1cmUtc2NhbGUtbnVtYmVyJyksXG4gICAgICAgICAgICBiYWRnZVNpemVSYW5nZTogdGhpcy4kKCcjYmFkZ2Utc2l6ZS1yYW5nZScpLFxuICAgICAgICAgICAgYmFkZ2VTaXplTnVtYmVyOiB0aGlzLiQoJyNiYWRnZS1zaXplLW51bWJlcicpLFxuICAgICAgICAgICAgYmFkZ2VDb2xvckJ1dHRvbnM6IHRoaXMuJGFsbCgnI2JhZGdlLWNvbG9yLXBvcCBidXR0b24nKSxcbiAgICAgICAgICAgIGJhZGdlQ29sb3JMYWJlbDogdGhpcy4kKCcjYmFkZ2UtY29sb3ItbGFiZWwnKSxcbiAgICAgICAgICAgIGJhZGdlQ29sb3JEb3Q6IHRoaXMuJCgnI2JhZGdlLWNvbG9yLWRvdCcpLFxuICAgICAgICAgICAgYmFkZ2VTaGFwZVNlbGVjdDogdGhpcy4kKCcjYmFkZ2Utc2hhcGUtc2VsZWN0JyksXG4gICAgICAgICAgICBiYWRnZUxhYmVsRm9ybWF0U2VsZWN0OiB0aGlzLiQoJyNiYWRnZS1sYWJlbC1mb3JtYXQtc2VsZWN0JyksXG4gICAgICAgICAgICBiYWRnZVZpc2libGVTZWxlY3Q6IHRoaXMuJCgnI2JhZGdlLXZpc2libGUtc2VsZWN0JyksXG4gICAgICAgICAgICBiYWRnZURlbGV0ZUJ1dHRvbjogdGhpcy4kKCcjYmFkZ2UtZGVsZXRlLWJ1dHRvbicpLFxuICAgICAgICAgICAgYmFkZ2VQb3NpdGlvbkJ1dHRvbnM6IHRoaXMuJGFsbCgnI2JhZGdlLXBvc2l0aW9uLXBvcCBidXR0b24nKSxcbiAgICAgICAgICAgIGJhZGdlUG9zaXRpb25MYWJlbDogdGhpcy4kKCcjYmFkZ2UtcG9zaXRpb24tbGFiZWwnKSxcbiAgICAgICAgICAgIGJhZGdlR3JvdXBTZWxlY3Q6IHRoaXMuJCgnI2JhZGdlLWdyb3VwLXNlbGVjdCcpLFxuICAgICAgICAgICAgZ3JvdXBOYW1lTW9kYWw6IHRoaXMuJCgnI2dyb3VwLW5hbWUtbW9kYWwnKSxcbiAgICAgICAgICAgIGdyb3VwTmFtZUlucHV0OiB0aGlzLiQoJyNncm91cC1uYW1lLWlucHV0JyksXG4gICAgICAgICAgICBncm91cE5hbWVDYW5jZWxCdG46IHRoaXMuJCgnI2dyb3VwLW5hbWUtY2FuY2VsLWJ0bicpLFxuICAgICAgICAgICAgZ3JvdXBOYW1lQ3JlYXRlbEJ0bjogdGhpcy4kKCcjZ3JvdXAtbmFtZS1jcmVhdGUtYnRuJyksXG4gICAgICAgICAgICBpdGVtQ29tbWVudE1vZGFsOiB0aGlzLiQoJyNpdGVtLWNvbW1lbnQtbW9kYWwnKSxcbiAgICAgICAgICAgIGl0ZW1Db21tZW50SW5wdXQ6IHRoaXMuJCgnI2l0ZW0tY29tbWVudC1pbnB1dCcpLFxuICAgICAgICAgICAgaXRlbUNvbW1lbnRJZElucHV0OiB0aGlzLiQoJyNpdGVtLWNvbW1lbnQtaWQtaW5wdXQnKSxcbiAgICAgICAgICAgIGl0ZW1Db21tZW50Q2FuY2VsQnRuOiB0aGlzLiQoJyNpdGVtLWNvbW1lbnQtY2FuY2VsLWJ0bicpLFxuICAgICAgICAgICAgaXRlbUNvbW1lbnRBcHBseUJ0bjogdGhpcy4kKCcjaXRlbS1jb21tZW50LWFwcGx5LWJ0bicpLFxuICAgICAgICAgICAgc2VsZWN0SXRlbUFsbENoZWNrYm94OiB0aGlzLiQoJ2lucHV0W3R5cGU9XCJjaGVja2JveFwiXVtuYW1lPVwiaXRlbS1zZWxlY3RcIl1bdmFsdWU9XCJhbGxcIl0nKSxcbiAgICAgICAgICAgIHNldHRpbmdNb2RhbDogdGhpcy4kKCcjc2V0dGluZy1tb2RhbCcpLFxuICAgICAgICAgICAgc2V0dGluZ0J1dHRvbjogdGhpcy4kKCcjc2V0dGluZy1idXR0b24nKSxcbiAgICAgICAgICAgIHNldHRpbmdDbG9zZUJ1dHRvbjogdGhpcy4kKCcjc2V0dGluZy1jbG9zZS1idG4nKSxcbiAgICAgICAgICAgIHRoZW1lTGlnaHRCdG46IHRoaXMuJCgnI3RoZW1lLWxpZ2h0LWJ0bicpLFxuICAgICAgICAgICAgdGhlbWVEYXJrQnRuOiB0aGlzLiQoJyN0aGVtZS1kYXJrLWJ0bicpLFxuICAgICAgICAgICAgdGhlbWVEZXZpY2VCdG46IHRoaXMuJCgnI3RoZW1lLWRldmljZS1idG4nKSxcbiAgICAgICAgICAgIGltcG9ydEZpbGVJbnB1dDogdGhpcy4kKCcjaW1wb3J0LWZpbGUtaW5wdXQnKSxcbiAgICAgICAgICAgIGltcG9ydEJ0bjogdGhpcy4kKCcjaW1wb3J0LWJ0bicpLFxuICAgICAgICAgICAgc3RvcmVDb3VudDogdGhpcy4kKCcjc3RvcmUtY291bnQnKSxcbiAgICAgICAgICAgIHN0b3JlTGlzdDogdGhpcy4kKCcjc3RvcmUtbGlzdCcpLFxuICAgICAgICAgICAgc3RvcmVFbXB0eTogdGhpcy4kKCcjc3RvcmUtZW1wdHknKSxcbiAgICAgICAgICAgIHRvYXN0UGFyZW50OiB0aGlzLiQoJyN0b2FzdC1wYXJlbnQnKSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5lbHMudG9nZ2xlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5lbWl0KFVJRXZlbnRUeXBlLlRPR0dMRV9TRUxFQ1QsIHVuZGVmaW5lZCkpO1xuICAgICAgICB0aGlzLmVscy5jbGVhckJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHRoaXMuZW1pdChVSUV2ZW50VHlwZS5DTEVBUiwgdW5kZWZpbmVkKSk7XG4gICAgICAgIHRoaXMuZWxzLmNhcHR1cmVCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLmVtaXQoVUlFdmVudFR5cGUuQ0FQVFVSRSwgdW5kZWZpbmVkKSk7XG4gICAgICAgIC8vID09PSBDYXB0dXJlIG9wdGlvbnMgPT09XG4gICAgICAgIHRoaXMuZWxzLmNhcHR1cmVPcHRpb25zVG9nZ2xlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5lbWl0KFVJRXZlbnRUeXBlLlRPR0dMRV9DQVBUVVJFX1BBTkVMLCB1bmRlZmluZWQpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lbHMuY2FwdHVyZUZtdFJhZGlvcy5mb3JFYWNoKChyKSA9PiByLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUXVhbGl0eVZpc2liaWxpdHkoKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdChVSUV2ZW50VHlwZS5DQVBUVVJFX0ZPUk1BVF9DSEFOR0UsIHsgZm9ybWF0OiB0aGlzLmdldFNlbGVjdGVkQ2FwdHVyZUZvcm1hdCgpIH0pO1xuICAgICAgICB9KSk7XG4gICAgICAgIHRoaXMuZWxzLmNhcHR1cmVBcmVhUmFkaW9zLmZvckVhY2goKHIpID0+IHIuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5lbWl0KFVJRXZlbnRUeXBlLkNBUFRVUkVfQVJFQV9DSEFOR0UsIHsgYXJlYTogdGhpcy5nZXRTZWxlY3RlZENhcHR1cmVBcmVhKCkgfSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5iaW5kU3luYyh0aGlzLmVscy5qcGVnUXVhbGl0eVJhbmdlLCB0aGlzLmVscy5qcGVnUXVhbGl0eU51bWJlciwgKHYpID0+IHRoaXMuZW1pdChVSUV2ZW50VHlwZS5DQVBUVVJFX1FVQUxJVFlfQ0hBTkdFLCB7IHF1YWxpdHk6IHYgfSkpO1xuICAgICAgICB0aGlzLmJpbmRTeW5jKHRoaXMuZWxzLmNhcHR1cmVTY2FsZVJhbmdlLCB0aGlzLmVscy5jYXB0dXJlU2NhbGVOdW1iZXIsICh2KSA9PiB0aGlzLmVtaXQoVUlFdmVudFR5cGUuQ0FQVFVSRV9TQ0FMRV9DSEFOR0UsIHsgc2NhbGU6IHYgfSkpO1xuICAgICAgICAvLyA9PT0gQmFkZ2UgPT09XG4gICAgICAgIHRoaXMuYmluZFN5bmModGhpcy5lbHMuYmFkZ2VTaXplUmFuZ2UsIHRoaXMuZWxzLmJhZGdlU2l6ZU51bWJlcik7XG4gICAgICAgIGNvbnN0IGZpcmVTaXplID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdiA9IE51bWJlcih0aGlzLmVscy5iYWRnZVNpemVOdW1iZXIudmFsdWUpO1xuICAgICAgICAgICAgaWYgKE51bWJlci5pc0Zpbml0ZSh2KSlcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoVUlFdmVudFR5cGUuQkFER0VfU0laRV9DSEFOR0UsIHsgc2l6ZTogdiB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5lbHMuYmFkZ2VTaXplUmFuZ2UuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZmlyZVNpemUpO1xuICAgICAgICB0aGlzLmVscy5iYWRnZVNpemVOdW1iZXIuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZmlyZVNpemUpO1xuICAgICAgICB0aGlzLmVscy5iYWRnZUNvbG9yQnV0dG9ucy5mb3JFYWNoKChidG4pID0+IHtcbiAgICAgICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByYXcgPSBidG4uZGF0YXNldC5jb2xvck5hbWUgPz8gJyc7XG4gICAgICAgICAgICAgICAgY29uc3QgY29sb3IgPSBpc0l0ZW1Db2xvcihyYXcpID8gcmF3IDogJ0JsdWUnO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChVSUV2ZW50VHlwZS5CQURHRV9DT0xPUl9TRUxFQ1QsIHsgY29sb3IgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZWxzLmJhZGdlU2hhcGVTZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdiA9IHRoaXMuZWxzLmJhZGdlU2hhcGVTZWxlY3QudmFsdWUgPz8gbnVsbDtcbiAgICAgICAgICAgIGNvbnN0IHNoYXBlID0gaXNJdGVtU2hhcGUodikgPyB2IDogJ2NpcmNsZSc7XG4gICAgICAgICAgICB0aGlzLmVtaXQoVUlFdmVudFR5cGUuQkFER0VfU0hBUEVfQ0hBTkdFLCB7IHNoYXBlIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lbHMuYmFkZ2VMYWJlbEZvcm1hdFNlbGVjdC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2ID0gdGhpcy5lbHMuYmFkZ2VMYWJlbEZvcm1hdFNlbGVjdC52YWx1ZSA/PyBudWxsO1xuICAgICAgICAgICAgY29uc3QgbGFiZWxGb3JtYXQgPSBpc0xhYmVsRm9ybWF0KHYpID8gdiA6ICdOdW1iZXJzJztcbiAgICAgICAgICAgIHRoaXMuZW1pdChVSUV2ZW50VHlwZS5CQURHRV9MQUJFTF9GT1JNQVRfQ0hBTkdFLCB7IGxhYmVsRm9ybWF0IH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lbHMuYmFkZ2VWaXNpYmxlU2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZpc2libGUgPSB0aGlzLmVscy5iYWRnZVZpc2libGVTZWxlY3QudmFsdWUgPT09ICd0cnVlJztcbiAgICAgICAgICAgIHRoaXMuZW1pdChVSUV2ZW50VHlwZS5CQURHRV9WSVNJQkxFX0NIQU5HRSwgeyB2aXNpYmxlIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lbHMuYmFkZ2VEZWxldGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoVUlFdmVudFR5cGUuQkFER0VfREVMRVRFLCB1bmRlZmluZWQpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lbHMuYmFkZ2VQb3NpdGlvbkJ1dHRvbnMuZm9yRWFjaCgoYnRuKSA9PiB7XG4gICAgICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmF3ID0gYnRuLmRhdGFzZXQucG9zaXRpb25OYW1lID8/ICcnO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gaXNJdGVtUG9zaXRpb24ocmF3KSA/IHJhdyA6ICdsZWZ0LXRvcC1vdXRzaWRlJztcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoVUlFdmVudFR5cGUuQkFER0VfUE9TSVRJT05fU0VMRUNULCB7IHBvc2l0aW9uIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVscy5iYWRnZUdyb3VwU2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5lbHMuYmFkZ2VHcm91cFNlbGVjdC52YWx1ZSA/PyBVTkdST1VQRUQ7XG4gICAgICAgICAgICBjb25zdCBncm91cCA9IHZhbHVlID09PSBVTkdST1VQRUQgPyBVTkdST1VQRURfVkFMVUUgOiB2YWx1ZTtcbiAgICAgICAgICAgIGlmIChncm91cCA9PT0gdGhpcy5ORVdfR1JPVVApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVscy5ncm91cE5hbWVNb2RhbC5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVtaXQoVUlFdmVudFR5cGUuU0VUX0dST1VQLCB7IGdyb3VwIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lbHMuZ3JvdXBOYW1lQ2FuY2VsQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5lbHMuZ3JvdXBOYW1lTW9kYWwuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVscy5ncm91cE5hbWVDcmVhdGVsQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmVscy5ncm91cE5hbWVJbnB1dC52YWx1ZSA/PyBVTkdST1VQRUQ7XG4gICAgICAgICAgICBjb25zdCBncm91cCA9IHZhbHVlID09PSBVTkdST1VQRUQgfHwgdmFsdWUgPT09IHRoaXMuTkVXX0dST1VQID8gVU5HUk9VUEVEX1ZBTFVFIDogdmFsdWU7XG4gICAgICAgICAgICB0aGlzLmVtaXQoVUlFdmVudFR5cGUuU0VUX0dST1VQLCB7IGdyb3VwIH0pO1xuICAgICAgICAgICAgdGhpcy5lbHMuZ3JvdXBOYW1lTW9kYWwuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICAgICAgICB0aGlzLmVscy5ncm91cE5hbWVJbnB1dC52YWx1ZSA9ICcnO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lbHMuaXRlbUNvbW1lbnRDYW5jZWxCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVscy5pdGVtQ29tbWVudE1vZGFsLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lbHMuaXRlbUNvbW1lbnRBcHBseUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbW1lbnQgPSB0aGlzLmVscy5pdGVtQ29tbWVudElucHV0LnZhbHVlO1xuICAgICAgICAgICAgY29uc3QgaWQgPSBOdW1iZXIodGhpcy5lbHMuaXRlbUNvbW1lbnRJZElucHV0LnZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdChVSUV2ZW50VHlwZS5JVEVNX0NPTU1FTlRfQVBQTFksIHsgaWQsIGNvbW1lbnQgfSk7XG4gICAgICAgICAgICB0aGlzLmVscy5pdGVtQ29tbWVudE1vZGFsLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lbHMuc2V0dGluZ0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZWxzLnNldHRpbmdNb2RhbC5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdChVSUV2ZW50VHlwZS5TRVRUSU5HX01PREFMX1NIT1csIHVuZGVmaW5lZCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVscy5zZXR0aW5nQ2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVscy5zZXR0aW5nTW9kYWwuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVscy50aGVtZUxpZ2h0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hcHBseVRoZW1lKCdsaWdodCcpO1xuICAgICAgICAgICAgdGhpcy5lbWl0KFVJRXZlbnRUeXBlLlVQREFURV9USEVNRSwgeyB0aGVtZTogJ2xpZ2h0JyB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZWxzLnRoZW1lRGFya0J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYXBwbHlUaGVtZSgnZGFyaycpO1xuICAgICAgICAgICAgdGhpcy5lbWl0KFVJRXZlbnRUeXBlLlVQREFURV9USEVNRSwgeyB0aGVtZTogJ2RhcmsnIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lbHMudGhlbWVEZXZpY2VCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFwcGx5VGhlbWUoJ2RldmljZScpO1xuICAgICAgICAgICAgdGhpcy5lbWl0KFVJRXZlbnRUeXBlLlVQREFURV9USEVNRSwgeyB0aGVtZTogJ2RldmljZScgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVscy5pbXBvcnRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAvLyBJZiBubyBmaWxlIGlzIHNlbGVjdGVkLCBvcGVuIHRoZSBkaWFsb2dcbiAgICAgICAgICAgIGlmICghdGhpcy5lbHMuaW1wb3J0RmlsZUlucHV0LmZpbGVzIHx8IHRoaXMuZWxzLmltcG9ydEZpbGVJbnB1dC5maWxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVscy5pbXBvcnRGaWxlSW5wdXQuY2xpY2soKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBmaWxlID0gdGhpcy5lbHMuaW1wb3J0RmlsZUlucHV0LmZpbGVzWzBdO1xuICAgICAgICAgICAgdGhpcy5lbWl0KFVJRXZlbnRUeXBlLklNUE9SVF9TQ1JFQU5fU1RBVEVfRklMRSwgeyBmaWxlIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy51cGRhdGVRdWFsaXR5VmlzaWJpbGl0eSgpO1xuICAgICAgICB0aGlzLmVscy5zZWxlY3RJdGVtQWxsQ2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkID0gZS50YXJnZXQuY2hlY2tlZDtcbiAgICAgICAgICAgIHRoaXMuZW1pdChVSUV2ZW50VHlwZS5JVEVNX1NFTEVDVElPTl9DSEFOR0VELCB7IGFsbENoZWNrOiBzZWxlY3RlZCB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZWxzLmxpc3QuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmVudGVyJywgKCkgPT4gdGhpcy5jYW5jZWxIb3Zlck91dCgpKTtcbiAgICAgICAgdGhpcy5lbHMubGlzdC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVybGVhdmUnLCAoKSA9PiB0aGlzLnNjaGVkdWxlSG92ZXJPdXQoKSk7XG4gICAgICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVybGVhdmUnLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNhbmNlbEhvdmVyT3V0KCk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoVUlFdmVudFR5cGUuSVRFTV9IT1ZFUl9PVVQsIHVuZGVmaW5lZCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBvbih0eXBlLCBoYW5kbGVyKSB7XG4gICAgICAgIGNvbnN0IGFyciA9ICh0aGlzLmxpc3RlbmVyc1t0eXBlXSA/Pz0gW10pO1xuICAgICAgICBhcnIucHVzaChoYW5kbGVyKTtcbiAgICB9XG4gICAgZW1pdCh0eXBlLCBlKSB7XG4gICAgICAgIGNvbnN0IGFyciA9IHRoaXMubGlzdGVuZXJzW3R5cGVdO1xuICAgICAgICBhcnI/LmZvckVhY2goKGgpID0+IGgoZSkpO1xuICAgIH1cbiAgICByZW5kZXIobW9kZWwpIHtcbiAgICAgICAgdGhpcy5hcHBseVRvYXN0TWVzc2FnZXMobW9kZWwudG9hc3RNZXNzYWdlcyk7XG4gICAgICAgIHRoaXMuYXBwbHlUaGVtZShtb2RlbC50aGVtZSk7XG4gICAgICAgIHRoaXMuYXBwbHlTdG9yZShtb2RlbC5wYWdlS2V5cyk7XG4gICAgICAgIHRoaXMucmVuZGVyU3RhdHVzKG1vZGVsLnN0YXR1cyk7XG4gICAgICAgIHRoaXMucmVuZGVyVG9nZ2xlKG1vZGVsLnNlbGVjdGlvbkVuYWJsZWQpO1xuICAgICAgICB0aGlzLnJlbmRlckxpc3QobW9kZWwuaXRlbXMsIG1vZGVsLnNlbGVjdEl0ZW1zLCBtb2RlbC5taXNzaW5nSWRzKTtcbiAgICAgICAgdGhpcy5zZWxlY3RSYWRpb0J5VmFsdWUodGhpcy5lbHMuY2FwdHVyZUZtdFJhZGlvcywgbW9kZWwuY2FwdHVyZS5mb3JtYXQpO1xuICAgICAgICB0aGlzLnNlbGVjdFJhZGlvQnlWYWx1ZSh0aGlzLmVscy5jYXB0dXJlQXJlYVJhZGlvcywgbW9kZWwuY2FwdHVyZS5hcmVhKTtcbiAgICAgICAgdGhpcy5lbHMuanBlZ1F1YWxpdHlOdW1iZXIudmFsdWUgPSBTdHJpbmcobW9kZWwuY2FwdHVyZS5xdWFsaXR5KTtcbiAgICAgICAgdGhpcy5lbHMuanBlZ1F1YWxpdHlSYW5nZS52YWx1ZSA9IFN0cmluZyhtb2RlbC5jYXB0dXJlLnF1YWxpdHkpO1xuICAgICAgICB0aGlzLmVscy5jYXB0dXJlU2NhbGVOdW1iZXIudmFsdWUgPSBTdHJpbmcobW9kZWwuY2FwdHVyZS5zY2FsZSk7XG4gICAgICAgIHRoaXMuZWxzLmNhcHR1cmVTY2FsZVJhbmdlLnZhbHVlID0gU3RyaW5nKG1vZGVsLmNhcHR1cmUuc2NhbGUpO1xuICAgICAgICB0aGlzLnVwZGF0ZVF1YWxpdHlWaXNpYmlsaXR5KG1vZGVsLmNhcHR1cmUuZm9ybWF0KTtcbiAgICAgICAgdGhpcy5hcHBseUNhcHR1cmVPcHRpb25zVG9nZ2xlVUkobW9kZWwuY2FwdHVyZS5wYW5lbEV4cGFuZGVkKTtcbiAgICAgICAgdGhpcy5lbHMuYmFkZ2VTaXplTnVtYmVyLnZhbHVlID0gU3RyaW5nKG1vZGVsLmRlZmF1bHRTaXplKTtcbiAgICAgICAgdGhpcy5lbHMuYmFkZ2VTaXplUmFuZ2UudmFsdWUgPSBTdHJpbmcobW9kZWwuZGVmYXVsdFNpemUpO1xuICAgICAgICB0aGlzLmFwcGx5QmFkZ2VDb2xvclVJKG1vZGVsLmRlZmF1bHRDb2xvcik7XG4gICAgICAgIHRoaXMuZWxzLmJhZGdlU2hhcGVTZWxlY3QudmFsdWUgPSBtb2RlbC5kZWZhdWx0U2hhcGU7XG4gICAgICAgIHRoaXMuZWxzLmJhZGdlTGFiZWxGb3JtYXRTZWxlY3QudmFsdWUgPSBtb2RlbC5kZWZhdWx0TGFiZWxGb3JtYXQgPz8gJ051bWJlcnMnO1xuICAgICAgICB0aGlzLmVscy5iYWRnZVZpc2libGVTZWxlY3QudmFsdWUgPSBTdHJpbmcobW9kZWwuZGVmYXVsdFZpc2libGUgPz8gJ3RydWUnKTtcbiAgICAgICAgdGhpcy5hcHBseUJhZGdlUG9zaXRvblVJKG1vZGVsLmRlZmF1bHRQb3NpdGlvbik7XG4gICAgICAgIHRoaXMuYXBwbHlCYWRnZUdyb3VwU2VsZWN0VUkodGhpcy5nZXRFeGlzdGluZ0dyb3Vwcyhtb2RlbC5pdGVtcyksIG1vZGVsLmRlZmF1bHRHcm91cCk7XG4gICAgfVxuICAgIHJlbmRlclN0YXR1cyhrZXkpIHtcbiAgICAgICAgY29uc3Qgc3R5bGUgPSBTVEFUVVNfQ0xBU1NfQllfS0VZW2tleV07XG4gICAgICAgIGNvbnN0IGVsID0gdGhpcy5lbHMuc3RhdHVzO1xuICAgICAgICBlbC5jbGFzc05hbWUgPSAnJztcbiAgICAgICAgZWwuY2xhc3NOYW1lID0gYGNvbm5lY3Qtc3RhdHVzICR7c3R5bGV9YDtcbiAgICAgICAgY29uc3QgZG90ID0gdGhpcy5kb2MuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICBkb3QuY2xhc3NMaXN0LmFkZCgnY29ubmVjdC1zdGF0dXMtZG90Jyk7XG4gICAgICAgIGNvbnN0IHRleHQgPSB0aGlzLmRvYy5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgIHRleHQudGV4dENvbnRlbnQgPSBnZXRTdGF0dXNNZXNzYWdlKGtleSk7XG4gICAgICAgIGVsLnJlcGxhY2VDaGlsZHJlbihkb3QsIHRleHQpO1xuICAgICAgICB0aGlzLmRpc2FibGVGb3JtQ29udHJvbHMoa2V5KTtcbiAgICB9XG4gICAgcmVuZGVyVG9nZ2xlKGVuYWJsZWQpIHtcbiAgICAgICAgY29uc3QgaWNvbiA9IHRoaXMuZWxzLnRvZ2dsZUljb247XG4gICAgICAgIGljb24uY2xhc3NOYW1lID0gJyc7XG4gICAgICAgIGljb24uY2xhc3NMaXN0LmFkZCgnc2VsZWN0LXRvZ2dsZS1pY29uJywgZW5hYmxlZCA/ICdiZy1pbmRpZ28tNTAwJyA6ICdiZy1zbGF0ZS0zMDAnKTtcbiAgICAgICAgdGhpcy5lbHMudG9nZ2xlTGFiZWwudGV4dENvbnRlbnQgPSBpMThuLmdldChlbmFibGVkID8gJ3RvZ2dsZV9vbicgOiAndG9nZ2xlX29mZicpO1xuICAgIH1cbiAgICByZW5kZXJMaXN0KGl0ZW1zLCBzZWxlY3RJdGVtcywgbWlzc2luZ0lkcykge1xuICAgICAgICB0aGlzLmVscy5jb3VudC50ZXh0Q29udGVudCA9IFN0cmluZyhpdGVtcy5sZW5ndGgpO1xuICAgICAgICBjb25zdCBhbGxDaGVja2VkID0gaXRlbXMubGVuZ3RoID09PSAwID8gZmFsc2UgOiBpdGVtcy5ldmVyeSgoaXQpID0+IHNlbGVjdEl0ZW1zLmluY2x1ZGVzKGl0LmlkKSk7XG4gICAgICAgIHRoaXMuZWxzLnNlbGVjdEl0ZW1BbGxDaGVja2JveC5jaGVja2VkID0gYWxsQ2hlY2tlZDtcbiAgICAgICAgaWYgKCFpdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuZWxzLmVtcHR5LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICAgICAgICAgICAgdGhpcy5lbHMubGlzdC5yZXBsYWNlQ2hpbGRyZW4oKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVscy5lbXB0eS5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgY29uc3QgZ3JvdXBzID0gdGhpcy5ncm91cEJ5R3JvdXAoaXRlbXMpO1xuICAgICAgICBjb25zdCBncm91cEtleXMgPSBBcnJheS5mcm9tKGdyb3Vwcy5rZXlzKCkpLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICAgIGlmIChhID09PSBVTkdST1VQRUQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgaWYgKGIgPT09IFVOR1JPVVBFRClcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIHJldHVybiBhLmxvY2FsZUNvbXBhcmUoYik7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBmcmFnID0gdGhpcy5kb2MuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgICBmb3IgKGNvbnN0IGdLZXkgb2YgZ3JvdXBLZXlzKSB7XG4gICAgICAgICAgICBjb25zdCBzZWN0aW9uID0gdGhpcy5yZW5kZXJHcm91cFNlY3Rpb24oZ0tleSwgZ3JvdXBzLmdldChnS2V5KSwgc2VsZWN0SXRlbXMsIG1pc3NpbmdJZHMpO1xuICAgICAgICAgICAgZnJhZy5hcHBlbmRDaGlsZChzZWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVscy5saXN0LnJlcGxhY2VDaGlsZHJlbihmcmFnKTtcbiAgICB9XG4gICAgcmVuZGVyR3JvdXBTZWN0aW9uKGdLZXksIGdJdGVtcywgc2VsZWN0SXRlbXMsIG1pc3NpbmdJZHMpIHtcbiAgICAgICAgY29uc3QgaXNDb2xsYXBzZWQgPSB0aGlzLmNvbGxhcHNlZEdyb3Vwcy5oYXMoZ0tleSk7XG4gICAgICAgIGNvbnN0IHNlY3Rpb24gPSB0aGlzLmVsKCdzZWN0aW9uJywgJ3NlbGVjdC1pdGVtLXNlY3Rpb24nKTtcbiAgICAgICAgLy8gaGVhZGVyXG4gICAgICAgIGNvbnN0IGhlYWRlciA9IHRoaXMuZWwoJ2RpdicsICdzZWxlY3QtaXRlbS1oZWFkZXInKTtcbiAgICAgICAgLy8gY2hlY2tib3hcbiAgICAgICAgY29uc3QgY2hlY2tib3hXcmFwID0gdGhpcy5lbCgnZGl2JywgJ3Nwc2stY2hlY2t3cmFwJyk7XG4gICAgICAgIGNvbnN0IGNoZWNrYm94ID0gdGhpcy5lbCgnaW5wdXQnLCAnc3Bzay1jaGVja2JveCBzcHNrLWNoZWNrYm94LS1ub3JtYWwnKTtcbiAgICAgICAgY2hlY2tib3gudHlwZSA9ICdjaGVja2JveCc7XG4gICAgICAgIGNoZWNrYm94Lm5hbWUgPSAnaXRlbS1zZWxlY3QnO1xuICAgICAgICBjaGVja2JveC52YWx1ZSA9IGdLZXkgPT09IFVOR1JPVVBFRCA/IGkxOG4uZ2V0KCdncm91cF91bmdyb3VwZWQnKSA6IGdLZXk7XG4gICAgICAgIGNoZWNrYm94LmNoZWNrZWQgPSBnSXRlbXMuZXZlcnkoKGl0KSA9PiBzZWxlY3RJdGVtcy5pbmNsdWRlcyhpdC5pZCkpO1xuICAgICAgICBjaGVja2JveC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSBlLnRhcmdldC5jaGVja2VkO1xuICAgICAgICAgICAgdGhpcy5lbWl0KFVJRXZlbnRUeXBlLklURU1fU0VMRUNUSU9OX0NIQU5HRUQsIHtcbiAgICAgICAgICAgICAgICBncm91cDogZ0tleSA9PT0gVU5HUk9VUEVEID8gVU5HUk9VUEVEX1ZBTFVFIDogZ0tleSxcbiAgICAgICAgICAgICAgICBpc0NoZWNrOiBzZWxlY3RlZCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tib3hXcmFwLmFwcGVuZChjaGVja2JveCk7XG4gICAgICAgIGNvbnN0IHRpdGxlID0gdGhpcy5lbCgnc3BhbicsICdzZWxlY3QtaXRlbS1naC10aXRsZScsIGdLZXkgPT09IFVOR1JPVVBFRCA/IGkxOG4uZ2V0KCdncm91cF91bmdyb3VwZWQnKSA6IGdLZXkpO1xuICAgICAgICBjb25zdCBsZWZ0ID0gdGhpcy5lbCgnZGl2JywgJ3NlbGVjdC1pdGVtLWdoLWxlZnQnKTtcbiAgICAgICAgbGVmdC5hcHBlbmQoY2hlY2tib3hXcmFwLCB0aXRsZSk7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gdGhpcy5lbCgnc3BhbicsICdzZWxlY3QtaXRlbS1naC1jb3VudCcsIFN0cmluZyhnSXRlbXMubGVuZ3RoKSk7XG4gICAgICAgIGNvbnN0IHRvZ2dsZUJ0biA9IHRoaXMuZWwoJ2J1dHRvbicsICdzZWxlY3QtaXRlbS1naC10b2dnbGUnKTtcbiAgICAgICAgdG9nZ2xlQnRuLnR5cGUgPSAnYnV0dG9uJztcbiAgICAgICAgdG9nZ2xlQnRuLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIFN0cmluZyghaXNDb2xsYXBzZWQpKTtcbiAgICAgICAgY29uc3QgaWNvblNwZWMgPSBpc0NvbGxhcHNlZCA/IGdldEljb24oJ2NhcmV0UmlnaHQnKSA6IGdldEljb24oJ2NhcmV0RG93bicpO1xuICAgICAgICBjb25zdCB0b2dnbGVJY29uID0gdGhpcy5jcmVhdGVTdmdJY29uKGljb25TcGVjLmQsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ2ljb24tc20nLFxuICAgICAgICAgICAgdmlld0JveDogaWNvblNwZWMudmlld0JveCxcbiAgICAgICAgfSk7XG4gICAgICAgIHRvZ2dsZUJ0bi5hcHBlbmQodG9nZ2xlSWNvbik7XG4gICAgICAgIGhlYWRlci5hcHBlbmQobGVmdCwgY291bnQsIHRvZ2dsZUJ0bik7XG4gICAgICAgIC8vIHVsXG4gICAgICAgIGNvbnN0IHVsID0gdGhpcy5lbCgndWwnLCAnc2VsZWN0LWl0ZW0tbGlzdCcpO1xuICAgICAgICBpZiAoaXNDb2xsYXBzZWQpXG4gICAgICAgICAgICB1bC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgdGhpcy5hdHRhY2hVbERuREhhbmRsZXJzKHVsKTtcbiAgICAgICAgZm9yIChjb25zdCBpdCBvZiBnSXRlbXMuc29ydChieUxhYmVsVGhlbklkKSkge1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0Q2hlY2tlZCA9IHNlbGVjdEl0ZW1zLmluY2x1ZGVzKGl0LmlkKTtcbiAgICAgICAgICAgIHVsLmFwcGVuZENoaWxkKHRoaXMucmVuZGVySXRlbShpdCwgc2VsZWN0Q2hlY2tlZCwgbWlzc2luZ0lkcykpO1xuICAgICAgICB9XG4gICAgICAgIHRvZ2dsZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRseUNvbGxhcHNlZCA9IHRoaXMuY29sbGFwc2VkR3JvdXBzLmhhcyhnS2V5KTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50bHlDb2xsYXBzZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbGxhcHNlZEdyb3Vwcy5kZWxldGUoZ0tleSk7XG4gICAgICAgICAgICAgICAgdWwuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3BlYyA9IGdldEljb24oJ2NhcmV0RG93bicpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGljb24gPSB0aGlzLmNyZWF0ZVN2Z0ljb24oc3BlYy5kLCB7XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2ljb24tc20nLFxuICAgICAgICAgICAgICAgICAgICB2aWV3Qm94OiBzcGVjLnZpZXdCb3gsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdG9nZ2xlQnRuLnJlcGxhY2VDaGlsZHJlbihpY29uKTtcbiAgICAgICAgICAgICAgICB0b2dnbGVCdG4uc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY29sbGFwc2VkR3JvdXBzLmFkZChnS2V5KTtcbiAgICAgICAgICAgICAgICB1bC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzcGVjID0gZ2V0SWNvbignY2FyZXRSaWdodCcpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGljb24gPSB0aGlzLmNyZWF0ZVN2Z0ljb24oc3BlYy5kLCB7XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2ljb24tc20nLFxuICAgICAgICAgICAgICAgICAgICB2aWV3Qm94OiBzcGVjLnZpZXdCb3gsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdG9nZ2xlQnRuLnJlcGxhY2VDaGlsZHJlbihpY29uKTtcbiAgICAgICAgICAgICAgICB0b2dnbGVCdG4uc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBzZWN0aW9uLmFwcGVuZChoZWFkZXIsIHVsKTtcbiAgICAgICAgcmV0dXJuIHNlY3Rpb247XG4gICAgfVxuICAgIHJlbmRlckl0ZW0oaXQsIHNlbGVjdENoZWNrZWQsIG1pc3NpbmdJZHMpIHtcbiAgICAgICAgY29uc3QgaXNNaXNzaW5nID0gbWlzc2luZ0lkcy5pbmNsdWRlcyhpdC5pZCk7XG4gICAgICAgIGNvbnN0IGxpQmFzZSA9ICdzZWxlY3QtaXRlbSc7XG4gICAgICAgIGNvbnN0IGxpID0gdGhpcy5lbCgnbGknLCBpc01pc3NpbmcgPyBgZ3JvdXAgJHtsaUJhc2V9IHNlbGVjdC1pdGVtLS13YXJuYCA6IGxpQmFzZSk7XG4gICAgICAgIGxpLmRhdGFzZXQuaWQgPSBTdHJpbmcoaXQuaWQpO1xuICAgICAgICBsaS5kcmFnZ2FibGUgPSB0cnVlO1xuICAgICAgICAvLyBPbmx5IHNvcnRpbmcgd2l0aGluIHRoZSBzYW1lIFVMIGlzIGFsbG93ZWRcbiAgICAgICAgbGkuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ3N0YXJ0JywgKGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZHJhZ0VsID0gbGk7XG4gICAgICAgICAgICB0aGlzLmRyYWdTdGFydFBhcmVudCA9IGxpLnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICB0aGlzLmRyYWdTdGFydEluZGV4ID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChsaS5wYXJlbnRFbGVtZW50Py5jaGlsZHJlbiA/PyBbXSwgbGkpO1xuICAgICAgICAgICAgaWYgKGUuZGF0YVRyYW5zZmVyKVxuICAgICAgICAgICAgICAgIGUuZGF0YVRyYW5zZmVyLmVmZmVjdEFsbG93ZWQgPSAnbW92ZSc7XG4gICAgICAgICAgICBsaS5jbGFzc0xpc3QuYWRkKCdvcGFjaXR5LTYwJyk7XG4gICAgICAgIH0pO1xuICAgICAgICBsaS5hZGRFdmVudExpc3RlbmVyKCdkcmFnZW5kJywgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmRyYWdFbClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjb25zdCBwYXJlbnQgPSB0aGlzLmRyYWdFbC5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgY29uc3QgZW5kSW5kZXggPSBwYXJlbnQgPyBBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKHBhcmVudC5jaGlsZHJlbiwgdGhpcy5kcmFnRWwpIDogLTE7XG4gICAgICAgICAgICB0aGlzLmRyYWdFbC5jbGFzc0xpc3QucmVtb3ZlKCdvcGFjaXR5LTYwJyk7XG4gICAgICAgICAgICBjb25zdCBmcm9tSWQgPSB0aGlzLmRyYWdFbC5kYXRhc2V0LmlkID8/ICcnO1xuICAgICAgICAgICAgdGhpcy5kcmFnRWwgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGZyb21JZCAmJiB0aGlzLmRyYWdTdGFydEluZGV4ID49IDAgJiYgZW5kSW5kZXggPj0gMCAmJiBlbmRJbmRleCAhPT0gdGhpcy5kcmFnU3RhcnRJbmRleCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChVSUV2ZW50VHlwZS5SRU9SREVSX0lURU1TLCB7XG4gICAgICAgICAgICAgICAgICAgIGZyb21JZDogTnVtYmVyKGZyb21JZCksXG4gICAgICAgICAgICAgICAgICAgIGZyb21JbmRleDogdGhpcy5kcmFnU3RhcnRJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgdG9JbmRleDogZW5kSW5kZXgsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRyYWdTdGFydEluZGV4ID0gLTE7XG4gICAgICAgICAgICB0aGlzLmRyYWdTdGFydFBhcmVudCA9IG51bGw7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBjaGVja2JveFxuICAgICAgICBjb25zdCBjaGVja2JveFdyYXAgPSB0aGlzLmVsKCdkaXYnLCAnc3Bzay1jaGVja3dyYXAnKTtcbiAgICAgICAgY29uc3QgY2hlY2tib3hTdHlsZSA9IGlzTWlzc2luZ1xuICAgICAgICAgICAgPyAnc3Bzay1jaGVja2JveCBzcHNrLWNoZWNrYm94LS13YXJuJ1xuICAgICAgICAgICAgOiAnc3Bzay1jaGVja2JveCBzcHNrLWNoZWNrYm94LS1ub3JtYWwnO1xuICAgICAgICBjb25zdCBjaGVja2JveCA9IHRoaXMuZWwoJ2lucHV0JywgY2hlY2tib3hTdHlsZSk7XG4gICAgICAgIGNoZWNrYm94LnR5cGUgPSAnY2hlY2tib3gnO1xuICAgICAgICBjaGVja2JveC5uYW1lID0gJ2l0ZW0tc2VsZWN0JztcbiAgICAgICAgY2hlY2tib3gudmFsdWUgPSBTdHJpbmcoaXQuaWQpO1xuICAgICAgICBjaGVja2JveC5jaGVja2VkID0gc2VsZWN0Q2hlY2tlZDtcbiAgICAgICAgY2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkID0gZS50YXJnZXQuY2hlY2tlZDtcbiAgICAgICAgICAgIHRoaXMuZW1pdChVSUV2ZW50VHlwZS5JVEVNX1NFTEVDVElPTl9DSEFOR0VELCB7IGlkOiBpdC5pZCwgaXNDaGVjazogc2VsZWN0ZWQgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjaGVja2JveFdyYXAuYXBwZW5kKGNoZWNrYm94KTtcbiAgICAgICAgLy8gYmFkZ2VcbiAgICAgICAgY29uc3QgYmFkZ2VTdHlsZSA9IGlzTWlzc2luZyA/ICdzcHNrLWJhZGdlIHNwc2stYmFkZ2UtLXdhcm4nIDogJ3Nwc2stYmFkZ2Ugc3Bzay1iYWRnZS0tbm9ybSc7XG4gICAgICAgIGNvbnN0IGJhZGdlID0gdGhpcy5lbCgnc3BhbicsIGJhZGdlU3R5bGUsIFN0cmluZyhpdC5sYWJlbCkpO1xuICAgICAgICAvLyBtYWluIChtaXNzaW5nSWNvbiwgYW5jaG9yKVxuICAgICAgICBjb25zdCBtYWluID0gdGhpcy5lbCgnZGl2JywgJ21pbi13LTAgZmxleC0xJyk7XG4gICAgICAgIG1haW4uYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmVudGVyJywgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuZHJhZ1N0YXJ0UGFyZW50IHx8IGlzTWlzc2luZylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0aGlzLmNhbmNlbEhvdmVyT3V0KCk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoVUlFdmVudFR5cGUuSVRFTV9IT1ZFUl9JTiwgeyBpZDogaXQuaWQgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoaXNNaXNzaW5nKSB7XG4gICAgICAgICAgICBjb25zdCBjaGlwID0gdGhpcy5lbCgnc3BhbicsICdjaGlwLXdhcm4nKTtcbiAgICAgICAgICAgIGNvbnN0IHsgZCwgdmlld0JveCB9ID0gZ2V0SWNvbignd2FybicpO1xuICAgICAgICAgICAgY29uc3QgaWNvbiA9IHRoaXMuY3JlYXRlU3ZnSWNvbihkLCB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnaC0zLjUgdy0zLjUnLFxuICAgICAgICAgICAgICAgIHZpZXdCb3gsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gdGhpcy5lbCgnc3BhbicsIHVuZGVmaW5lZCwgaTE4bi5nZXQoJ21pc3NpbmdfaXRlbScpKTtcbiAgICAgICAgICAgIGNoaXAuYXBwZW5kKGljb24sIGxhYmVsKTtcbiAgICAgICAgICAgIG1haW4uYXBwZW5kKGNoaXApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFuY2hvciA9IHRoaXMuZWwoJ2RpdicsICdhbmNob3InLCBpdC5hbmNob3IudmFsdWUpO1xuICAgICAgICBtYWluLmFwcGVuZChhbmNob3IpO1xuICAgICAgICBjb25zdCBjb21tZW50QnRuID0gdGhpcy5nZW5lcmF0ZUNvbW1lbnRCdG4oaXQpO1xuICAgICAgICBsaS5hcHBlbmQoY2hlY2tib3hXcmFwLCBiYWRnZSwgbWFpbiwgY29tbWVudEJ0bik7XG4gICAgICAgIHJldHVybiBsaTtcbiAgICB9XG4gICAgZ2VuZXJhdGVDb21tZW50QnRuKGl0KSB7XG4gICAgICAgIGNvbnN0IGJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICBidG4uY2xhc3NOYW1lID0gJ2J0bi1pY29uJztcbiAgICAgICAgY29uc3QgeyBkLCB2aWV3Qm94IH0gPSBnZXRJY29uKCdjb21tZW50Jyk7XG4gICAgICAgIGNvbnN0IGljb24gPSB0aGlzLmNyZWF0ZVN2Z0ljb24oZCwge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiAnaC0zLjUgdy0zLjUnLFxuICAgICAgICAgICAgdmlld0JveCxcbiAgICAgICAgfSk7XG4gICAgICAgIGJ0bi5hcHBlbmRDaGlsZChpY29uKTtcbiAgICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5lbHMuaXRlbUNvbW1lbnRNb2RhbC5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbiAgICAgICAgICAgIHRoaXMuZWxzLml0ZW1Db21tZW50SW5wdXQudmFsdWUgPSBpdC5jb21tZW50ID8/ICcnO1xuICAgICAgICAgICAgdGhpcy5lbHMuaXRlbUNvbW1lbnRJZElucHV0LnZhbHVlID0gU3RyaW5nKGl0LmlkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBidG47XG4gICAgfVxuICAgIHNjaGVkdWxlSG92ZXJPdXQoKSB7XG4gICAgICAgIGlmICh0aGlzLmhvdmVyT3V0VGltZXIpXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5ob3Zlck91dFRpbWVyKTtcbiAgICAgICAgaWYgKHRoaXMuZHJhZ1N0YXJ0UGFyZW50KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmhvdmVyT3V0VGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaG92ZXJPdXRUaW1lciA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmVtaXQoVUlFdmVudFR5cGUuSVRFTV9IT1ZFUl9PVVQsIHVuZGVmaW5lZCk7XG4gICAgICAgIH0sIHRoaXMuSE9WRVJfT1VUX0RFTEFZKTtcbiAgICB9XG4gICAgY2FuY2VsSG92ZXJPdXQoKSB7XG4gICAgICAgIGlmICghdGhpcy5ob3Zlck91dFRpbWVyKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5ob3Zlck91dFRpbWVyKTtcbiAgICAgICAgdGhpcy5ob3Zlck91dFRpbWVyID0gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVUwgRCZEIEhhbmRsZXJcbiAgICAgKiBPbmx5IHNvcnRpbmcgd2l0aGluIHRoZSBzYW1lIFVMIGlzIGFsbG93ZWRcbiAgICAgKiBAcGFyYW0gdWxcbiAgICAgKi9cbiAgICBhdHRhY2hVbERuREhhbmRsZXJzKHVsKSB7XG4gICAgICAgIHVsLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgKGUpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5kcmFnRWwpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKHRoaXMuZHJhZ1N0YXJ0UGFyZW50ICYmIHVsICE9PSB0aGlzLmRyYWdTdGFydFBhcmVudClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjb25zdCB0YXJnZXRMaSA9IGUudGFyZ2V0Py5jbG9zZXN0KCdsaScpO1xuICAgICAgICAgICAgaWYgKHRhcmdldExpICYmIHRhcmdldExpICE9PSB0aGlzLmRyYWdFbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlY3QgPSB0YXJnZXRMaS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBpc0FmdGVyID0gZS5jbGllbnRZIC0gcmVjdC50b3AgPiByZWN0LmhlaWdodCAvIDI7XG4gICAgICAgICAgICAgICAgdWwuaW5zZXJ0QmVmb3JlKHRoaXMuZHJhZ0VsLCBpc0FmdGVyID8gdGFyZ2V0TGkubmV4dFNpYmxpbmcgOiB0YXJnZXRMaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghdGFyZ2V0TGkpIHtcbiAgICAgICAgICAgICAgICB1bC5hcHBlbmRDaGlsZCh0aGlzLmRyYWdFbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB1bC5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgKGUpID0+IGUucHJldmVudERlZmF1bHQoKSk7XG4gICAgfVxuICAgIGdldEV4aXN0aW5nR3JvdXBzKGl0ZW1zKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKG5ldyBTZXQoaXRlbXMubWFwKChpKSA9PiAoaS5ncm91cCA/PyAnJykudHJpbSgpKS5maWx0ZXIoKGcpID0+IGcubGVuZ3RoID4gMCkpKS5zb3J0KChhLCBiKSA9PiBhLmxvY2FsZUNvbXBhcmUoYikpO1xuICAgIH1cbiAgICBncm91cEJ5R3JvdXAoaXRlbXMpIHtcbiAgICAgICAgY29uc3QgbSA9IG5ldyBNYXAoKTtcbiAgICAgICAgZm9yIChjb25zdCBpdCBvZiBpdGVtcykge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gKGl0Lmdyb3VwID8/IFVOR1JPVVBFRF9WQUxVRSkudHJpbSgpIHx8IFVOR1JPVVBFRDtcbiAgICAgICAgICAgIGlmICghbS5oYXMoa2V5KSlcbiAgICAgICAgICAgICAgICBtLnNldChrZXksIFtdKTtcbiAgICAgICAgICAgIG0uZ2V0KGtleSkucHVzaChpdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG07XG4gICAgfVxuICAgIGdldFNlbGVjdGVkQ2FwdHVyZUZvcm1hdCgpIHtcbiAgICAgICAgY29uc3QgdmFsID0gdGhpcy5kb2MucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZT1cImNhcHR1cmUtZm9ybWF0XCJdOmNoZWNrZWQnKT8udmFsdWU7XG4gICAgICAgIHJldHVybiB2YWwgPT09ICdqcGVnJyA/ICdqcGVnJyA6ICdwbmcnO1xuICAgIH1cbiAgICBnZXRTZWxlY3RlZENhcHR1cmVBcmVhKCkge1xuICAgICAgICBjb25zdCB2YWwgPSB0aGlzLmRvYy5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPVwiY2FwdHVyZS1hcmVhXCJdOmNoZWNrZWQnKT8udmFsdWU7XG4gICAgICAgIHJldHVybiB2YWwgPT09ICd2aWV3cG9ydCcgPyAndmlld3BvcnQnIDogJ2Z1bGwnO1xuICAgIH1cbiAgICB1cGRhdGVRdWFsaXR5VmlzaWJpbGl0eShmb3JtYXQpIHtcbiAgICAgICAgY29uc3QgZiA9IGZvcm1hdCA/PyB0aGlzLmdldFNlbGVjdGVkQ2FwdHVyZUZvcm1hdCgpO1xuICAgICAgICBjb25zdCBpc0pwZWcgPSBmID09PSAnanBlZyc7XG4gICAgICAgIHRoaXMuZWxzLmpwZWdPbmx5RWxzLmZvckVhY2goKGVsKSA9PiBlbC5jbGFzc0xpc3QudG9nZ2xlKCdoaWRkZW4nLCAhaXNKcGVnKSk7XG4gICAgICAgIHRoaXMuZWxzLmpwZWdRdWFsaXR5UmFuZ2UuZGlzYWJsZWQgPSAhaXNKcGVnO1xuICAgICAgICB0aGlzLmVscy5qcGVnUXVhbGl0eU51bWJlci5kaXNhYmxlZCA9ICFpc0pwZWc7XG4gICAgfVxuICAgIHNlbGVjdFJhZGlvQnlWYWx1ZShyYWRpb3MsIHZhbHVlKSB7XG4gICAgICAgIHJhZGlvcy5mb3JFYWNoKChyKSA9PiAoci5jaGVja2VkID0gci52YWx1ZSA9PT0gdmFsdWUpKTtcbiAgICB9XG4gICAgYmluZFN5bmMocmFuZ2VFbCwgbnVtYmVyRWwsIG9uVmFsdWUpIHtcbiAgICAgICAgY29uc3QgcmVhZE51bSA9IChzLCBmYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgY29uc3QgdiA9IHMgIT0gbnVsbCAmJiBzICE9PSAnJyA/IE51bWJlcihzKSA6IE5hTjtcbiAgICAgICAgICAgIHJldHVybiBOdW1iZXIuaXNGaW5pdGUodikgPyB2IDogZmFsbGJhY2s7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGNsYW1wID0gKHYsIG1pbiwgbWF4KSA9PiBNYXRoLm1pbihNYXRoLm1heCh2LCBtaW4pLCBtYXgpO1xuICAgICAgICBjb25zdCBzeW5jID0gKHJhd1N0cikgPT4ge1xuICAgICAgICAgICAgY29uc3QgbWluID0gcmVhZE51bShudW1iZXJFbC5taW4gfHwgcmFuZ2VFbC5taW4sIE51bWJlci5ORUdBVElWRV9JTkZJTklUWSk7XG4gICAgICAgICAgICBjb25zdCBtYXggPSByZWFkTnVtKG51bWJlckVsLm1heCB8fCByYW5nZUVsLm1heCwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKTtcbiAgICAgICAgICAgIGNvbnN0IHN0ZXAgPSByZWFkTnVtKG51bWJlckVsLnN0ZXAgfHwgcmFuZ2VFbC5zdGVwLCAxKTtcbiAgICAgICAgICAgIGNvbnN0IHJhdyA9IE51bWJlcihyYXdTdHIpO1xuICAgICAgICAgICAgY29uc3QgY2xhbXBlZCA9IGNsYW1wKE51bWJlci5pc0Zpbml0ZShyYXcpID8gcmF3IDogMCwgbWluLCBtYXgpO1xuICAgICAgICAgICAgY29uc3Qgcm91bmRlZCA9IE1hdGgucm91bmQoY2xhbXBlZCAvIHN0ZXApICogc3RlcDtcbiAgICAgICAgICAgIGNvbnN0IGZpeGVkID0gTnVtYmVyKHJvdW5kZWQudG9GaXhlZCg2KSk7XG4gICAgICAgICAgICBudW1iZXJFbC52YWx1ZSA9IFN0cmluZyhmaXhlZCk7XG4gICAgICAgICAgICByYW5nZUVsLnZhbHVlID0gU3RyaW5nKGZpeGVkKTtcbiAgICAgICAgICAgIG9uVmFsdWU/LihmaXhlZCk7XG4gICAgICAgIH07XG4gICAgICAgIHJhbmdlRWwuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoKSA9PiBzeW5jKHJhbmdlRWwudmFsdWUpKTtcbiAgICAgICAgbnVtYmVyRWwuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoKSA9PiBzeW5jKG51bWJlckVsLnZhbHVlKSk7XG4gICAgfVxuICAgIGRpc2FibGVGb3JtQ29udHJvbHMoc3RhdHVzKSB7XG4gICAgICAgIGNvbnN0IGNvbnRyb2xzID0gdGhpcy5kb2MucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uLCBzZWxlY3QsIGlucHV0LCB0ZXh0YXJlYScpO1xuICAgICAgICAvLyBEZXRlcm1pbmUgZW5hYmxlbWVudCBwb2xpY3kgcGVyIHN0YXR1c1xuICAgICAgICBjb25zdCBlbmFibGVBbGwgPSBzdGF0dXMgPT09IFNUQVRVUy5DT05ORUNURUQ7XG4gICAgICAgIGNvbnN0IGVuYWJsZUlnbm9yZU9ubHkgPSBzdGF0dXMgPT09IFNUQVRVUy5DT05ORUNUSU5HIHx8IHN0YXR1cyA9PT0gU1RBVFVTLkRJU0NPTk5FQ1RFRDtcbiAgICAgICAgY29uc3QgZW5hYmxlTm9uZSA9IHN0YXR1cyA9PT0gU1RBVFVTLlJFU1RSSUNURUQ7XG4gICAgICAgIGNvbnRyb2xzLmZvckVhY2goKGVsKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzaG91bGRFbmFibGUgPSAoZW5hYmxlQWxsICYmIHRydWUpIHx8XG4gICAgICAgICAgICAgICAgKGVuYWJsZUlnbm9yZU9ubHkgJiYgZWwuaGFzQXR0cmlidXRlKCdkYXRhLWlnbm9yZS1kaXNhYmxlJykpIHx8XG4gICAgICAgICAgICAgICAgKGVuYWJsZU5vbmUgJiYgZmFsc2UpO1xuICAgICAgICAgICAgZWwuZGlzYWJsZWQgPSAhc2hvdWxkRW5hYmxlO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lbHMubGlzdC50b2dnbGVBdHRyaWJ1dGUoJ2luZXJ0JywgZW5hYmxlTm9uZSB8fCBlbmFibGVJZ25vcmVPbmx5KTtcbiAgICB9XG4gICAgYXBwbHlDYXB0dXJlT3B0aW9uc1RvZ2dsZVVJKGV4cGFuZGVkKSB7XG4gICAgICAgIHRoaXMuZWxzLmNhcHR1cmVPcHRpb25zVG9nZ2xlLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIFN0cmluZyhleHBhbmRlZCkpO1xuICAgICAgICBjb25zdCB7IGQsIHZpZXdCb3ggfSA9IGV4cGFuZGVkID8gZ2V0SWNvbignY2FyZXREb3duRmlsbCcpIDogZ2V0SWNvbignY2FyZXRSaWdodEZpbGwnKTtcbiAgICAgICAgdGhpcy5lbHMuY2FwdHVyZU9wdGlvbnNUb2dnbGUuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIHRoaXMuZWxzLmNhcHR1cmVPcHRpb25zVG9nZ2xlLmFwcGVuZENoaWxkKHRoaXMuY3JlYXRlU3ZnSWNvbihkLCB7IHZpZXdCb3gsIGNsYXNzTmFtZTogJ2gtNCB3LTQnIH0pKTtcbiAgICAgICAgdGhpcy5lbHMuY2FwdHVyZU9wdGlvbnNQYW5lbC5jbGFzc0xpc3QudG9nZ2xlKCdoaWRkZW4nLCAhZXhwYW5kZWQpO1xuICAgIH1cbiAgICBnZXRCYWRnZUNvbG9yU3R5bGVOYW1lKGNvbG9yKSB7XG4gICAgICAgIGNvbnN0IGNvbG9yTmFtZSA9IGNvbG9yID09PSAnR3JheScgPyAnc2xhdGUnIDogY29sb3I7XG4gICAgICAgIHJldHVybiBgYmctJHtjb2xvck5hbWUudG9Mb3dlckNhc2UoKX0tNTAwYDtcbiAgICB9XG4gICAgYXBwbHlCYWRnZUNvbG9yVUkoY29sb3IpIHtcbiAgICAgICAgdGhpcy5lbHMuYmFkZ2VDb2xvckJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZCA9IGJ1dHRvbi5kYXRhc2V0LmNvbG9yTmFtZSA9PT0gY29sb3I7XG4gICAgICAgICAgICBidXR0b24uc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgc2VsZWN0ZWQgPyAndHJ1ZScgOiAnZmFsc2UnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZWxzLmJhZGdlQ29sb3JMYWJlbC50ZXh0Q29udGVudCA9IGNvbG9yO1xuICAgICAgICB0aGlzLmVscy5iYWRnZUNvbG9yRG90LmNsYXNzTmFtZSA9ICdpbmxpbmUtYmxvY2sgdy00IGgtNCByb3VuZGVkLWZ1bGwnO1xuICAgICAgICB0aGlzLmVscy5iYWRnZUNvbG9yRG90LmNsYXNzTGlzdC5hZGQodGhpcy5nZXRCYWRnZUNvbG9yU3R5bGVOYW1lKGNvbG9yKSk7XG4gICAgfVxuICAgIGFwcGx5QmFkZ2VQb3NpdG9uVUkocG9zaXRpb24pIHtcbiAgICAgICAgdGhpcy5lbHMuYmFkZ2VQb3NpdGlvbkJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZCA9IGJ1dHRvbi5kYXRhc2V0LnBvc2l0aW9uTmFtZSA9PT0gcG9zaXRpb247XG4gICAgICAgICAgICBidXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLXNlbGVjdGVkJywgc2VsZWN0ZWQgPyAndHJ1ZScgOiAnZmFsc2UnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZWxzLmJhZGdlUG9zaXRpb25MYWJlbC50ZXh0Q29udGVudCA9IHBvc2l0aW9uLnJlcGxhY2VBbGwoJy0nLCAnICcpO1xuICAgIH1cbiAgICBhcHBseUJhZGdlR3JvdXBTZWxlY3RVSShleGlzdGluZ0dyb3VwcywgZGVmYXV0R3JvdXApIHtcbiAgICAgICAgdGhpcy5lbHMuYmFkZ2VHcm91cFNlbGVjdC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgdGhpcy5lbHMuYmFkZ2VHcm91cFNlbGVjdC5hcHBlbmQodGhpcy5tYWtlT3B0KFVOR1JPVVBFRCwgaTE4bi5nZXQoJ2dyb3VwX3VuZ3JvdXBlZCcpLCBkZWZhdXRHcm91cCA9PT0gVU5HUk9VUEVEKSk7XG4gICAgICAgIGZvciAoY29uc3QgZ3JvdXAgb2YgZXhpc3RpbmdHcm91cHMpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZSA9IChnKSA9PiAoZyA/PyAnJykudHJpbSgpO1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBub3JtYWxpemUoZ3JvdXApO1xuICAgICAgICAgICAgdGhpcy5lbHMuYmFkZ2VHcm91cFNlbGVjdC5hcHBlbmQodGhpcy5tYWtlT3B0KHZhbHVlLCBncm91cCwgZGVmYXV0R3JvdXAgPT09IGdyb3VwKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3JlYXRlT3B0ID0gdGhpcy5tYWtlT3B0KHRoaXMuTkVXX0dST1VQLCBpMThuLmdldCgnY29tbW9uX2NyZWF0ZScpKTtcbiAgICAgICAgdGhpcy5lbHMuYmFkZ2VHcm91cFNlbGVjdC5hcHBlbmQoY3JlYXRlT3B0KTtcbiAgICB9XG4gICAgYXBwbHlUaGVtZSh0aGVtZSkge1xuICAgICAgICBjb25zdCByb290ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICBjb25zdCBpc0RhcmsgPSB0aGVtZSA9PT0gJ2RldmljZSdcbiAgICAgICAgICAgID8gd2luZG93Lm1hdGNoTWVkaWEoJyhwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyayknKS5tYXRjaGVzXG4gICAgICAgICAgICA6IHRoZW1lID09PSAnZGFyayc7XG4gICAgICAgIGlmIChpc0RhcmspIHtcbiAgICAgICAgICAgIHJvb3QuY2xhc3NMaXN0LmFkZCgnZGFyaycpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcm9vdC5jbGFzc0xpc3QucmVtb3ZlKCdkYXJrJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbHMudGhlbWVMaWdodEJ0bi5zZXRBdHRyaWJ1dGUoJ2RhdGEtYWN0aXZlJywgU3RyaW5nKHRoZW1lID09PSAnbGlnaHQnKSk7XG4gICAgICAgIHRoaXMuZWxzLnRoZW1lRGFya0J0bi5zZXRBdHRyaWJ1dGUoJ2RhdGEtYWN0aXZlJywgU3RyaW5nKHRoZW1lID09PSAnZGFyaycpKTtcbiAgICAgICAgdGhpcy5lbHMudGhlbWVEZXZpY2VCdG4uc2V0QXR0cmlidXRlKCdkYXRhLWFjdGl2ZScsIFN0cmluZyh0aGVtZSA9PT0gJ2RldmljZScpKTtcbiAgICB9XG4gICAgYXBwbHlTdG9yZShwYWdlS2V5cykge1xuICAgICAgICB0aGlzLmVscy5zdG9yZUNvdW50LnRleHRDb250ZW50ID0gU3RyaW5nKHBhZ2VLZXlzLmxlbmd0aCk7XG4gICAgICAgIHRoaXMuZWxzLnN0b3JlTGlzdC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgaWYgKHBhZ2VLZXlzLmxlbmd0aCA8PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmVscy5zdG9yZUxpc3QuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICAgICAgICB0aGlzLmVscy5zdG9yZUVtcHR5LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgcGFnZUtleSBvZiBwYWdlS2V5cykge1xuICAgICAgICAgICAgY29uc3QgbGlFbGVtID0gdGhpcy5lbCgnbGknLCAnc2VsZWN0LWl0ZW0nKTtcbiAgICAgICAgICAgIGNvbnN0IGFXcmFwRWxlbSA9IHRoaXMuZWwoJ2RpdicsICdtaW4tdy0wIGZsZXgtMScpO1xuICAgICAgICAgICAgY29uc3QgYUVsZW0gPSB0aGlzLmVsKCdhJywgJ2FuY2hvciB3aGl0ZXNwYWNlLW5vcm1hbCBicmVhay13b3JkcycsIHBhZ2VLZXkpO1xuICAgICAgICAgICAgYUVsZW0uaHJlZiA9IHBhZ2VLZXk7XG4gICAgICAgICAgICBhRWxlbS50YXJnZXQgPSAnX2JsYW5rJztcbiAgICAgICAgICAgIGFXcmFwRWxlbS5hcHBlbmRDaGlsZChhRWxlbSk7XG4gICAgICAgICAgICBjb25zdCBleHBvcnRCdG5FbGVtID0gdGhpcy5lbCgnYnV0dG9uJywgJ2J0bi1pY29uJyk7XG4gICAgICAgICAgICBleHBvcnRCdG5FbGVtLnNldEF0dHJpYnV0ZSgnZGF0YS1pZ25vcmUtZGlzYWJsZScsICd0cnVlJyk7XG4gICAgICAgICAgICBjb25zdCBleHBvcnRJY29uRGVmID0gZ2V0SWNvbignZXhwb3J0Jyk7XG4gICAgICAgICAgICBjb25zdCBleHBvcnRJY29uID0gdGhpcy5jcmVhdGVTdmdJY29uKGV4cG9ydEljb25EZWYuZCwge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2ljb24tc20nLFxuICAgICAgICAgICAgICAgIHZpZXdCb3g6IGV4cG9ydEljb25EZWYudmlld0JveCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZXhwb3J0QnRuRWxlbS5hcHBlbmRDaGlsZChleHBvcnRJY29uKTtcbiAgICAgICAgICAgIGNvbnN0IHJlbW92ZUJ0bkVsZW0gPSB0aGlzLmVsKCdidXR0b24nLCAnYnRuLWljb24gYnRuLWljb24tLWRhbmdlcicpO1xuICAgICAgICAgICAgcmVtb3ZlQnRuRWxlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtaWdub3JlLWRpc2FibGUnLCAndHJ1ZScpO1xuICAgICAgICAgICAgY29uc3QgcmVtb3ZlSWNvbkRlZiA9IGdldEljb24oJ3JlbW92ZScpO1xuICAgICAgICAgICAgY29uc3QgcmVtb3ZlSWNvbiA9IHRoaXMuY3JlYXRlU3ZnSWNvbihyZW1vdmVJY29uRGVmLmQsIHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdpY29uLXNtJyxcbiAgICAgICAgICAgICAgICB2aWV3Qm94OiByZW1vdmVJY29uRGVmLnZpZXdCb3gsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlbW92ZUJ0bkVsZW0uYXBwZW5kQ2hpbGQocmVtb3ZlSWNvbik7XG4gICAgICAgICAgICBsaUVsZW0uYXBwZW5kQ2hpbGQoYVdyYXBFbGVtKTtcbiAgICAgICAgICAgIGxpRWxlbS5hcHBlbmRDaGlsZChleHBvcnRCdG5FbGVtKTtcbiAgICAgICAgICAgIGxpRWxlbS5hcHBlbmRDaGlsZChyZW1vdmVCdG5FbGVtKTtcbiAgICAgICAgICAgIHRoaXMuZWxzLnN0b3JlTGlzdC5hcHBlbmRDaGlsZChsaUVsZW0pO1xuICAgICAgICAgICAgZXhwb3J0QnRuRWxlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoVUlFdmVudFR5cGUuRVhQT1JUX1BBR0VfQ0xJQ0ssIHsgcGFnZUtleSB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVtb3ZlQnRuRWxlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoVUlFdmVudFR5cGUuUkVNT1ZFX1BBR0VfQ0xJQ0ssIHsgcGFnZUtleSB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZWxzLnN0b3JlTGlzdC5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbiAgICAgICAgdGhpcy5lbHMuc3RvcmVFbXB0eS5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICB9XG4gICAgYXBwbHlUb2FzdE1lc3NhZ2VzKHRvYXN0TWVzc2FnZXMpIHtcbiAgICAgICAgZm9yIChjb25zdCB0b2FzdE1lc3NhZ2Ugb2YgdG9hc3RNZXNzYWdlcykge1xuICAgICAgICAgICAgY29uc3QgdG9hc3RFbGVtID0gdGhpcy5nZW5lcmF0ZVRvYXN0TWVzc2FnZSh0b2FzdE1lc3NhZ2UpO1xuICAgICAgICAgICAgdGhpcy5lbHMudG9hc3RQYXJlbnQuYXBwZW5kQ2hpbGQodG9hc3RFbGVtKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdChVSUV2ZW50VHlwZS5UT0FTVF9ESVNNSVNTX1JFUVVFU1RFRCwgeyB1dWlkOiB0b2FzdE1lc3NhZ2UudXVpZCB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZW5lcmF0ZVRvYXN0TWVzc2FnZSh0b2FzdE1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3QgdG9hc3RFbGVtID0gdGhpcy5lbCgnZGl2JywgYHRvYXN0IHRvYXN0LS0ke3RvYXN0TWVzc2FnZS5raW5kfWApO1xuICAgICAgICBjb25zdCB0b2FzdEljb25EZWYgPSBnZXRJY29uKHRvYXN0TWVzc2FnZS5raW5kKTtcbiAgICAgICAgY29uc3QgdG9hc3RJY29uID0gdGhpcy5jcmVhdGVTdmdJY29uKHRvYXN0SWNvbkRlZi5kLCB7XG4gICAgICAgICAgICBjbGFzc05hbWU6ICd0b2FzdC1pY29uJyxcbiAgICAgICAgICAgIHZpZXdCb3g6IHRvYXN0SWNvbkRlZi52aWV3Qm94LFxuICAgICAgICAgICAgdmFyaWFudDogJ3NvbGlkJyxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHRvYXN0Qm9keSA9IHRoaXMuZWwoJ2RpdicsICd0b2FzdC1ib2R5Jyk7XG4gICAgICAgIGNvbnN0IGRlc2MgPSB0aGlzLmVsKCdwJywgJ3RvYXN0LWRlc2MnLCB0b2FzdE1lc3NhZ2UubWVzc2FnZSk7XG4gICAgICAgIHRvYXN0Qm9keS5hcHBlbmRDaGlsZChkZXNjKTtcbiAgICAgICAgY29uc3QgY2xvc2VCdG4gPSB0aGlzLmVsKCdidXR0b24nLCBgdG9hc3QtY2xvc2UgdG9hc3QtY2xvc2UtLSR7dG9hc3RNZXNzYWdlLmtpbmR9YCk7XG4gICAgICAgIGNvbnN0IGNsb3NlSWNvbkRlZiA9IGdldEljb24oJ2Nsb3NlJyk7XG4gICAgICAgIGNvbnN0IGNsb3NlSWNvbiA9IHRoaXMuY3JlYXRlU3ZnSWNvbihjbG9zZUljb25EZWYuZCwge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiAnaC0zLjUgdy0zLjUnLFxuICAgICAgICAgICAgdmlld0JveDogY2xvc2VJY29uRGVmLnZpZXdCb3gsXG4gICAgICAgIH0pO1xuICAgICAgICBjbG9zZUJ0bi5hcHBlbmRDaGlsZChjbG9zZUljb24pO1xuICAgICAgICB0b2FzdEVsZW0uYXBwZW5kQ2hpbGQodG9hc3RJY29uKTtcbiAgICAgICAgdG9hc3RFbGVtLmFwcGVuZENoaWxkKHRvYXN0Qm9keSk7XG4gICAgICAgIHRvYXN0RWxlbS5hcHBlbmRDaGlsZChjbG9zZUJ0bik7XG4gICAgICAgIGNvbnN0IHRpbWVySWQgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAodG9hc3RFbGVtLmlzQ29ubmVjdGVkKVxuICAgICAgICAgICAgICAgIHRvYXN0RWxlbS5yZW1vdmUoKTtcbiAgICAgICAgfSwgdGhpcy5UT0FTVF9BVVRPX0RJU01JU1MpO1xuICAgICAgICBjbG9zZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICAgICAgICAgIGlmICh0b2FzdEVsZW0uaXNDb25uZWN0ZWQpXG4gICAgICAgICAgICAgICAgdG9hc3RFbGVtLnJlbW92ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRvYXN0RWxlbTtcbiAgICB9XG4gICAgJChzZWxlY3Rvcikge1xuICAgICAgICBjb25zdCBlbCA9IHRoaXMuZG9jLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgICBpZiAoIWVsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBbUGFuZWxWaWV3XSBNaXNzaW5nIGVsZW1lbnQ6ICR7c2VsZWN0b3J9YCk7XG4gICAgICAgIHJldHVybiBlbDtcbiAgICB9XG4gICAgJGFsbChzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gdGhpcy5kb2MucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgfVxuICAgIGVsKHRhZywgY2xhc3NOYW1lLCB0ZXh0KSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLmRvYy5jcmVhdGVFbGVtZW50KHRhZyk7XG4gICAgICAgIGlmIChjbGFzc05hbWUpXG4gICAgICAgICAgICBub2RlLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgICAgICAgaWYgKHRleHQgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIG5vZGUudGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gICAgbWFrZU9wdCh2YWx1ZSwgbGFiZWwsIHNlbGVjdGVkID0gZmFsc2UpIHtcbiAgICAgICAgY29uc3QgbyA9IHRoaXMuZG9jLmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICAgICAgICBvLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIG8udGV4dENvbnRlbnQgPSBsYWJlbDtcbiAgICAgICAgaWYgKHNlbGVjdGVkKVxuICAgICAgICAgICAgby5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBvO1xuICAgIH1cbiAgICBjcmVhdGVTdmdJY29uKGQsIG9wdHMgPSB7fSkge1xuICAgICAgICBjb25zdCBzdmdOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc7XG4gICAgICAgIGNvbnN0IHN2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhzdmdOUywgJ3N2ZycpO1xuICAgICAgICBzdmcuc2V0QXR0cmlidXRlKCd2aWV3Qm94Jywgb3B0cy52aWV3Qm94ID8/ICcwIDAgMjAgMjAnKTtcbiAgICAgICAgc3ZnLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgICAgICBpZiAob3B0cy5jbGFzc05hbWUpXG4gICAgICAgICAgICBzdmcuc2V0QXR0cmlidXRlKCdjbGFzcycsIG9wdHMuY2xhc3NOYW1lKTtcbiAgICAgICAgY29uc3QgcGF0aHMgPSBBcnJheS5pc0FycmF5KGQpID8gZCA6IFtkXTtcbiAgICAgICAgZm9yIChjb25zdCBzZWcgb2YgcGF0aHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhdGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnTlMsICdwYXRoJyk7XG4gICAgICAgICAgICBwYXRoLnNldEF0dHJpYnV0ZSgnZCcsIHNlZyk7XG4gICAgICAgICAgICBpZiAob3B0cy52YXJpYW50ID09PSAnb3V0bGluZScpIHtcbiAgICAgICAgICAgICAgICBwYXRoLnNldEF0dHJpYnV0ZSgnZmlsbCcsICdub25lJyk7XG4gICAgICAgICAgICAgICAgcGF0aC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsICdjdXJyZW50Q29sb3InKTtcbiAgICAgICAgICAgICAgICBwYXRoLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLXdpZHRoJywgJzEuNScpO1xuICAgICAgICAgICAgICAgIHBhdGguc2V0QXR0cmlidXRlKCdzdHJva2UtbGluZWNhcCcsICdyb3VuZCcpO1xuICAgICAgICAgICAgICAgIHBhdGguc2V0QXR0cmlidXRlKCdzdHJva2UtbGluZWpvaW4nLCAncm91bmQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhdGguc2V0QXR0cmlidXRlKCdmaWxsJywgJ2N1cnJlbnRDb2xvcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3ZnLmFwcGVuZENoaWxkKHBhdGgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdmc7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgUGFuZWxDb250cm9sbGVyIH0gZnJvbSAnQHBhbmVsL2NvbnRyb2xsZXIvcGFuZWxfY29udHJvbGxlcic7XG5pbXBvcnQgeyBQYW5lbFZpZXcgfSBmcm9tICcuLi92aWV3L3BhbmVsX3ZpZXcnO1xuLyoqXG4gKiBPcmNoZXN0cmF0ZXMgVUkgaW5pdGlhbGl6YXRpb24gYW5kIGNvbm5lY3Rpb24gbGlmZWN5Y2xlLlxuICogLSBBcHBseSBpMThuXG4gKiAtIERldGVjdCBhbmQgY29ubmVjdCB0byB0aGUgYWN0aXZlIHRhYlxuICogLSBSZXN0b3JlIHN0YXRlIGFuZCBwZXJmb3JtIGluaXRpYWwgcmVuZGVyXG4gKiAtIEJpbmQgVUkgZXZlbnRzXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgIGNvbnN0IHZpZXcgPSBuZXcgUGFuZWxWaWV3KGRvY3VtZW50KTtcbiAgICBjb25zdCBjb250cm9sbGVyID0gbmV3IFBhbmVsQ29udHJvbGxlcih2aWV3KTtcbiAgICBhd2FpdCBjb250cm9sbGVyLnN0YXJ0KCk7XG59XG4oZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJyB8fCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnaW50ZXJhY3RpdmUnKSB7XG4gICAgICAgIHZvaWQgc3RhcnQoKS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdQYW5lbCBib290c3RyYXAgZmFpbGVkOicsIGVycik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHZvaWQgc3RhcnQoKS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdQYW5lbCBib290c3RyYXAgZmFpbGVkOicsIGVycik7XG4gICAgICAgIH0pLCB7XG4gICAgICAgICAgICBvbmNlOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICB9XG59KSgpO1xuIl0sIm5hbWVzIjpbImlzUmVzdHJpY3RlZCIsInJhdyIsInN0YXJ0c1dpdGgiLCJ1cmwiLCJVUkwiLCJTZXQiLCJoYXMiLCJwcm90b2NvbCIsImhvc3RuYW1lIiwiSVRFTV9DT0xPUlMiLCJJVEVNX1NIQVBFIiwiSVRFTV9QT1NJVElPTl9WQUxVRVMiLCJVTkdST1VQRUQiLCJVTkdST1VQRURfVkFMVUUiLCJMQUJFTF9GT1JNQVQiLCJpc1NjcmVlbkl0ZW1MaWtlIiwidiIsImFuY2hvciIsImEiLCJpbml0aWFsTW9kZWwiLCJzdGF0dXMiLCJ0YWJJZCIsInBhZ2VLZXkiLCJwYWdlS2V5cyIsInRoZW1lIiwic2VsZWN0aW9uRW5hYmxlZCIsIml0ZW1zIiwiZGVmYXVsdFNpemUiLCJkZWZhdWx0Q29sb3IiLCJkZWZhdWx0U2hhcGUiLCJkZWZhdWx0TGFiZWxGb3JtYXQiLCJkZWZhdWx0VmlzaWJsZSIsImRlZmF1bHRQb3NpdGlvbiIsImRlZmF1bHRHcm91cCIsImNhcHR1cmUiLCJmb3JtYXQiLCJhcmVhIiwicXVhbGl0eSIsInNjYWxlIiwicGFuZWxFeHBhbmRlZCIsInNlbGVjdEl0ZW1zIiwibWlzc2luZ0lkcyIsInRvYXN0TWVzc2FnZXMiLCJzb3J0U2NyZWVuSXRlbXNCeUdyb3VwQW5kTGFiZWwiLCJpbmRleGVkIiwibWFwIiwiaXQiLCJpIiwiZ3JvdXBPcmRlciIsIk1hcCIsIm9yZGVyIiwiZyIsImdyb3VwIiwic2V0Iiwic29ydCIsImIiLCJnYSIsImdldCIsImdiIiwibGFiZWwiLCJ4Iiwic2NyZWVuU3RhdGVUYWJsZSIsInJvb3RLZXkiLCJkZWZhdWx0T2YiLCJLRVkiLCJhc3luYyIsInJlYWRBbGwiLCJjaHJvbWUiLCJzdG9yYWdlIiwibG9jYWwiLCJ3cml0ZUFsbCIsImtleSIsImZvdW5kIiwidW5kZWZpbmVkIiwidmFsdWUiLCJyZW1vdmUiLCJjbGVhciIsImNyZWF0ZU1hcFRhYmxlIiwibmV4dElkIiwidGhlbWVUYWJsZSIsInZhbCIsImNyZWF0ZVNpbmdsZXRvbiIsImFwcGx5UGF0Y2giLCJwYXRjaCIsInN0YXRlIiwicmVtb3ZlZElkcyIsImxlbmd0aCIsInRvUmVtb3ZlIiwiZmlsdGVyIiwiaWQiLCJhZGRlZCIsIkluZmluaXR5Iiwic2l6ZSIsImNvbG9yIiwic2hhcGUiLCJsYWJlbEZvcm1hdCIsInZpc2libGUiLCJwb3NpdGlvbiIsImNvbW1lbnQiLCJwdXNoIiwibm9ybWFsaXplR3JvdXBMYWJlbHNBbmRDb3VudFVuZ3JvdXBlZCIsImJ1Y2tldHMiLCJmb3JFYWNoIiwiaXRlbSIsImluZGV4IiwidHJpbSIsIm91dCIsInNsaWNlIiwiYnVja2V0IiwiZGVzaXJlZCIsInN1YnMiLCJpMThuIiwiZ2V0TWVzc2FnZSIsImxvY2FsaXplIiwicm9vdCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsImVsIiwiZ2V0QXR0cmlidXRlIiwidGV4dENvbnRlbnQiLCJzcGVjIiwicGFpciIsInNwbGl0IiwiYXR0ciIsInMiLCJzZXRBdHRyaWJ1dGUiLCJTVEFUVVMiLCJTVEFUVVNfTVNHX0tFWSIsIlJFU1RSSUNURUQiLCJDT05ORUNUSU5HIiwiQ09OTkVDVEVEIiwiRElTQ09OTkVDVEVEIiwiU1RBVFVTX0NMQVNTX0JZX0tFWSIsIkFjdGlvblR5cGUiLCJFZmZlY3RUeXBlIiwiQ0hBTk5FTCIsIlBhbmVsQXBpIiwicnBjIiwiY29uc3RydWN0b3IiLCJ0aGlzIiwic2VuZCIsImJvZHkiLCJyZXEiLCJjcnlwdG8iLCJyYW5kb21VVUlEIiwiZXhwZWN0UmVwbHkiLCJyZW5kZXIiLCJ0eXBlIiwicGF5bG9hZCIsInRvZ2dsZVNlbGVjdCIsImVuYWJsZWQiLCJob3ZlciIsIm1lYXN1cmVTaXplIiwicGluZyIsIlBvcnRScGMiLCJwb3J0IiwicGVuZGluZyIsImFsaXZlIiwib25NZXNzYWdlIiwiYWRkTGlzdGVuZXIiLCJtc2ciLCJpc1Jlc3BvbnNlIiwiZGVsZXRlIiwib25EaXNjb25uZWN0IiwicmVhc29uIiwicnVudGltZSIsImxhc3RFcnJvciIsIm1lc3NhZ2UiLCJyZXNvbHZlIiwib2siLCJlcnJvciIsImlzQWxpdmUiLCJ0aW1lb3V0TXMiLCJQcm9taXNlIiwidGltZXIiLCJzZXRUaW1lb3V0IiwicmVzIiwiY2xlYXJUaW1lb3V0IiwicG9zdE1lc3NhZ2UiLCJPV05FRCIsInRhcmdldCIsIm1ldGhvZCIsInBhcmFtcyIsInJlamVjdCIsImRlYnVnZ2VyIiwic2VuZENvbW1hbmQiLCJyZXN1bHQiLCJlcnIiLCJFcnJvciIsIlN0cmluZyIsIm9wdHMiLCJ0YWIiLCJ0YWJzIiwiY29uc29sZSIsIndhcm4iLCJmbXQiLCJzZXR0bGVNcyIsImRpZEF0dGFjaCIsInVzZWRPdmVycmlkZSIsImF0dGFjaCIsImFkZCIsImluY2x1ZGVzIiwiYXR0YWNoT3duZWQiLCJicmluZ1RvRnJvbnQiLCJnZW9tIiwiY29udGVudFNpemUiLCJ5Iiwid2lkdGgiLCJoZWlnaHQiLCJjc3NWaXN1YWxWaWV3cG9ydCIsIk1hdGgiLCJtYXgiLCJmbG9vciIsInBhZ2VYIiwicGFnZVkiLCJjZWlsIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJnZXRWaWV3cG9ydENzc1JlY3QiLCJ1c2VPdmVycmlkZSIsImNsaXAiLCJjYXB0dXJlQmV5b25kVmlld3BvcnQiLCJzaG91bGRTY3JvbGxUb3AiLCJtZXRyaWNzIiwiZGV2aWNlU2NhbGVGYWN0b3IiLCJtb2JpbGUiLCJzY3JlZW5XaWR0aCIsInNjcmVlbkhlaWdodCIsInBvc2l0aW9uWCIsInBvc2l0aW9uWSIsInJlc29sdmVHZW9tZXRyeSIsImV4cHJlc3Npb24iLCJyIiwiY2FwUGFyYW1zIiwiZnJvbVN1cmZhY2UiLCJtaW4iLCJyb3VuZCIsImRhdGEiLCJmaWxlbmFtZSIsImJhc2UiLCJ0aXRsZSIsImhvc3QiLCJyZXBsYWNlIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwibWFrZUZpbGVuYW1lIiwiZG93bmxvYWRzIiwiZG93bmxvYWQiLCJzYXZlQXMiLCJkZXRhY2giLCJkZXRhY2hPd25lZCIsImV4cG9ydFNjcmVlblN0YXRlIiwicHJlZml4Iiwia2luZCIsInZlcnNpb24iLCJleHBvcnRlZEF0IiwidGV4dCIsImJ5dGVzIiwiVGV4dEVuY29kZXIiLCJlbmNvZGUiLCJiaW4iLCJmcm9tQ2hhckNvZGUiLCJidG9hIiwidG9CYXNlNjRVdGY4IiwiSlNPTiIsInN0cmluZ2lmeSIsImQiLCJwYWQiLCJuIiwidyIsInBhZFN0YXJ0IiwidHpvIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJzaWduIiwiaGgiLCJhYnMiLCJtbSIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsInRpbWVzdGFtcCIsImltcG9ydFNjcmVhblN0YXRlIiwiZmlsZSIsImlzSnNvbkJ5RXh0IiwidGVzdCIsIm5hbWUiLCJpc0pzb25CeU1pbWUiLCJwYXJzZWQiLCJwYXJzZSIsIm8iLCJBcnJheSIsImlzQXJyYXkiLCJldmVyeSIsImlzVmFsaWRQYXlsb2FkIiwia2V5T2YiLCJleGlzdGluZ1NldCIsInN1Y2Nlc3NNZXNzYWdlIiwiVUlFdmVudFR5cGUiLCJvbkRldGFjaCIsImRlYnVnZ2VlIiwiUGFuZWxDb250cm9sbGVyIiwidmlldyIsIm1vZGVsIiwic3RydWN0dXJlZENsb25lIiwiY29ubiIsImN1cnJlbnRXaW5kb3dJZCIsInN0YXRpYyIsIlJFTkRFUl9DT05URU5UIiwiVE9HR0xFX1NFTEVDVF9PTl9DT05URU5UIiwiQ0xFQVJfQ09OVEVOVCIsIkhPVkVSIiwic3RhcnQiLCJkaXNwYXRjaCIsIklOSVQiLCJlbnN1cmVDb25uZWN0aW9uQWxpdmUiLCJmb3JjZVJlY29ubmVjdCIsInJlZ2lzdGVyVmlld0hhbmRsZXJzIiwid2luZG93cyIsImdldEN1cnJlbnQiLCJzZW5kZXJXaW5kb3dJZCIsIndpbmRvd0lkIiwib24iLCJUT0dHTEVfU0VMRUNUIiwiQ0xFQVIiLCJDTEVBUl9BTEwiLCJDQVBUVVJFIiwiTUVBU1VSRV9DT05URU5UX1NJWkUiLCJCQURHRV9TSVpFX0NIQU5HRSIsIlNFVF9CQURHRV9TSVpFIiwiQkFER0VfQ09MT1JfU0VMRUNUIiwiU0VUX0JBREdFX0NPTE9SIiwiQkFER0VfU0hBUEVfQ0hBTkdFIiwiU0VUX0JBREdFX1NIQVBFIiwiQkFER0VfTEFCRUxfRk9STUFUX0NIQU5HRSIsIlNFVF9CQURHRV9MQUJFTF9GT1JNQVQiLCJCQURHRV9WSVNJQkxFX0NIQU5HRSIsIlNFVF9CQURHRV9WSVNJQkxFIiwiQkFER0VfREVMRVRFIiwiQkFER0VfUE9TSVRJT05fU0VMRUNUIiwiU0VUX0JBREdFX1BPU0lUSU9OIiwiVE9HR0xFX0NBUFRVUkVfUEFORUwiLCJDQVBUVVJFX0ZPUk1BVF9DSEFOR0UiLCJTRVRfQ0FQVFVSRV9GT1JNQVQiLCJDQVBUVVJFX0FSRUFfQ0hBTkdFIiwiU0VUX0NBUFRVUkVfQVJFQSIsIkNBUFRVUkVfUVVBTElUWV9DSEFOR0UiLCJTRVRfQ0FQVFVSRV9RVUFMSVRZIiwiQ0FQVFVSRV9TQ0FMRV9DSEFOR0UiLCJTRVRfQ0FQVFVSRV9TQ0FMRSIsIlJFT1JERVJfSVRFTVMiLCJmcm9tSWQiLCJmcm9tSW5kZXgiLCJ0b0luZGV4IiwiU0VUX0dST1VQIiwiSVRFTV9TRUxFQ1RJT05fQ0hBTkdFRCIsIklURU1fSE9WRVJfSU4iLCJJVEVNX0hPVkVSX09VVCIsIklURU1fQ09NTUVOVF9BUFBMWSIsIlVQREFURV9JVEVNX0NPTU1FTlQiLCJVUERBVEVfVEhFTUUiLCJTRVRUSU5HX01PREFMX1NIT1ciLCJTVE9SRV9SRUxPQURfUkVRVUVTVEVEIiwiSU1QT1JUX1NDUkVBTl9TVEFURV9GSUxFIiwiVE9BU1RfRElTTUlTU19SRVFVRVNURUQiLCJ1dWlkIiwiUkVNT1ZFX1BBR0VfQ0xJQ0siLCJSRU1PVkVfU0NSRUVOX1NUQVRFX0JZX1BBR0UiLCJFWFBPUlRfUEFHRV9DTElDSyIsIkVYUE9SVF9TQ1JFRU5fU1RBVEVfQllfUEFHRSIsImFjdGlvbiIsIm5leHQiLCJlZmZlY3RzIiwiU0VUX1RIRU1FIiwiU0VUX1NUQVRVUyIsIlJFU1RPUkVfU1RBVEUiLCJTRVRfTUlTU0lOR19JRFMiLCJDTEVBUl9TVEFURSIsIkNPTlRFTlRfU0VMRUNURUQiLCJQRVJTSVNUX1NUQVRFIiwiaXRlbXNNYXJrZWRGb3JSZWxhYmVsIiwibmV4dEdyb3VwUmF3IiwibmV4dEdyb3VwIiwidGVtcExhYmVsQmFzZSIsIk51bWJlciIsIk1BWF9TQUZFX0lOVEVHRVIiLCJ1cGRhdGVHcm91cEFuZERlZmVyUmVsYWJlbCIsIkNBUFRVUkVfUkVRVUVTVEVEIiwiTk9USUZZX0VSUk9SIiwiQ0FQVFVSRV9TVUNDRUVERUQiLCJDQVBUVVJFX0ZBSUxFRCIsIlJhbmdlRXJyb3IiLCJmcm9tSWR4IiwiZmluZEluZGV4IiwicmVvcmRlckl0ZW1MYWJlbCIsImlzQ2hlY2siLCJhcHBseUl0ZW1TZWxlY3Rpb25DaGFuZ2VkQnlJZCIsImdyb3VwSWRzIiwiZ3JvdXBTZXQiLCJhcHBseUl0ZW1TZWxlY3Rpb25DaGFuZ2VkRm9yR3JvdXAiLCJhbGxDaGVjayIsIlBPUlRfRElTQ09OTkVDVEVEIiwiUkVBRF9TQ1JFRU5fU1RBVEVfU1RPUkUiLCJTVE9SRV9SRUxPQURfU1VDQ0VFREVEIiwiSU1QT1JUX1NVQ0NFRURFRCIsIklNUE9SVF9GQUlMRUQiLCJ0IiwiUkVNT1ZFX1NDUkVFTl9TVEFURV9TVE9SRV9CWV9QQUdFX0tFWSIsIkVYUE9SVF9TQ1JFRU5fU1RBVEVfQllfUEFHRV9LRVkiLCJFWFBPUlRfRkFJTEVEIiwidXBkYXRlIiwiZXhlY0VmZmVjdHMiLCJjYXRjaCIsInNvbWUiLCJmeCIsIlJFUVVJUkVTX0NPTk4iLCJjb250ZXh0Q2hhbmdlZCIsImFwaSIsInByZXYiLCJzY3JlZW5TdGF0ZXMiLCJPYmplY3QiLCJrZXlzIiwiZSIsInN0IiwicHJldktleSIsInF1ZXJ5IiwiYWN0aXZlIiwiY3VycmVudFdpbmRvdyIsImdldEFjdGl2ZVRhYiIsIm5ld0tleSIsImluY2x1ZGVIYXNoIiwidSIsIm9yaWdpbiIsInBhdGhuYW1lIiwic2VhcmNoIiwiaGFzaCIsImRpc2Nvbm5lY3QiLCJzY3JpcHRpbmciLCJleGVjdXRlU2NyaXB0IiwiZmlsZXMiLCJjb25uZWN0IiwibGlzdGVuZXJzIiwiZm4iLCJjYiIsImRpc3Bvc2UiLCJjb25uZWN0VG9UYWIiLCJhbmNob3JzIiwidW5pcSIsImZyb20iLCJmaW5kIiwiQm9vbGVhbiIsInRvQWRkIiwiaGFuZGxlU2VsZWN0ZWQiLCJJQ09OUyIsImNhcmV0RG93biIsInZpZXdCb3giLCJjYXJldERvd25GaWxsIiwiY2FyZXRSaWdodCIsImNhcmV0UmlnaHRGaWxsIiwic3VjY2VzcyIsImV4cG9ydCIsImNsb3NlIiwiZ2V0SWNvbiIsImJ5TGFiZWxUaGVuSWQiLCJQYW5lbFZpZXciLCJkb2MiLCJlbHMiLCJORVdfR1JPVVAiLCJIT1ZFUl9PVVRfREVMQVkiLCJkcmFnRWwiLCJkcmFnU3RhcnRQYXJlbnQiLCJkcmFnU3RhcnRJbmRleCIsImhvdmVyT3V0VGltZXIiLCJjb2xsYXBzZWRHcm91cHMiLCJUT0FTVF9BVVRPX0RJU01JU1MiLCIkIiwidG9nZ2xlQnRuIiwidG9nZ2xlSWNvbiIsInRvZ2dsZUxhYmVsIiwiY2xlYXJCdG4iLCJjYXB0dXJlQnRuIiwibGlzdCIsImVtcHR5IiwiY291bnQiLCJjYXB0dXJlT3B0aW9uc1RvZ2dsZSIsImNhcHR1cmVPcHRpb25zUGFuZWwiLCJjYXB0dXJlRm10UmFkaW9zIiwiJGFsbCIsImNhcHR1cmVBcmVhUmFkaW9zIiwianBlZ09ubHlFbHMiLCJqcGVnUXVhbGl0eVJhbmdlIiwianBlZ1F1YWxpdHlOdW1iZXIiLCJjYXB0dXJlU2NhbGVSYW5nZSIsImNhcHR1cmVTY2FsZU51bWJlciIsImJhZGdlU2l6ZVJhbmdlIiwiYmFkZ2VTaXplTnVtYmVyIiwiYmFkZ2VDb2xvckJ1dHRvbnMiLCJiYWRnZUNvbG9yTGFiZWwiLCJiYWRnZUNvbG9yRG90IiwiYmFkZ2VTaGFwZVNlbGVjdCIsImJhZGdlTGFiZWxGb3JtYXRTZWxlY3QiLCJiYWRnZVZpc2libGVTZWxlY3QiLCJiYWRnZURlbGV0ZUJ1dHRvbiIsImJhZGdlUG9zaXRpb25CdXR0b25zIiwiYmFkZ2VQb3NpdGlvbkxhYmVsIiwiYmFkZ2VHcm91cFNlbGVjdCIsImdyb3VwTmFtZU1vZGFsIiwiZ3JvdXBOYW1lSW5wdXQiLCJncm91cE5hbWVDYW5jZWxCdG4iLCJncm91cE5hbWVDcmVhdGVsQnRuIiwiaXRlbUNvbW1lbnRNb2RhbCIsIml0ZW1Db21tZW50SW5wdXQiLCJpdGVtQ29tbWVudElkSW5wdXQiLCJpdGVtQ29tbWVudENhbmNlbEJ0biIsIml0ZW1Db21tZW50QXBwbHlCdG4iLCJzZWxlY3RJdGVtQWxsQ2hlY2tib3giLCJzZXR0aW5nTW9kYWwiLCJzZXR0aW5nQnV0dG9uIiwic2V0dGluZ0Nsb3NlQnV0dG9uIiwidGhlbWVMaWdodEJ0biIsInRoZW1lRGFya0J0biIsInRoZW1lRGV2aWNlQnRuIiwiaW1wb3J0RmlsZUlucHV0IiwiaW1wb3J0QnRuIiwic3RvcmVDb3VudCIsInN0b3JlTGlzdCIsInN0b3JlRW1wdHkiLCJ0b2FzdFBhcmVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJlbWl0IiwidXBkYXRlUXVhbGl0eVZpc2liaWxpdHkiLCJnZXRTZWxlY3RlZENhcHR1cmVGb3JtYXQiLCJnZXRTZWxlY3RlZENhcHR1cmVBcmVhIiwiYmluZFN5bmMiLCJmaXJlU2l6ZSIsImlzRmluaXRlIiwiYnRuIiwiZGF0YXNldCIsImNvbG9yTmFtZSIsImlzSXRlbVNoYXBlIiwiaXNMYWJlbEZvcm1hdCIsInBvc2l0aW9uTmFtZSIsImNsYXNzTGlzdCIsImFwcGx5VGhlbWUiLCJjbGljayIsInNlbGVjdGVkIiwiY2hlY2tlZCIsImNhbmNlbEhvdmVyT3V0Iiwic2NoZWR1bGVIb3Zlck91dCIsImhhbmRsZXIiLCJhcnIiLCJoIiwiYXBwbHlUb2FzdE1lc3NhZ2VzIiwiYXBwbHlTdG9yZSIsInJlbmRlclN0YXR1cyIsInJlbmRlclRvZ2dsZSIsInJlbmRlckxpc3QiLCJzZWxlY3RSYWRpb0J5VmFsdWUiLCJhcHBseUNhcHR1cmVPcHRpb25zVG9nZ2xlVUkiLCJhcHBseUJhZGdlQ29sb3JVSSIsImFwcGx5QmFkZ2VQb3NpdG9uVUkiLCJhcHBseUJhZGdlR3JvdXBTZWxlY3RVSSIsImdldEV4aXN0aW5nR3JvdXBzIiwic3R5bGUiLCJjbGFzc05hbWUiLCJkb3QiLCJjcmVhdGVFbGVtZW50IiwibXNnS2V5IiwiZ2V0U3RhdHVzTWVzc2FnZSIsInJlcGxhY2VDaGlsZHJlbiIsImRpc2FibGVGb3JtQ29udHJvbHMiLCJpY29uIiwiYWxsQ2hlY2tlZCIsImdyb3VwcyIsImdyb3VwQnlHcm91cCIsImdyb3VwS2V5cyIsImxvY2FsZUNvbXBhcmUiLCJmcmFnIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImdLZXkiLCJzZWN0aW9uIiwicmVuZGVyR3JvdXBTZWN0aW9uIiwiYXBwZW5kQ2hpbGQiLCJnSXRlbXMiLCJpc0NvbGxhcHNlZCIsImhlYWRlciIsImNoZWNrYm94V3JhcCIsImNoZWNrYm94IiwiYXBwZW5kIiwibGVmdCIsImljb25TcGVjIiwiY3JlYXRlU3ZnSWNvbiIsInVsIiwiYXR0YWNoVWxEbkRIYW5kbGVycyIsInNlbGVjdENoZWNrZWQiLCJyZW5kZXJJdGVtIiwiaXNNaXNzaW5nIiwibGlCYXNlIiwibGkiLCJkcmFnZ2FibGUiLCJwYXJlbnRFbGVtZW50IiwicHJvdG90eXBlIiwiaW5kZXhPZiIsImNhbGwiLCJjaGlsZHJlbiIsImRhdGFUcmFuc2ZlciIsImVmZmVjdEFsbG93ZWQiLCJwYXJlbnQiLCJlbmRJbmRleCIsImNoZWNrYm94U3R5bGUiLCJiYWRnZVN0eWxlIiwiYmFkZ2UiLCJtYWluIiwiY2hpcCIsImNvbW1lbnRCdG4iLCJnZW5lcmF0ZUNvbW1lbnRCdG4iLCJwcmV2ZW50RGVmYXVsdCIsInRhcmdldExpIiwiY2xvc2VzdCIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJpc0FmdGVyIiwiY2xpZW50WSIsInRvcCIsImluc2VydEJlZm9yZSIsIm5leHRTaWJsaW5nIiwibSIsInF1ZXJ5U2VsZWN0b3IiLCJpc0pwZWciLCJ0b2dnbGUiLCJkaXNhYmxlZCIsInJhZGlvcyIsInJhbmdlRWwiLCJudW1iZXJFbCIsIm9uVmFsdWUiLCJyZWFkTnVtIiwiZmFsbGJhY2siLCJOYU4iLCJzeW5jIiwicmF3U3RyIiwiTkVHQVRJVkVfSU5GSU5JVFkiLCJQT1NJVElWRV9JTkZJTklUWSIsInN0ZXAiLCJjbGFtcGVkIiwiY2xhbXAiLCJyb3VuZGVkIiwiZml4ZWQiLCJ0b0ZpeGVkIiwiY29udHJvbHMiLCJlbmFibGVBbGwiLCJlbmFibGVJZ25vcmVPbmx5IiwiZW5hYmxlTm9uZSIsInNob3VsZEVuYWJsZSIsImhhc0F0dHJpYnV0ZSIsInRvZ2dsZUF0dHJpYnV0ZSIsImV4cGFuZGVkIiwiaW5uZXJIVE1MIiwiZ2V0QmFkZ2VDb2xvclN0eWxlTmFtZSIsInRvTG93ZXJDYXNlIiwiYnV0dG9uIiwicmVwbGFjZUFsbCIsImV4aXN0aW5nR3JvdXBzIiwiZGVmYXV0R3JvdXAiLCJtYWtlT3B0Iiwibm9ybWFsaXplIiwiY3JlYXRlT3B0IiwiZG9jdW1lbnRFbGVtZW50Iiwid2luZG93IiwibWF0Y2hNZWRpYSIsIm1hdGNoZXMiLCJsaUVsZW0iLCJhV3JhcEVsZW0iLCJhRWxlbSIsImhyZWYiLCJleHBvcnRCdG5FbGVtIiwiZXhwb3J0SWNvbkRlZiIsImV4cG9ydEljb24iLCJyZW1vdmVCdG5FbGVtIiwicmVtb3ZlSWNvbkRlZiIsInJlbW92ZUljb24iLCJ0b2FzdE1lc3NhZ2UiLCJ0b2FzdEVsZW0iLCJnZW5lcmF0ZVRvYXN0TWVzc2FnZSIsInRvYXN0SWNvbkRlZiIsInRvYXN0SWNvbiIsInZhcmlhbnQiLCJ0b2FzdEJvZHkiLCJkZXNjIiwiY2xvc2VCdG4iLCJjbG9zZUljb25EZWYiLCJjbG9zZUljb24iLCJ0aW1lcklkIiwiaXNDb25uZWN0ZWQiLCJzZWxlY3RvciIsInRhZyIsIm5vZGUiLCJzdmdOUyIsInN2ZyIsImNyZWF0ZUVsZW1lbnROUyIsInBhdGhzIiwic2VnIiwicGF0aCIsImNvbnRyb2xsZXIiLCJyZWFkeVN0YXRlIiwib25jZSJdLCJzb3VyY2VSb290IjoiIn0=