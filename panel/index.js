(()=>{"use strict";const e="PING",t="TOGGLE_SELECT",s="RENDER",i="CLEAR",a="HOVER",n="MEASURE_SIZE",o="SELECTED",r="MISSING_IDS",c="CONTENT_SIZE_RESULT",l="ACTIVE_TAB_CHANGED";function E(e){if(!e)return!0;if(e.startsWith("view-source:")||e.startsWith("data:")||e.startsWith("blob:")||e.startsWith("filesystem:"))return!0;let t;try{t=new URL(e)}catch{return!0}return!new Set(["http:","https:","file:"]).has(t.protocol)||!!new Set(["chromewebstore.google.com","chrome.google.com"]).has(t.hostname)}const d=["Gray","Red","Yellow","Green","Blue","Lime","Purple","Pink","Orange","Cyan"],h=["circle","square"],u=["right-top-outside","right-top-inside","right-outside","right-inside","right-bottom-outside","right-bottom-inside","top-outside","top-inside","center","bottom-outside","bottom-inside","left-top-outside","left-top-inside","left-outside","left-inside","left-bottom-outside","left-bottom-inside"],p="__ungrouped__",T="";function m(e){if(!e||"object"!=typeof e)return!1;const t=e.anchor;if(!t||"object"!=typeof t)return!1;const s=t;return"css"===s.kind&&"string"==typeof s.value&&("number"==typeof s.version||1===s.version)}const _={status:"DISCONNECTED",tabId:null,pageKey:"",pageKeys:[],theme:"device",selectionEnabled:!1,items:[],defaultSize:14,defaultColor:"Blue",defaultShape:"circle",defaultPosition:"left-top-outside",defaultGroup:T,capture:{format:"png",area:"full",quality:90,scale:1,panelExpanded:!1},selectItems:[],missingIds:[],toastMessages:[]},S=function(e,t){const s="screenStateByPage";async function i(){return(await chrome.storage.local.get(s))[s]??{}}async function a(e){await chrome.storage.local.set({[s]:e})}return{key:s,readAll:i,writeAll:a,get:async function(e){const s=(await i())[e];return void 0!==s?s:t?t():void 0},set:async function(e,t){const s=await i();s[e]=t,await a(s)},remove:async function(e){const t=await i();e in t&&(delete t[e],await a(t))},clear:async function(){await a({})}}}(0,()=>({items:[],nextId:1,defaultSize:14,defaultColor:"Blue",defaultShape:"circle",defaultPosition:"left-top-outside",defaultGroup:T})),g=function(){const e="themeMode";return{key:e,get:async function(){const t=(await chrome.storage.local.get(e))[e];return void 0===t?"device":t},set:async function(t){await chrome.storage.local.set({[e]:t})},remove:async function(){await chrome.storage.local.remove(e)}}}();async function A(e,t){const s=await S.get(e);if(t.removedIds?.length){const e=new Set(t.removedIds);s.items=s.items.filter(t=>!e.has(t.id))}if(t.added?.length)for(const e of t.added){const t={id:s.nextId++,label:1/0,anchor:e.anchor,size:e.size??s.defaultSize,color:e.color??s.defaultColor,shape:e.shape??s.defaultShape,position:e.position??s.defaultPosition,group:e.group??s.defaultGroup,comment:e.comment??""};s.items.push(t)}return s.items=f(s.items),await S.set(e,s),s}function f(e){const t=new Map;e.forEach((e,s)=>{const i=(e.group??"").trim();t.has(i)||t.set(i,[]),t.get(i).push({index:s,item:e})});const s=e.slice();for(const[,e]of t)e.sort((e,t)=>e.item.label!==t.item.label?e.item.label-t.item.label:e.item.id-t.item.id),e.forEach(({index:e,item:t},i)=>{const a=i+1;t.label!==a&&(s[e]={...t,label:a})});return s}function C(e,t){return chrome.i18n.getMessage(e,t)||e}const R={get:C,localize:function(e=document){e.querySelectorAll("[data-i18n]").forEach(e=>{const t=e.getAttribute("data-i18n");t&&(e.textContent=C(t))}),e.querySelectorAll("[data-i18n-attr]").forEach(e=>{const t=e.getAttribute("data-i18n-attr");if(t)for(const s of t.split(";")){const[t,i]=s.split(":").map(e=>e?.trim());t&&i&&e.setAttribute(t,C(i))}})}},O="RESTRICTED",I="CONNECTING",N="CONNECTED",L="DISCONNECTED",y={RESTRICTED:"status_restricted",CONNECTING:"status_connecting",CONNECTED:"status_connected",DISCONNECTED:"status_disconnected"},v={RESTRICTED:"connect-status--restricted",CONNECTING:"connect-status--connecting",CONNECTED:"connect-status--connected",DISCONNECTED:"connect-status--disconnected"};var b,D;!function(e){e.INIT="INIT",e.CONNECTED="CONNECTED",e.SET_STATUS="SET_STATUS",e.RESTORE_STATE="RESTORE_STATE",e.SET_MISSING_IDS="SET_MISSING_IDS",e.TOGGLE_SELECT="TOGGLE_SELECT",e.CLEAR_ALL="CLEAR_ALL",e.CONTENT_SELECTED="CONTENT_SELECTED",e.SET_BADGE_SIZE="SET_BADGE_SIZE",e.SET_BADGE_COLOR="SET_BADGE_COLOR",e.SET_BADGE_SHAPE="SET_BADGE_SHAPE",e.BADGE_DELETE="BADGE_DELETE",e.SET_BADGE_POSITION="SET_BADGE_POSITION",e.SET_CAPTURE_FORMAT="SET_CAPTURE_FORMAT",e.SET_CAPTURE_AREA="SET_CAPTURE_AREA",e.SET_CAPTURE_QUALITY="SET_CAPTURE_QUALITY",e.SET_CAPTURE_SCALE="SET_CAPTURE_SCALE",e.TOGGLE_CAPTURE_PANEL="TOGGLE_CAPTURE_PANEL",e.MEASURE_CONTENT_SIZE="MEASURE_CONTENT_SIZE",e.CAPTURE_REQUESTED="CAPTURE_REQUESTED",e.CAPTURE_SUCCEEDED="CAPTURE_SUCCEEDED",e.CAPTURE_FAILED="CAPTURE_FAILED",e.REORDER_ITEMS="REORDER_ITEMS",e.SET_GROUP="SET_GROUP",e.PORT_DISCONNECTED="PORT_DISCONNECTED",e.CLOSE_PANEL_REQUESTED="CLOSE_PANEL_REQUESTED",e.ITEM_SELECTION_CHANGED="ITEM_SELECTION_CHANGED",e.ITEM_HOVER_IN="ITEM_HOVER_IN",e.ITEM_HOVER_OUT="ITEM_HOVER_OUT",e.UPDATE_ITEM_COMMENT="UPDATE_ITEM_COMMENT",e.SET_THEME="SET_THEME",e.UPDATE_THEME="UPDATE_THEME",e.STORE_RELOAD_REQUESTED="STORE_RELOAD_REQUESTED",e.STORE_RELOAD_SUCCEEDED="STORE_RELOAD_SUCCEEDED",e.IMPORT_SCREAN_STATE_FILE="IMPORT_SCREAN_STATE_FILE",e.IMPORT_FAILED="IMPORT_FAILED",e.TOAST_DISMISS_REQUESTED="TOAST_DISMISS_REQUESTED",e.REMOVE_SCREEN_STATE_BY_PAGE="REMOVE_SCREEN_STATE_BY_PAGE",e.EXPORT_SCREEN_STATE_BY_PAGE="EXPORT_SCREEN_STATE_BY_PAGE",e.EXPORT_FAILED="EXPORT_FAILED"}(b||(b={})),function(e){e.RENDER_CONTENT="RENDER_CONTENT",e.TOGGLE_SELECT_ON_CONTENT="TOGGLE_SELECT_ON_CONTENT",e.CLEAR_CONTENT="CLEAR_CONTENT",e.HOVER="HOVER",e.MEASURE_CONTENT_SIZE="MEASURE_CONTENT_SIZE",e.CAPTURE="CAPTURE",e.CLEAR_STATE="CLEAR_STATE",e.PERSIST_STATE="PERSIST_STATE",e.SET_THEME="SET_THEME",e.UPDATE_THEME="UPDATE_THEME",e.READ_SCREEN_STATE_STORE="READ_SCREEN_STATE_STORE",e.IMPORT_SCREAN_STATE_FILE="IMPORT_SCREAN_STATE_FILE",e.REMOVE_SCREEN_STATE_STORE_BY_PAGE_KEY="REMOVE_SCREEN_STATE_STORE_BY_PAGE_KEY",e.EXPORT_SCREEN_STATE_BY_PAGE_KEY="EXPORT_SCREEN_STATE_BY_PAGE_KEY",e.NOTIFY_ERROR="NOTIFY_ERROR"}(D||(D={}));const P="spsk:panel-content:v1";class w{rpc;constructor(e){this.rpc=e}send(e){const t={id:crypto.randomUUID(),expectReply:!1,...e};return this.rpc.send(t)}render(e){return this.send({type:s,payload:{items:e}})}toggleSelect(e){return this.send({type:t,payload:{enabled:e}})}clear(){return this.send({type:i})}hover(e){return this.send({type:a,payload:{id:e}})}measureSize(){return this.send({type:n})}ping(){const t={id:crypto.randomUUID(),expectReply:!0,type:e};return this.rpc.send(t,5e3)}}class M{port;pending=new Map;alive=!0;constructor(e){this.port=e,this.port.onMessage.addListener(e=>{(function(e){return"object"==typeof e&&null!==e&&"id"in e&&"ok"in e})(e)&&(this.pending.get(e.id)?.(e),this.pending.delete(e.id))}),this.port.onDisconnect.addListener(()=>{this.alive=!1;const e=chrome.runtime.lastError?.message??"disconnected";for(const[t,s]of this.pending)s({id:t,ok:!1,error:e});this.pending.clear()})}get isAlive(){return this.alive}send(e,t=5e3){return new Promise(s=>{if(!this.alive)return s(void e.expectReply);if(e.expectReply){const i=setTimeout(()=>{this.pending.delete(e.id),s(void 0)},t);this.pending.set(e.id,e=>{clearTimeout(i),s(e)})}try{this.port.postMessage(e)}catch{return e.expectReply&&this.pending.delete(e.id),void s(void 0)}e.expectReply||s(void 0)})}}const G=new Set;async function U(e,t,s){return await new Promise((i,a)=>{chrome.debugger.sendCommand(e,t,s??{},e=>{const t=function(){const e=chrome.runtime.lastError;return e?new Error(e.message||String(e)):null}();t?a(t):i(e??{})})})}async function k(e){const t=await chrome.tabs.get(e.tabId);if(!t.id||E(t.url))return void console.warn("Capturing is not possible due to restricted URL:",t.url);const s={tabId:t.id},i=e.format??"png",a=e.settleMs??500,n=e.scale??1,o=e.area??"full";let r=!1,c=!1;try{r=await async function(e){const t=e.tabId??null;return await new Promise((s,i)=>{chrome.debugger.attach(e,"1.3",()=>{const e=chrome.runtime.lastError;if(!e)return null!=t&&G.add(t),void s(!0);const a=e.message||"";a.includes("Another debugger is already attached")?null!=t&&G.has(t)?s(!1):i(new Error("Debugger is already attached by another client (DevTools/extension).")):i(new Error(a))})})}(s),await U(s,"Page.enable"),(e.bringToFront??1)&&await U(s,"Page.bringToFront");const l=await async function(e,t,s,i){if("viewport"===t){const{x:t,y:i,width:a,height:n}=await async function(e){const t=(await U(e,"Page.getLayoutMetrics")).cssVisualViewport;return{x:Math.max(0,0|Math.floor(t.pageX)),y:Math.max(0,0|Math.floor(t.pageY)),width:Math.max(1,0|Math.ceil(t.clientWidth)),height:Math.max(1,0|Math.ceil(t.clientHeight))}}(e);return{useOverride:!1,clip:{x:t,y:i,width:a,height:n,scale:s},captureBeyondViewport:!0,shouldScrollTop:!1}}const a=Math.max(1,0|Math.ceil(i.width)),n=Math.max(1,0|Math.ceil(i.height));return{useOverride:!0,metrics:{width:a,height:n,deviceScaleFactor:1,mobile:!1,screenWidth:a,screenHeight:n,positionX:0,positionY:0},clip:{x:0,y:0,width:a,height:n,scale:s},captureBeyondViewport:!0,shouldScrollTop:!0}}(s,o,n,e.contentSize);l.shouldScrollTop&&await U(s,"Runtime.evaluate",{expression:"window.scrollTo(0,0)"}),l.useOverride&&l.metrics&&(c=!0,await U(s,"Emulation.setDeviceMetricsOverride",l.metrics)),await new Promise(e=>setTimeout(e,a));const E={format:i,fromSurface:!0,captureBeyondViewport:l.captureBeyondViewport,clip:l.clip};"jpeg"===i&&"number"==typeof e.quality&&(E.quality=Math.min(100,Math.max(0,Math.round(e.quality))));const{data:d}=await U(s,"Page.captureScreenshot",E),h=`data:${"png"===i?"image/png":"image/jpeg"};base64,${d}`,u=e.filename??function(e,t){let s=(e.title&&e.title.trim()?e.title:"")||(()=>{try{return new URL(e.url??"").host||"page"}catch{return"page"}})();return s=s.replace(/[\\/:*?"<>|]/g,"_").replace(/\s+/g," ").trim(),s.length>80&&(s=s.slice(0,80)),`${s}-${(new Date).toISOString().replace(/[:.]/g,"-")}.${t}`}(t,i);return await chrome.downloads.download({url:h,filename:u,saveAs:!1})}finally{if(c)try{await U(s,"Emulation.clearDeviceMetricsOverride")}catch{}if(r)try{await async function(e){const t=e.tabId??null;null!=t&&G.has(t)&&(await async function(e){await new Promise(t=>{chrome.debugger.detach(e,()=>t())})}(e),G.delete(t))}(s)}catch{}}}async function B(e,t,s={}){const{saveAs:i=!1,prefix:a="specsketch-screen-state"}=s,n={format:"specsketch-export",kind:"screen-state",version:1,exportedAt:(new Date).toISOString(),pageKey:t,items:e.items},o=`data:application/json;charset=utf-8;base64,${function(e){const t=(new TextEncoder).encode(e);let s="";for(const e of t)s+=String.fromCharCode(e);return btoa(s)}(JSON.stringify(n,null,2))}`,r=function(e,t){return`${e}_${(t??"").replace(/https?:\/\//,"").replace(/[^a-zA-Z0-9._-]+/g,"-").replace(/-+/g,"-").replace(/^-|-$/g,"").slice(0,120)||"page"}_${function(e=new Date){const t=(e,t=2)=>String(e).padStart(t,"0"),s=-e.getTimezoneOffset(),i=s>=0?"+":"-",a=t(Math.floor(Math.abs(s)/60)),n=t(Math.abs(s)%60);return`${e.getFullYear()}-${t(e.getMonth()+1)}-${t(e.getDate())}_${t(e.getHours())}-${t(e.getMinutes())}-${t(e.getSeconds())}${i}${a}${n}`}()}.json`}(a,t);return await chrome.downloads.download({url:o,filename:r,saveAs:i})}async function x(e,t){const s=/\.json$/i.test(e.name),i="application/json"===e.type||"text/json"===e.type||""===e.type;if(!s&&!i)throw new Error(R.get("import_file_not_json"));let a;try{const t=await e.text();a=JSON.parse(t)}catch{throw new Error(R.get("import_payload_invalid"))}if(!function(e){if(!e||"object"!=typeof e)return!1;const t=e;return"specsketch-export"===t.format&&"screen-state"===t.kind&&"number"==typeof t.version&&"string"==typeof t.pageKey&&!!Array.isArray(t.items)&&t.items.every(m)}(a))throw new Error(R.get("import_payload_invalid"));const n=a.items,o=await S.get(t),r=e=>`${e.anchor.kind}:${e.anchor.version}:${e.anchor.value}`,c=new Set((o?.items??[]).map(r)),l=n.filter(e=>!c.has(r(e))).sort((e,t)=>t.id-e.id).map(e=>({anchor:e.anchor,size:e.size,color:e.color,shape:e.shape,position:e.position,group:e.group,comment:e.comment}));return await A(t,{added:l})}var H;chrome.debugger.onDetach.addListener(e=>{const t=e.tabId;"number"==typeof t&&G.delete(t)}),function(e){e.TOGGLE_SELECT="TOGGLE_SELECT",e.CLEAR="CLEAR",e.CAPTURE="CAPTURE",e.BADGE_SIZE_CHANGE="BADGE_SIZE_CHANGE",e.BADGE_COLOR_SELECT="BADGE_COLOR_SELECT",e.BADGE_SHAPE_CHANGE="BADGE_SHAPE_CHANGE",e.BADGE_DELETE="BADGE_DELETE",e.BADGE_POSITION_SELECT="BADGE_POSITION_SELECT",e.SET_GROUP="SET_GROUP",e.CAPTURE_FORMAT_CHANGE="CAPTURE_FORMAT_CHANGE",e.CAPTURE_AREA_CHANGE="CAPTURE_AREA_CHANGE",e.CAPTURE_QUALITY_CHANGE="CAPTURE_QUALITY_CHANGE",e.CAPTURE_SCALE_CHANGE="CAPTURE_SCALE_CHANGE",e.TOGGLE_CAPTURE_PANEL="TOGGLE_CAPTURE_PANEL",e.REORDER_ITEMS="REORDER_ITEMS",e.ITEM_SELECTION_CHANGED="ITEM_SELECTION_CHANGED",e.ITEM_HOVER_IN="ITEM_HOVER_IN",e.ITEM_HOVER_OUT="ITEM_HOVER_OUT",e.ITEM_COMMENT_APPLY="ITEM_COMMENT_APPLY",e.UPDATE_THEME="UPDATE_THEME",e.SETTING_MODAL_SHOW="SETTING_MODAL_SHOW",e.IMPORT_SCREAN_STATE_FILE="IMPORT_SCREAN_STATE_FILE",e.TOAST_DISMISS_REQUESTED="TOAST_DISMISS_REQUESTED",e.REMOVE_PAGE_CLICK="REMOVE_PAGE_CLICK",e.EXPORT_PAGE_CLICK="EXPORT_PAGE_CLICK"}(H||(H={}));class ${view;model=structuredClone(_);conn=null;currentWindowId=null;static REQUIRES_CONN=new Set([D.RENDER_CONTENT,D.TOGGLE_SELECT_ON_CONTENT,D.CLEAR_CONTENT,D.HOVER]);constructor(e){this.view=e}async start(){this.dispatch({type:b.INIT});const{ok:e}=await this.ensureConnectionAlive({forceReconnect:!0});if(!e)return void this.view.render(this.model);this.registerViewHandlers(),this.view.render(this.model);const t=await chrome.windows.getCurrent();this.currentWindowId=t.id??null,chrome.runtime.onMessage.addListener(e=>{if(e.type!==l)return;const t=e.payload.windowId;null!=this.currentWindowId&&this.currentWindowId===t&&this.ensureConnectionAlive({forceReconnect:!0})})}registerViewHandlers(){this.view.on(H.TOGGLE_SELECT,()=>this.dispatch({type:b.TOGGLE_SELECT})),this.view.on(H.CLEAR,()=>this.dispatch({type:b.CLEAR_ALL})),this.view.on(H.CAPTURE,()=>this.dispatch({type:b.MEASURE_CONTENT_SIZE})),this.view.on(H.BADGE_SIZE_CHANGE,({size:e})=>this.dispatch({type:b.SET_BADGE_SIZE,size:e})),this.view.on(H.BADGE_COLOR_SELECT,({color:e})=>this.dispatch({type:b.SET_BADGE_COLOR,color:e})),this.view.on(H.BADGE_SHAPE_CHANGE,({shape:e})=>this.dispatch({type:b.SET_BADGE_SHAPE,shape:e})),this.view.on(H.BADGE_DELETE,()=>this.dispatch({type:b.BADGE_DELETE})),this.view.on(H.BADGE_POSITION_SELECT,({position:e})=>this.dispatch({type:b.SET_BADGE_POSITION,position:e})),this.view.on(H.TOGGLE_CAPTURE_PANEL,()=>this.dispatch({type:b.TOGGLE_CAPTURE_PANEL})),this.view.on(H.CAPTURE_FORMAT_CHANGE,({format:e})=>this.dispatch({type:b.SET_CAPTURE_FORMAT,format:e})),this.view.on(H.CAPTURE_AREA_CHANGE,({area:e})=>this.dispatch({type:b.SET_CAPTURE_AREA,area:e})),this.view.on(H.CAPTURE_QUALITY_CHANGE,({quality:e})=>this.dispatch({type:b.SET_CAPTURE_QUALITY,quality:e})),this.view.on(H.CAPTURE_SCALE_CHANGE,({scale:e})=>this.dispatch({type:b.SET_CAPTURE_SCALE,scale:e})),this.view.on(H.REORDER_ITEMS,({fromId:e,fromIndex:t,toIndex:s})=>this.dispatch({type:b.REORDER_ITEMS,fromId:e,fromIndex:t,toIndex:s})),this.view.on(H.SET_GROUP,({group:e})=>this.dispatch({type:b.SET_GROUP,group:e})),this.view.on(H.ITEM_SELECTION_CHANGED,e=>this.dispatch({type:b.ITEM_SELECTION_CHANGED,...e})),this.view.on(H.ITEM_HOVER_IN,({id:e})=>this.dispatch({type:b.ITEM_HOVER_IN,id:e})),this.view.on(H.ITEM_HOVER_OUT,()=>this.dispatch({type:b.ITEM_HOVER_OUT})),this.view.on(H.ITEM_COMMENT_APPLY,({id:e,comment:t})=>this.dispatch({type:b.UPDATE_ITEM_COMMENT,id:e,comment:t})),this.view.on(H.UPDATE_THEME,({theme:e})=>this.dispatch({type:b.UPDATE_THEME,theme:e})),this.view.on(H.SETTING_MODAL_SHOW,()=>this.dispatch({type:b.STORE_RELOAD_REQUESTED})),this.view.on(H.IMPORT_SCREAN_STATE_FILE,({file:e})=>this.dispatch({type:b.IMPORT_SCREAN_STATE_FILE,file:e})),this.view.on(H.TOAST_DISMISS_REQUESTED,({uuid:e})=>this.dispatch({type:b.TOAST_DISMISS_REQUESTED,uuid:e})),this.view.on(H.REMOVE_PAGE_CLICK,({pageKey:e})=>this.dispatch({type:b.REMOVE_SCREEN_STATE_BY_PAGE,pageKey:e})),this.view.on(H.EXPORT_PAGE_CLICK,({pageKey:e})=>this.dispatch({type:b.EXPORT_SCREEN_STATE_BY_PAGE,pageKey:e}))}dispatch(e){const{model:t,effects:s}=function(e,t){switch(t.type){case b.INIT:return{model:e,effects:[{kind:D.SET_THEME}]};case b.CONNECTED:return{model:{...e,tabId:t.tabId,pageKey:t.pageKey},effects:[]};case b.SET_STATUS:return t.status===N?{model:{...e,status:t.status},effects:[]}:{model:{...e,items:[],status:t.status},effects:[]};case b.RESTORE_STATE:return{model:{...e,items:t.state.items,defaultSize:t.state.defaultSize,defaultColor:t.state.defaultColor,defaultShape:t.state.defaultShape,defaultPosition:t.state.defaultPosition,defaultGroup:t.state.defaultGroup},effects:[{kind:D.RENDER_CONTENT,items:t.state.items}]};case b.SET_MISSING_IDS:return{model:{...e,missingIds:t.missingIds},effects:[]};case b.TOGGLE_SELECT:{const t=!e.selectionEnabled;return{model:{...e,selectionEnabled:t},effects:[{kind:D.TOGGLE_SELECT_ON_CONTENT,enabled:t}]}}case b.CLEAR_ALL:return{model:{...e,items:[]},effects:[{kind:D.CLEAR_CONTENT},{kind:D.CLEAR_STATE}]};case b.CONTENT_SELECTED:return{model:e,effects:[]};case b.TOGGLE_CAPTURE_PANEL:return{model:{...e,capture:{...e.capture,panelExpanded:!e.capture.panelExpanded}},effects:[]};case b.SET_BADGE_SIZE:{const s=e.items.map(s=>({...s,...e.selectItems.includes(s.id)?{size:t.size}:{}}));return{model:{...e,defaultSize:t.size,items:s},effects:[{kind:D.PERSIST_STATE},{kind:D.RENDER_CONTENT,items:s}]}}case b.SET_BADGE_COLOR:{const s=e.items.map(s=>({...s,...e.selectItems.includes(s.id)?{color:t.color}:{}}));return{model:{...e,defaultColor:t.color,items:s},effects:[{kind:D.PERSIST_STATE},{kind:D.RENDER_CONTENT,items:s}]}}case b.SET_BADGE_SHAPE:{const s=e.items.map(s=>({...s,...e.selectItems.includes(s.id)?{shape:t.shape}:{}}));return{model:{...e,defaultShape:t.shape,items:s},effects:[{kind:D.PERSIST_STATE},{kind:D.RENDER_CONTENT,items:s}]}}case b.BADGE_DELETE:{const t=f(e.items.filter(t=>!e.selectItems.includes(t.id)));return{model:{...e,items:t},effects:[{kind:D.PERSIST_STATE},{kind:D.RENDER_CONTENT,items:t}]}}case b.SET_BADGE_POSITION:{const s=e.items.map(s=>({...s,...e.selectItems.includes(s.id)?{position:t.position}:{}}));return{model:{...e,defaultPosition:t.position,items:s},effects:[{kind:D.PERSIST_STATE},{kind:D.RENDER_CONTENT,items:s}]}}case b.SET_GROUP:{const s=function(e,t,s){const i=(s??"").trim();let a=0;return e.sort((e,t)=>t.id-e.id).map(e=>{if(t.includes(e.id)&&e.group!==i){const t=Number.MAX_SAFE_INTEGER-a++;return{...e,group:i,label:t}}return e})}(e.items,e.selectItems,t.group),i=f(s);return{model:{...e,defaultGroup:t.group,items:i},effects:[{kind:D.PERSIST_STATE},{kind:D.RENDER_CONTENT,items:i}]}}case b.SET_CAPTURE_FORMAT:return{model:{...e,capture:{...e.capture,format:t.format}},effects:[]};case b.SET_CAPTURE_AREA:return{model:{...e,capture:{...e.capture,area:t.area}},effects:[]};case b.SET_CAPTURE_QUALITY:return{model:{...e,capture:{...e.capture,quality:t.quality}},effects:[]};case b.SET_CAPTURE_SCALE:return{model:{...e,capture:{...e.capture,scale:t.scale}},effects:[]};case b.MEASURE_CONTENT_SIZE:return{model:e,effects:[{kind:D.MEASURE_CONTENT_SIZE}]};case b.CAPTURE_REQUESTED:return null==e.tabId?{model:e,effects:[{kind:D.NOTIFY_ERROR,error:"No tabId"}]}:{model:e,effects:[{kind:D.CAPTURE,payload:{tabId:e.tabId,format:e.capture.format,area:e.capture.area,quality:e.capture.quality,scale:e.capture.scale,contentSize:t.contentSize}}]};case b.CAPTURE_SUCCEEDED:return{model:e,effects:[]};case b.CAPTURE_FAILED:return{model:e,effects:[{kind:D.NOTIFY_ERROR,error:t.error}]};case b.REORDER_ITEMS:{const s=function(e,t,s,i){if(i<0||i>=e.length)throw new RangeError(`toIndex out of range: ${i}`);const a=e.findIndex(e=>e.id===t);if(-1===a)throw new Error(`Item not found for id=${t}`);if(i<0||i>=e.filter(t=>t.group===e[a].group).length)throw new RangeError(`toIndex out of range: ${i}`);const n=i+(s<i?1.1:.1);return e.map(e=>e.id===t?{...e,label:n}:e)}(e.items,t.fromId,t.fromIndex,t.toIndex),i=f(s);return{model:{...e,items:i},effects:[{kind:D.PERSIST_STATE},{kind:D.RENDER_CONTENT,items:i}]}}case b.ITEM_SELECTION_CHANGED:if("id"in t){const s=function(e,t,s){return t&&!s.includes(e)?[...s,e]:s.filter(t=>t!==e)}(t.id,t.isCheck,e.selectItems);return{model:{...e,selectItems:s},effects:[]}}if("group"in t){const s=function(e,t,s,i){const a=e.trim(),n=i.filter(e=>(e.group??T).trim()===a).map(e=>e.id);if(0===n.length)return s;if(t){const e=new Set(s);for(const t of n)e.add(t);return[...e]}{const e=new Set(n);return s.filter(t=>!e.has(t))}}(t.group,t.isCheck,e.selectItems,e.items);return{model:{...e,selectItems:s},effects:[]}}{const a=(s=t.allCheck,i=e.items,s?i.map(e=>e.id):[]);return{model:{...e,selectItems:a},effects:[]}}case b.ITEM_HOVER_IN:return{model:e,effects:[{kind:D.HOVER,id:t.id}]};case b.ITEM_HOVER_OUT:return{model:e,effects:[{kind:D.HOVER,id:null}]};case b.UPDATE_ITEM_COMMENT:{const s=e.items.map(e=>({...e,...e.id===t.id?{comment:t.comment}:{}}));return{model:{...e,items:s},effects:[{kind:D.PERSIST_STATE},{kind:D.RENDER_CONTENT,items:s}]}}case b.PORT_DISCONNECTED:return{model:{...e,status:L,selectionEnabled:!1},effects:[{kind:D.TOGGLE_SELECT_ON_CONTENT,enabled:!1}]};case b.SET_THEME:return{model:{...e,theme:t.theme},effects:[]};case b.UPDATE_THEME:return{model:{...e,theme:t.theme},effects:[{kind:D.UPDATE_THEME,theme:t.theme}]};case b.STORE_RELOAD_REQUESTED:return{model:e,effects:[{kind:D.READ_SCREEN_STATE_STORE}]};case b.STORE_RELOAD_SUCCEEDED:return{model:{...e,pageKeys:t.pageKeys},effects:[]};case b.IMPORT_SCREAN_STATE_FILE:return{model:e,effects:[{kind:D.IMPORT_SCREAN_STATE_FILE,file:t.file}]};case b.IMPORT_FAILED:return{model:{...e,toastMessages:t.toastMessages},effects:[]};case b.TOAST_DISMISS_REQUESTED:{const s=e.toastMessages.filter(e=>e.uuid!==t.uuid);return{model:{...e,toastMessages:s},effects:[]}}case b.REMOVE_SCREEN_STATE_BY_PAGE:return{model:e,effects:[{kind:D.REMOVE_SCREEN_STATE_STORE_BY_PAGE_KEY,pageKey:t.pageKey}]};case b.EXPORT_SCREEN_STATE_BY_PAGE:return{model:e,effects:[{kind:D.EXPORT_SCREEN_STATE_BY_PAGE_KEY,pageKey:t.pageKey}]};case b.EXPORT_FAILED:return{model:e,effects:[{kind:D.NOTIFY_ERROR,error:t.error}]};default:return{model:e,effects:[]}}var s,i}(this.model,e);this.model=t,this.view.render(this.model),this.execEffects(s).catch(console.error)}async execEffects(e){if(e.some(e=>$.REQUIRES_CONN.has(e.kind))){const e=await this.ensureConnectionAlive();if(!e.ok||e.contextChanged)return}for(const t of e)switch(t.kind){case D.RENDER_CONTENT:await(this.conn?.api.render(t.items));break;case D.TOGGLE_SELECT_ON_CONTENT:await(this.conn?.api.toggleSelect(t.enabled));break;case D.CLEAR_CONTENT:await(this.conn?.api.clear());break;case D.HOVER:await(this.conn?.api.hover(t.id));break;case D.CLEAR_STATE:await S.set(this.model.pageKey,{items:this.model.items,nextId:1,defaultSize:this.model.defaultSize,defaultColor:this.model.defaultColor,defaultShape:this.model.defaultShape,defaultPosition:this.model.defaultPosition,defaultGroup:this.model.defaultGroup});break;case D.PERSIST_STATE:{const e=await S.get(this.model.pageKey);await S.set(this.model.pageKey,{...e,items:this.model.items,defaultSize:this.model.defaultSize,defaultColor:this.model.defaultColor,defaultShape:this.model.defaultShape,defaultPosition:this.model.defaultPosition,defaultGroup:this.model.defaultGroup});break}case D.SET_THEME:{const e=await g.get();this.dispatch({type:b.SET_THEME,theme:e});break}case D.UPDATE_THEME:await g.set(t.theme);break;case D.READ_SCREEN_STATE_STORE:{const e=await S.readAll(),t=Object.keys(e);this.dispatch({type:b.STORE_RELOAD_SUCCEEDED,pageKeys:t});break}case D.IMPORT_SCREAN_STATE_FILE:try{const e=await x(t.file,this.model.pageKey);this.dispatch({type:b.RESTORE_STATE,state:{items:e.items,defaultSize:e.defaultSize,defaultColor:e.defaultColor,defaultShape:e.defaultShape,defaultPosition:e.defaultPosition,defaultGroup:e.defaultGroup}})}catch(e){const t=e,s={uuid:crypto.randomUUID(),message:t.message,kind:"error"};this.dispatch({type:b.IMPORT_FAILED,toastMessages:[s]})}break;case D.REMOVE_SCREEN_STATE_STORE_BY_PAGE_KEY:{await S.remove(t.pageKey);const e=await S.readAll(),s=Object.keys(e);this.dispatch({type:b.STORE_RELOAD_SUCCEEDED,pageKeys:s});const i=await S.get(this.model.pageKey);this.dispatch({type:b.RESTORE_STATE,state:{items:i.items,defaultSize:i.defaultSize,defaultColor:i.defaultColor,defaultShape:i.defaultShape,defaultPosition:i.defaultPosition,defaultGroup:i.defaultGroup}});break}case D.EXPORT_SCREEN_STATE_BY_PAGE_KEY:try{const e=await S.get(t.pageKey);await B(e,t.pageKey)}catch(e){this.dispatch({type:b.EXPORT_FAILED,error:e})}break;case D.MEASURE_CONTENT_SIZE:await(this.conn?.api.measureSize());break;case D.CAPTURE:try{await k(t.payload),this.dispatch({type:b.CAPTURE_SUCCEEDED})}catch(e){this.dispatch({type:b.CAPTURE_FAILED,error:e})}break;case D.NOTIFY_ERROR:console.error(t.error)}}async ensureConnectionAlive(e){const t=this.model.pageKey;if(!0!==e?.forceReconnect&&void 0!==await(this.conn?.api.ping()))return{ok:!0,contextChanged:!1};const s=await async function(){return(await chrome.tabs.query({active:!0,currentWindow:!0}))[0]}();if(!s?.id||E(s.url))return this.dispatch({type:b.SET_STATUS,status:O}),{ok:!1};const i=function(e,t=!1){try{const s=new URL(e);return t?`${s.origin}${s.pathname}${s.search}${s.hash}`:`${s.origin}${s.pathname}${s.search}`}catch{return e}}(s.url),a=s.id;this.dispatch({type:b.CONNECTED,tabId:a,pageKey:i}),this.dispatch({type:b.SET_STATUS,status:I});try{this.conn?.port.disconnect()}catch{}this.conn=await async function(e){await chrome.scripting.executeScript({target:{tabId:e},files:["content/main.js"]}).catch(()=>{});const t=chrome.tabs.connect(e,{name:P}),s=new M(t),i=new w(s),a=[];return t.onDisconnect.addListener(()=>a.forEach(e=>e())),{api:i,port:t,rpc:s,onDisconnect:e=>a.push(e),dispose:()=>{try{t.disconnect()}catch{}}}}(a),this.conn.onDisconnect(()=>this.dispatch({type:b.PORT_DISCONNECTED})),this.conn.port.onMessage.addListener(async e=>{if(e?.type===o){const t=await async function(e,t){const s=await S.get(e),i=Array.from(new Set(t.map(e=>e.value))).map(e=>t.find(t=>t.value===e)).filter(Boolean),a=[],n=[];for(const e of i){const t=s.items.find(t=>t.anchor.kind===e.kind&&t.anchor.value===e.value);t?a.push(t.id):n.push({anchor:e})}const o={};return a.length&&(o.removedIds=a),n.length&&(o.added=n),A(e,o)}(this.model.pageKey,e.payload.anchors);this.dispatch({type:b.RESTORE_STATE,state:{items:t.items,defaultSize:t.defaultSize,defaultColor:t.defaultColor,defaultShape:t.defaultShape,defaultPosition:t.defaultPosition,defaultGroup:t.defaultGroup}})}else e?.type===r?this.dispatch({type:b.SET_MISSING_IDS,missingIds:e.payload.missingIds}):e?.type===c&&this.dispatch({type:b.CAPTURE_REQUESTED,contentSize:e.payload})});const n=await S.get(i);return this.dispatch({type:b.RESTORE_STATE,state:{items:n.items,defaultSize:n.defaultSize,defaultColor:n.defaultColor,defaultShape:n.defaultShape,defaultPosition:n.defaultPosition,defaultGroup:n.defaultGroup}}),this.dispatch({type:b.SET_STATUS,status:N}),{ok:!0,contextChanged:!!t&&t!==i}}}const F={caretDown:{d:"M5.23 7.21a.75.75 0 011.06.02L10 10.939l3.71-3.71a.75.75 0 111.06 1.062L10.53 12.53a.75.75 0 01-1.06 0L5.23 8.27a.75.75 0 01.02-1.06z",viewBox:"0 0 20 20"},caretDownFill:{d:"M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z",viewBox:"0 0 16 16"},caretRight:{d:"M7.293 14.707a1 1 0 01-1.414-1.414L10.172 9 5.879 4.707a1 1 0 011.414-1.414l5 5a1 1 0 010 1.414l-5 5z",viewBox:"0 0 20 20"},caretRightFill:{d:"m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z",viewBox:"0 0 16 16"},success:{d:"M10 18a8 8 0 1 0 0-16 8 8 0 0 0 0 16Zm3.707-8.707a1 1 0 0 0-1.414-1.414L9 11.172 7.707 9.879a1 1 0 1 0-1.414 1.414l2 2a1 1 0 0 0 1.414 0l4-4Z",viewBox:"0 0 20 20"},error:{d:"M10 18a8 8 0 1 0 0-16 8 8 0 0 0 0 16Zm-.75-11.5a.75.75 0 0 1 1.5 0v5a.75.75 0 0 1-1.5 0v-5Zm.75 8a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z",viewBox:"0 0 20 20"},warn:{d:"M9.049 2.927a1.5 1.5 0 012.902 0l6.41 11.94A1.5 1.5 0 0117.01 17H2.99a1.5 1.5 0 01-1.351-2.133l6.41-11.94zM11 13a1 1 0 10-2 0 1 1 0 002 0zm-1-2a1 1 0 001-1V7a1 1 0 10-2 0v3a1 1 0 001 1z",viewBox:"0 0 20 20"},comment:{d:"M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H4.414a1 1 0 0 0-.707.293L.854 15.146A.5.5 0 0 1 0 14.793zm5 4a1 1 0 1 0-2 0 1 1 0 0 0 2 0m4 0a1 1 0 1 0-2 0 1 1 0 0 0 2 0m3 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2",viewBox:"0 0 16 16"},remove:{d:"M7 3a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v1h3a1 1 0 1 1 0 2h-1l-1 10a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2L5 6H4a1 1 0 1 1 0-2h3V3Zm1 3a1 1 0 0 0-1 1v8a1 1 0 1 0 2 0V7a1 1 0 0 0-1-1Zm4 0a1 1 0 0 0-1 1v8a1 1 0 1 0 2 0V7a1 1 0 0 0-1-1Z",viewBox:"0 0 20 20"},export:{d:"M3 16.25a.75.75 0 0 1 .75-.75h12.5a.75.75 0 0 1 0 1.5H3.75a.75.75 0 0 1-.75-.75Zm7.53-2.03a.75.75 0 0 1-1.06 0l-3-3a.75.75 0 1 1 1.06-1.06l1.72 1.72V3.75a.75.75 0 0 1 1.5 0v8.13l1.72-1.72a.75.75 0 1 1 1.06 1.06l-3 3Z",viewBox:"0 0 20 20"},close:{d:"M5.23 5.23a.75.75 0 0 1 1.06 0L10 8.94l3.71-3.71a.75.75 0 1 1 1.06 1.06L11.06 10l3.71 3.71a.75.75 0 1 1-1.06 1.06L10 11.06l-3.71 3.71a.75.75 0 1 1-1.06-1.06L8.94 10 5.23 6.29a.75.75 0 0 1 0-1.06Z",viewBox:"0 0 20 20"}};function V(e){const{d:t,viewBox:s="0 0 20 20"}=F[e];return{d:t,viewBox:s}}function z(e,t){return e.label!==t.label?e.label-t.label:e.id-t.id}class Y{doc;listeners={};els;NEW_GROUP="__newgroup__";HOVER_OUT_DELAY=1e3;dragEl=null;dragStartParent=null;dragStartIndex=-1;hoverOutTimer=null;collapsedGroups=new Set;TOAST_AUTO_DISMISS=1e4;constructor(e){this.doc=e,R.localize(e),this.els={status:this.$("#status"),toggleBtn:this.$("#toggle-select"),toggleIcon:this.$("#toggle-select-icon"),toggleLabel:this.$("#toggle-select-label"),clearBtn:this.$("#clear"),captureBtn:this.$("#capture"),list:this.$("#select-list"),empty:this.$("#select-empty"),count:this.$("#select-count"),captureOptionsToggle:this.$("#capture-options-toggle"),captureOptionsPanel:this.$("#capture-options"),captureFmtRadios:this.$all('input[name="capture-format"]'),captureAreaRadios:this.$all('input[name="capture-area"]'),jpegOnlyEls:this.$all(".jpeg-only"),jpegQualityRange:this.$("#jpeg-quality-range"),jpegQualityNumber:this.$("#jpeg-quality-number"),captureScaleRange:this.$("#capture-scale-range"),captureScaleNumber:this.$("#capture-scale-number"),badgeSizeRange:this.$("#badge-size-range"),badgeSizeNumber:this.$("#badge-size-number"),badgeColorButtons:this.$all("#badge-color-pop button"),badgeColorLabel:this.$("#badge-color-label"),badgeColorDot:this.$("#badge-color-dot"),badgeShapeSelect:this.$("#badge-shape-select"),badgeDeleteButton:this.$("#badge-delete-button"),badgePositionButtons:this.$all("#badge-position-pop button"),badgePositionLabel:this.$("#badge-position-label"),badgeGroupSelect:this.$("#badge-group-select"),groupNameModal:this.$("#group-name-modal"),groupNameInput:this.$("#group-name-input"),groupNameCancelBtn:this.$("#group-name-cancel-btn"),groupNameCreatelBtn:this.$("#group-name-create-btn"),itemCommentModal:this.$("#item-comment-modal"),itemCommentInput:this.$("#item-comment-input"),itemCommentIdInput:this.$("#item-comment-id-input"),itemCommentCancelBtn:this.$("#item-comment-cancel-btn"),itemCommentApplyBtn:this.$("#item-comment-apply-btn"),selectItemAllCheckbox:this.$('input[type="checkbox"][name="item-select"][value="all"]'),settingModal:this.$("#setting-modal"),settingButton:this.$("#setting-button"),settingCloseButton:this.$("#setting-close-btn"),themeLightBtn:this.$("#theme-light-btn"),themeDarkBtn:this.$("#theme-dark-btn"),themeDeviceBtn:this.$("#theme-device-btn"),importFileInput:this.$("#import-file-input"),importBtn:this.$("#import-btn"),storeCount:this.$("#store-count"),storeList:this.$("#store-list"),storeEmpty:this.$("#store-empty"),toastParent:this.$("#toast-parent")},this.els.toggleBtn.addEventListener("click",()=>this.emit(H.TOGGLE_SELECT,void 0)),this.els.clearBtn.addEventListener("click",()=>this.emit(H.CLEAR,void 0)),this.els.captureBtn.addEventListener("click",()=>this.emit(H.CAPTURE,void 0)),this.els.captureOptionsToggle.addEventListener("click",()=>{this.emit(H.TOGGLE_CAPTURE_PANEL,void 0)}),this.els.captureFmtRadios.forEach(e=>e.addEventListener("change",()=>{this.updateQualityVisibility(),this.emit(H.CAPTURE_FORMAT_CHANGE,{format:this.getSelectedCaptureFormat()})})),this.els.captureAreaRadios.forEach(e=>e.addEventListener("change",()=>{this.emit(H.CAPTURE_AREA_CHANGE,{area:this.getSelectedCaptureArea()})})),this.bindSync(this.els.jpegQualityRange,this.els.jpegQualityNumber,e=>this.emit(H.CAPTURE_QUALITY_CHANGE,{quality:e})),this.bindSync(this.els.captureScaleRange,this.els.captureScaleNumber,e=>this.emit(H.CAPTURE_SCALE_CHANGE,{scale:e})),this.bindSync(this.els.badgeSizeRange,this.els.badgeSizeNumber);const t=()=>{const e=Number(this.els.badgeSizeNumber.value);Number.isFinite(e)&&this.emit(H.BADGE_SIZE_CHANGE,{size:e})};this.els.badgeSizeRange.addEventListener("change",t),this.els.badgeSizeNumber.addEventListener("change",t),this.els.badgeColorButtons.forEach(e=>{e.addEventListener("click",()=>{const t=e.dataset.colorName??"",s="string"==typeof(i=t)&&d.includes(i)?t:"Blue";var i;this.emit(H.BADGE_COLOR_SELECT,{color:s})})}),this.els.badgeShapeSelect.addEventListener("change",()=>{const e=this.els.badgeShapeSelect.value??null,t=function(e){return"string"==typeof e&&h.includes(e)}(e)?e:"circle";this.emit(H.BADGE_SHAPE_CHANGE,{shape:t})}),this.els.badgeDeleteButton.addEventListener("click",()=>{this.emit(H.BADGE_DELETE,void 0)}),this.els.badgePositionButtons.forEach(e=>{e.addEventListener("click",()=>{const t=e.dataset.positionName??"",s="string"==typeof(i=t)&&u.includes(i)?t:"left-top-outside";var i;this.emit(H.BADGE_POSITION_SELECT,{position:s})})}),this.els.badgeGroupSelect.addEventListener("change",()=>{const e=this.els.badgeGroupSelect.value??p,t=e===p?T:e;t===this.NEW_GROUP&&this.els.groupNameModal.classList.remove("hidden"),this.emit(H.SET_GROUP,{group:t})}),this.els.groupNameCancelBtn.addEventListener("click",()=>{this.els.groupNameModal.classList.add("hidden")}),this.els.groupNameCreatelBtn.addEventListener("click",()=>{const e=this.els.groupNameInput.value??p,t=e===p||e===this.NEW_GROUP?T:e;this.emit(H.SET_GROUP,{group:t}),this.els.groupNameModal.classList.add("hidden"),this.els.groupNameInput.value=""}),this.els.itemCommentCancelBtn.addEventListener("click",()=>{this.els.itemCommentModal.classList.add("hidden")}),this.els.itemCommentApplyBtn.addEventListener("click",()=>{const e=this.els.itemCommentInput.value,t=Number(this.els.itemCommentIdInput.value);this.emit(H.ITEM_COMMENT_APPLY,{id:t,comment:e}),this.els.itemCommentModal.classList.add("hidden")}),this.els.settingButton.addEventListener("click",()=>{this.els.settingModal.classList.remove("hidden"),this.emit(H.SETTING_MODAL_SHOW,void 0)}),this.els.settingCloseButton.addEventListener("click",()=>{this.els.settingModal.classList.add("hidden")}),this.els.themeLightBtn.addEventListener("click",()=>{this.applyTheme("light"),this.emit(H.UPDATE_THEME,{theme:"light"})}),this.els.themeDarkBtn.addEventListener("click",()=>{this.applyTheme("dark"),this.emit(H.UPDATE_THEME,{theme:"dark"})}),this.els.themeDeviceBtn.addEventListener("click",()=>{this.applyTheme("device"),this.emit(H.UPDATE_THEME,{theme:"device"})}),this.els.importBtn.addEventListener("click",()=>{if(!this.els.importFileInput.files||0===this.els.importFileInput.files.length)return void this.els.importFileInput.click();const e=this.els.importFileInput.files[0];this.emit(H.IMPORT_SCREAN_STATE_FILE,{file:e})}),this.updateQualityVisibility(),this.els.selectItemAllCheckbox.addEventListener("change",e=>{const t=e.target.checked;this.emit(H.ITEM_SELECTION_CHANGED,{allCheck:t})}),this.els.list.addEventListener("pointerenter",()=>this.cancelHoverOut()),this.els.list.addEventListener("pointerleave",()=>this.scheduleHoverOut()),e.addEventListener("pointerleave",()=>{this.cancelHoverOut(),this.emit(H.ITEM_HOVER_OUT,void 0)})}on(e,t){(this.listeners[e]??=[]).push(t)}emit(e,t){const s=this.listeners[e];s?.forEach(e=>e(t))}render(e){this.applyToastMessages(e.toastMessages),this.applyTheme(e.theme),this.applyStore(e.pageKeys),this.renderStatus(e.status),this.renderToggle(e.selectionEnabled),this.renderList(e.items,e.selectItems,e.missingIds),this.selectRadioByValue(this.els.captureFmtRadios,e.capture.format),this.selectRadioByValue(this.els.captureAreaRadios,e.capture.area),this.els.jpegQualityNumber.value=String(e.capture.quality),this.els.jpegQualityRange.value=String(e.capture.quality),this.els.captureScaleNumber.value=String(e.capture.scale),this.els.captureScaleRange.value=String(e.capture.scale),this.updateQualityVisibility(e.capture.format),this.applyCaptureOptionsToggleUI(e.capture.panelExpanded),this.els.badgeSizeNumber.value=String(e.defaultSize),this.els.badgeSizeRange.value=String(e.defaultSize),this.applyBadgeColorUI(e.defaultColor),this.els.badgeShapeSelect.value=e.defaultShape,this.applyBadgePositonUI(e.defaultPosition),this.applyBadgeGroupSelectUI(this.getExistingGroups(e.items),e.defaultGroup)}renderStatus(e){const t=v[e],s=this.els.status;s.className="",s.className=`connect-status ${t}`;const i=this.doc.createElement("span");i.classList.add("connect-status-dot");const a=this.doc.createElement("span");a.textContent=function(e){const t=y[e];return R.get(t)||t}(e),s.replaceChildren(i,a),this.disableFormControls(e)}renderToggle(e){const t=this.els.toggleIcon;t.className="",t.classList.add("select-toggle-icon",e?"bg-indigo-500":"bg-slate-300"),this.els.toggleLabel.textContent=R.get(e?"toggle_on":"toggle_off")}renderList(e,t,s){this.els.count.textContent=String(e.length);const i=0!==e.length&&e.every(e=>t.includes(e.id));if(this.els.selectItemAllCheckbox.checked=i,!e.length)return this.els.empty.classList.remove("hidden"),void this.els.list.replaceChildren();this.els.empty.classList.add("hidden");const a=this.groupByGroup(e),n=Array.from(a.keys()).sort((e,t)=>e===p?-1:t===p?1:e.localeCompare(t)),o=this.doc.createDocumentFragment();for(const e of n){const i=this.renderGroupSection(e,a.get(e),t,s);o.appendChild(i)}this.els.list.replaceChildren(o)}renderGroupSection(e,t,s,i){const a=this.collapsedGroups.has(e),n=this.el("section","select-item-section"),o=this.el("div","select-item-header"),r=this.el("div","spsk-checkwrap"),c=this.el("input","spsk-checkbox spsk-checkbox--normal");c.type="checkbox",c.name="item-select",c.value=e===p?R.get("group_ungrouped"):e,c.checked=t.every(e=>s.includes(e.id)),c.addEventListener("change",t=>{const s=t.target.checked;this.emit(H.ITEM_SELECTION_CHANGED,{group:e===p?T:e,isCheck:s})}),r.append(c);const l=this.el("span","select-item-gh-title",e===p?R.get("group_ungrouped"):e),E=this.el("div","select-item-gh-left");E.append(r,l);const d=this.el("span","select-item-gh-count",String(t.length)),h=this.el("button","select-item-gh-toggle");h.type="button",h.setAttribute("aria-expanded",String(!a));const{d:u,viewBox:m}=V(a?"caretRight":"caretDown"),_=this.createSvgIcon(u,{className:"icon-sm",viewBox:m}),S=_.querySelector("path");h.append(_),o.append(E,d,h);const g=this.el("ul","select-item-list");a&&g.classList.add("hidden"),this.attachUlDnDHandlers(g);for(const e of t.sort(z)){const t=s.includes(e.id);g.appendChild(this.renderItem(e,t,i))}return h.addEventListener("click",()=>{this.collapsedGroups.has(e)?(this.collapsedGroups.delete(e),g.classList.remove("hidden"),S.setAttribute("d",V("caretDown").d),h.setAttribute("aria-expanded","true")):(this.collapsedGroups.add(e),g.classList.add("hidden"),S.setAttribute("d",V("caretRight").d),h.setAttribute("aria-expanded","false"))}),n.append(o,g),n}renderItem(e,t,s){const i=s.includes(e.id),a="select-item",n=this.el("li",i?`group ${a} select-item--warn`:a);n.dataset.id=String(e.id),n.draggable=!0,n.addEventListener("dragstart",e=>{this.dragEl=n,this.dragStartParent=n.parentElement,this.dragStartIndex=Array.prototype.indexOf.call(n.parentElement?.children??[],n),e.dataTransfer&&(e.dataTransfer.effectAllowed="move"),n.classList.add("opacity-60")}),n.addEventListener("dragend",()=>{if(!this.dragEl)return;const e=this.dragEl.parentElement,t=e?Array.prototype.indexOf.call(e.children,this.dragEl):-1;this.dragEl.classList.remove("opacity-60");const s=this.dragEl.dataset.id??"";this.dragEl=null,s&&this.dragStartIndex>=0&&t>=0&&t!==this.dragStartIndex&&this.emit(H.REORDER_ITEMS,{fromId:Number(s),fromIndex:this.dragStartIndex,toIndex:t}),this.dragStartIndex=-1,this.dragStartParent=null});const o=this.el("div","spsk-checkwrap"),r=i?"spsk-checkbox spsk-checkbox--warn":"spsk-checkbox spsk-checkbox--normal",c=this.el("input",r);c.type="checkbox",c.name="item-select",c.value=String(e.id),c.checked=t,c.addEventListener("change",t=>{const s=t.target.checked;this.emit(H.ITEM_SELECTION_CHANGED,{id:e.id,isCheck:s})}),o.append(c);const l=i?"spsk-badge spsk-badge--warn":"spsk-badge spsk-badge--norm",E=this.el("span",l,String(e.label)),d=this.el("div","min-w-0 flex-1");if(d.addEventListener("pointerenter",()=>{this.dragStartParent||i||(this.cancelHoverOut(),this.emit(H.ITEM_HOVER_IN,{id:e.id}))}),i){const e=this.el("span","chip-warn"),{d:t,viewBox:s}=V("warn"),i=this.createSvgIcon(t,{className:"h-3.5 w-3.5",viewBox:s}),a=this.el("span",void 0,R.get("missing_item"));e.append(i,a),d.append(e)}const h=this.el("div","anchor",e.anchor.value);d.append(h);const u=this.generateCommentBtn(e);return n.append(o,E,d,u),n}generateCommentBtn(e){const t=document.createElement("button");t.className="btn-icon";const{d:s,viewBox:i}=V("comment"),a=this.createSvgIcon(s,{className:"h-3.5 w-3.5",viewBox:i});return t.appendChild(a),t.addEventListener("click",()=>{this.els.itemCommentModal.classList.remove("hidden"),this.els.itemCommentInput.value=e.comment??"",this.els.itemCommentIdInput.value=String(e.id)}),t}scheduleHoverOut(){this.hoverOutTimer&&clearTimeout(this.hoverOutTimer),this.dragStartParent||(this.hoverOutTimer=setTimeout(()=>{this.hoverOutTimer=null,this.emit(H.ITEM_HOVER_OUT,void 0)},this.HOVER_OUT_DELAY))}cancelHoverOut(){this.hoverOutTimer&&(clearTimeout(this.hoverOutTimer),this.hoverOutTimer=null)}attachUlDnDHandlers(e){e.addEventListener("dragover",t=>{if(t.preventDefault(),!this.dragEl)return;if(this.dragStartParent&&e!==this.dragStartParent)return;const s=t.target?.closest("li");if(s&&s!==this.dragEl){const i=s.getBoundingClientRect(),a=t.clientY-i.top>i.height/2;e.insertBefore(this.dragEl,a?s.nextSibling:s)}else s||e.appendChild(this.dragEl)}),e.addEventListener("drop",e=>e.preventDefault())}getExistingGroups(e){return Array.from(new Set(e.map(e=>(e.group??"").trim()).filter(e=>e.length>0))).sort((e,t)=>e.localeCompare(t))}groupByGroup(e){const t=new Map;for(const s of e){const e=(s.group??T).trim()||p;t.has(e)||t.set(e,[]),t.get(e).push(s)}return t}getSelectedCaptureFormat(){const e=this.doc.querySelector('input[name="capture-format"]:checked')?.value;return"jpeg"===e?"jpeg":"png"}getSelectedCaptureArea(){const e=this.doc.querySelector('input[name="capture-area"]:checked')?.value;return"viewport"===e?"viewport":"full"}updateQualityVisibility(e){const t="jpeg"===(e??this.getSelectedCaptureFormat());this.els.jpegOnlyEls.forEach(e=>e.classList.toggle("hidden",!t)),this.els.jpegQualityRange.disabled=!t,this.els.jpegQualityNumber.disabled=!t}selectRadioByValue(e,t){e.forEach(e=>e.checked=e.value===t)}bindSync(e,t,s){const i=(e,t)=>{const s=null!=e&&""!==e?Number(e):NaN;return Number.isFinite(s)?s:t},a=a=>{const n=i(t.min||e.min,Number.NEGATIVE_INFINITY),o=i(t.max||e.max,Number.POSITIVE_INFINITY),r=i(t.step||e.step,1),c=Number(a),l=((e,t,s)=>Math.min(Math.max(e,t),s))(Number.isFinite(c)?c:0,n,o),E=Math.round(l/r)*r,d=Number(E.toFixed(6));t.value=String(d),e.value=String(d),s?.(d)};e.addEventListener("input",()=>a(e.value)),t.addEventListener("input",()=>a(t.value))}disableFormControls(e){const t=this.doc.querySelectorAll("button, select, input, textarea"),s=e===N,i=e===I||e===L,a=e===O;t.forEach(e=>{const t=!!s||i&&e.hasAttribute("data-ignore-disable")||a&&!1;e.disabled=!t})}applyCaptureOptionsToggleUI(e){this.els.captureOptionsToggle.setAttribute("aria-expanded",String(e));const{d:t,viewBox:s}=V(e?"caretDownFill":"caretRightFill");this.els.captureOptionsToggle.innerHTML="",this.els.captureOptionsToggle.appendChild(this.createSvgIcon(t,{viewBox:s,className:"h-4 w-4"})),this.els.captureOptionsPanel.classList.toggle("hidden",!e)}getBadgeColorStyleName(e){return`bg-${("Gray"===e?"slate":e).toLowerCase()}-500`}applyBadgeColorUI(e){this.els.badgeColorButtons.forEach(t=>{const s=t.dataset.colorName===e;t.setAttribute("aria-selected",s?"true":"false")}),this.els.badgeColorLabel.textContent=e,this.els.badgeColorDot.className="inline-block w-4 h-4 rounded-full",this.els.badgeColorDot.classList.add(this.getBadgeColorStyleName(e))}applyBadgePositonUI(e){this.els.badgePositionButtons.forEach(t=>{const s=t.dataset.positionName===e;t.setAttribute("data-selected",s?"true":"false")}),this.els.badgePositionLabel.textContent=e.replaceAll("-"," ")}applyBadgeGroupSelectUI(e,t){this.els.badgeGroupSelect.innerHTML="",this.els.badgeGroupSelect.append(this.makeOpt(p,R.get("group_ungrouped"),t===p));for(const s of e){const e=(e=>(e??"").trim())(s);this.els.badgeGroupSelect.append(this.makeOpt(e,s,t===s))}const s=this.makeOpt(this.NEW_GROUP,R.get("common_create"));this.els.badgeGroupSelect.append(s)}applyTheme(e){const t=document.documentElement;("device"===e?window.matchMedia("(prefers-color-scheme: dark)").matches:"dark"===e)?t.classList.add("dark"):t.classList.remove("dark"),this.els.themeLightBtn.setAttribute("data-active",String("light"===e)),this.els.themeDarkBtn.setAttribute("data-active",String("dark"===e)),this.els.themeDeviceBtn.setAttribute("data-active",String("device"===e))}applyStore(e){if(this.els.storeCount.textContent=String(e.length),this.els.storeList.innerHTML="",e.length<=0)return this.els.storeList.classList.add("hidden"),void this.els.storeEmpty.classList.remove("hidden");for(const t of e){const e=this.el("li","select-item"),s=this.el("div","min-w-0 flex-1"),i=this.el("a","anchor whitespace-normal break-words",t);i.href=t,i.target="_blank",s.appendChild(i);const a=this.el("button","btn-icon");a.setAttribute("data-ignore-disable","true");const n=V("export"),o=this.createSvgIcon(n.d,{className:"icon-sm",viewBox:n.viewBox});a.appendChild(o);const r=this.el("button","btn-icon btn-icon--danger");r.setAttribute("data-ignore-disable","true");const c=V("remove"),l=this.createSvgIcon(c.d,{className:"icon-sm",viewBox:c.viewBox});r.appendChild(l),e.appendChild(s),e.appendChild(a),e.appendChild(r),this.els.storeList.appendChild(e),a.addEventListener("click",()=>{this.emit(H.EXPORT_PAGE_CLICK,{pageKey:t})}),r.addEventListener("click",()=>{this.emit(H.REMOVE_PAGE_CLICK,{pageKey:t})})}this.els.storeList.classList.remove("hidden"),this.els.storeEmpty.classList.add("hidden")}applyToastMessages(e){for(const t of e){const e=this.generateToastMessage(t);this.els.toastParent.appendChild(e),this.emit(H.TOAST_DISMISS_REQUESTED,{uuid:t.uuid})}}generateToastMessage(e){const t=this.el("div",`toast toast--${e.kind}`),s=V(e.kind),i=this.createSvgIcon(s.d,{className:"toast-icon",viewBox:s.viewBox}),a=this.el("div","toast-body"),n=this.el("p","toast-desc",e.message);a.appendChild(n);const o=this.el("button",`toast-close toast-close--${e.kind}`),r=V("close"),c=this.createSvgIcon(r.d,{className:"h-3.5 w-3.5",viewBox:r.viewBox});o.appendChild(c),t.appendChild(i),t.appendChild(a),t.appendChild(o);const l=window.setTimeout(()=>{t.isConnected&&t.remove()},this.TOAST_AUTO_DISMISS);return o.addEventListener("click",()=>{clearTimeout(l),t.isConnected&&t.remove()}),t}$(e){const t=this.doc.querySelector(e);if(!t)throw new Error(`[PanelView] Missing element: ${e}`);return t}$all(e){return this.doc.querySelectorAll(e)}el(e,t,s){const i=this.doc.createElement(e);return t&&(i.className=t),void 0!==s&&(i.textContent=s),i}makeOpt(e,t,s=!1){const i=this.doc.createElement("option");return i.value=e,i.textContent=t,s&&(i.selected=!0),i}createSvgIcon(e,t={}){const s="http://www.w3.org/2000/svg",i=document.createElementNS(s,"svg");if(i.setAttribute("viewBox",t.viewBox??"0 0 20 20"),i.setAttribute("class",t.className??"h-3.5 w-3.5"),i.setAttribute("fill","currentColor"),i.setAttribute("aria-hidden","true"),t.attrs)for(const[e,s]of Object.entries(t.attrs))i.setAttribute(e,s);const a=document.createElementNS(s,"path");return a.setAttribute("d",e),i.appendChild(a),i}}async function K(){const e=new Y(document),t=new $(e);await t.start()}"complete"===document.readyState||"interactive"===document.readyState?K().catch(e=>{console.error("Panel bootstrap failed:",e)}):document.addEventListener("DOMContentLoaded",()=>{K().catch(e=>{console.error("Panel bootstrap failed:",e)})},{once:!0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,