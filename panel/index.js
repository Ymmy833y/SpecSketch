(()=>{"use strict";const e="PING",t="TOGGLE_SELECT",s="RENDER",i="CLEAR",a="HOVER",n="MEASURE_SIZE",o="SELECTED",r="MISSING_IDS",l="CONTENT_SIZE_RESULT",c="ACTIVE_TAB_CHANGED";function E(e){if(!e)return!0;if(e.startsWith("view-source:")||e.startsWith("data:")||e.startsWith("blob:")||e.startsWith("filesystem:"))return!0;let t;try{t=new URL(e)}catch{return!0}return!new Set(["http:","https:","file:"]).has(t.protocol)||!!new Set(["chromewebstore.google.com","chrome.google.com"]).has(t.hostname)}const d=["Gray","Red","Yellow","Green","Blue","Lime","Purple","Pink","Orange","Cyan"],h=["circle","square"],u=["right-top-outside","right-top-inside","right-outside","right-inside","right-bottom-outside","right-bottom-inside","top-outside","top-inside","center","bottom-outside","bottom-inside","left-top-outside","left-top-inside","left-outside","left-inside","left-bottom-outside","left-bottom-inside"],p="__ungrouped__",T="",m=["Numbers","UpperAlpha","LowerAlpha","None"];function _(e){if(!e||"object"!=typeof e)return!1;const t=e.anchor;if(!t||"object"!=typeof t)return!1;const s=t;return"css"===s.kind&&"string"==typeof s.value&&("number"==typeof s.version||1===s.version)}const S={status:"DISCONNECTED",tabId:null,pageKey:"",pageKeys:[],theme:"device",selectionEnabled:!1,items:[],defaultSize:14,defaultColor:"Blue",defaultShape:"circle",defaultLabelFormat:"Numbers",defaultVisible:!0,defaultPosition:"left-top-outside",defaultGroup:T,capture:{format:"png",area:"full",quality:90,scale:1,panelExpanded:!1},selectItems:[],missingIds:[],toastMessages:[]},g=function(e,t){const s="screenStateByPage";async function i(){return(await chrome.storage.local.get(s))[s]??{}}async function a(e){await chrome.storage.local.set({[s]:e})}return{key:s,readAll:i,writeAll:a,get:async function(e){const s=(await i())[e];return void 0!==s?s:t?t():void 0},set:async function(e,t){const s=await i();s[e]=t,await a(s)},remove:async function(e){const t=await i();e in t&&(delete t[e],await a(t))},clear:async function(){await a({})}}}(0,()=>({items:[],nextId:1,defaultSize:14,defaultColor:"Blue",defaultShape:"circle",defaultLabelFormat:"Numbers",defaultVisible:!0,defaultPosition:"left-top-outside",defaultGroup:T})),A=function(){const e="themeMode";return{key:e,get:async function(){const t=(await chrome.storage.local.get(e))[e];return void 0===t?"device":t},set:async function(t){await chrome.storage.local.set({[e]:t})},remove:async function(){await chrome.storage.local.remove(e)}}}();async function f(e,t){const s=await g.get(e);if(t.removedIds?.length){const e=new Set(t.removedIds);s.items=s.items.filter(t=>!e.has(t.id))}if(t.added?.length)for(const e of t.added){const t={id:s.nextId++,label:1/0,anchor:e.anchor,size:e.size??s.defaultSize,color:e.color??s.defaultColor,shape:e.shape??s.defaultShape,labelFormat:e.labelFormat??s.defaultLabelFormat,visible:e.visible??s.defaultVisible,position:e.position??s.defaultPosition,group:e.group??s.defaultGroup,comment:e.comment??""};s.items.push(t)}return s.items=C(s.items),await g.set(e,s),s}function C(e){const t=new Map;e.forEach((e,s)=>{const i=(e.group??"").trim();t.has(i)||t.set(i,[]),t.get(i).push({index:s,item:e})});const s=e.slice();for(const[,e]of t)e.sort((e,t)=>e.item.label!==t.item.label?e.item.label-t.item.label:e.item.id-t.item.id),e.forEach(({index:e,item:t},i)=>{const a=i+1;t.label!==a&&(s[e]={...t,label:a})});return s}function R(e,t){return chrome.i18n.getMessage(e,t)||e}const I={get:R,localize:function(e=document){e.querySelectorAll("[data-i18n]").forEach(e=>{const t=e.getAttribute("data-i18n");t&&(e.textContent=R(t))}),e.querySelectorAll("[data-i18n-attr]").forEach(e=>{const t=e.getAttribute("data-i18n-attr");if(t)for(const s of t.split(";")){const[t,i]=s.split(":").map(e=>e?.trim());t&&i&&e.setAttribute(t,R(i))}})}},O="RESTRICTED",N="CONNECTING",L="CONNECTED",b="DISCONNECTED",v={RESTRICTED:"status_restricted",CONNECTING:"status_connecting",CONNECTED:"status_connected",DISCONNECTED:"status_disconnected"},y={RESTRICTED:"connect-status--restricted",CONNECTING:"connect-status--connecting",CONNECTED:"connect-status--connected",DISCONNECTED:"connect-status--disconnected"};var D,P;!function(e){e.INIT="INIT",e.CONNECTED="CONNECTED",e.SET_STATUS="SET_STATUS",e.RESTORE_STATE="RESTORE_STATE",e.SET_MISSING_IDS="SET_MISSING_IDS",e.TOGGLE_SELECT="TOGGLE_SELECT",e.CLEAR_ALL="CLEAR_ALL",e.CONTENT_SELECTED="CONTENT_SELECTED",e.SET_BADGE_SIZE="SET_BADGE_SIZE",e.SET_BADGE_COLOR="SET_BADGE_COLOR",e.SET_BADGE_SHAPE="SET_BADGE_SHAPE",e.SET_BADGE_LABEL_FORMAT="SET_BADGE_LABEL_FORMAT",e.SET_BADGE_VISIBLE="SET_BADGE_VISIBLE",e.BADGE_DELETE="BADGE_DELETE",e.SET_BADGE_POSITION="SET_BADGE_POSITION",e.SET_CAPTURE_FORMAT="SET_CAPTURE_FORMAT",e.SET_CAPTURE_AREA="SET_CAPTURE_AREA",e.SET_CAPTURE_QUALITY="SET_CAPTURE_QUALITY",e.SET_CAPTURE_SCALE="SET_CAPTURE_SCALE",e.TOGGLE_CAPTURE_PANEL="TOGGLE_CAPTURE_PANEL",e.MEASURE_CONTENT_SIZE="MEASURE_CONTENT_SIZE",e.CAPTURE_REQUESTED="CAPTURE_REQUESTED",e.CAPTURE_SUCCEEDED="CAPTURE_SUCCEEDED",e.CAPTURE_FAILED="CAPTURE_FAILED",e.REORDER_ITEMS="REORDER_ITEMS",e.SET_GROUP="SET_GROUP",e.PORT_DISCONNECTED="PORT_DISCONNECTED",e.CLOSE_PANEL_REQUESTED="CLOSE_PANEL_REQUESTED",e.ITEM_SELECTION_CHANGED="ITEM_SELECTION_CHANGED",e.ITEM_HOVER_IN="ITEM_HOVER_IN",e.ITEM_HOVER_OUT="ITEM_HOVER_OUT",e.UPDATE_ITEM_COMMENT="UPDATE_ITEM_COMMENT",e.SET_THEME="SET_THEME",e.UPDATE_THEME="UPDATE_THEME",e.STORE_RELOAD_REQUESTED="STORE_RELOAD_REQUESTED",e.STORE_RELOAD_SUCCEEDED="STORE_RELOAD_SUCCEEDED",e.IMPORT_SCREAN_STATE_FILE="IMPORT_SCREAN_STATE_FILE",e.IMPORT_SUCCEEDED="IMPORT_SUCCEEDED",e.IMPORT_FAILED="IMPORT_FAILED",e.TOAST_DISMISS_REQUESTED="TOAST_DISMISS_REQUESTED",e.REMOVE_SCREEN_STATE_BY_PAGE="REMOVE_SCREEN_STATE_BY_PAGE",e.EXPORT_SCREEN_STATE_BY_PAGE="EXPORT_SCREEN_STATE_BY_PAGE",e.EXPORT_FAILED="EXPORT_FAILED"}(D||(D={})),function(e){e.RENDER_CONTENT="RENDER_CONTENT",e.TOGGLE_SELECT_ON_CONTENT="TOGGLE_SELECT_ON_CONTENT",e.CLEAR_CONTENT="CLEAR_CONTENT",e.HOVER="HOVER",e.MEASURE_CONTENT_SIZE="MEASURE_CONTENT_SIZE",e.CAPTURE="CAPTURE",e.CLEAR_STATE="CLEAR_STATE",e.PERSIST_STATE="PERSIST_STATE",e.SET_THEME="SET_THEME",e.UPDATE_THEME="UPDATE_THEME",e.READ_SCREEN_STATE_STORE="READ_SCREEN_STATE_STORE",e.IMPORT_SCREAN_STATE_FILE="IMPORT_SCREAN_STATE_FILE",e.REMOVE_SCREEN_STATE_STORE_BY_PAGE_KEY="REMOVE_SCREEN_STATE_STORE_BY_PAGE_KEY",e.EXPORT_SCREEN_STATE_BY_PAGE_KEY="EXPORT_SCREEN_STATE_BY_PAGE_KEY",e.NOTIFY_ERROR="NOTIFY_ERROR"}(P||(P={}));const w="spsk:panel-content:v1";class G{rpc;constructor(e){this.rpc=e}send(e){const t={id:crypto.randomUUID(),expectReply:!1,...e};return this.rpc.send(t)}render(e){return this.send({type:s,payload:{items:e}})}toggleSelect(e){return this.send({type:t,payload:{enabled:e}})}clear(){return this.send({type:i})}hover(e){return this.send({type:a,payload:{id:e}})}measureSize(){return this.send({type:n})}ping(){const t={id:crypto.randomUUID(),expectReply:!0,type:e};return this.rpc.send(t,5e3)}}class M{port;pending=new Map;alive=!0;constructor(e){this.port=e,this.port.onMessage.addListener(e=>{(function(e){return"object"==typeof e&&null!==e&&"id"in e&&"ok"in e})(e)&&(this.pending.get(e.id)?.(e),this.pending.delete(e.id))}),this.port.onDisconnect.addListener(()=>{this.alive=!1;const e=chrome.runtime.lastError?.message??"disconnected";for(const[t,s]of this.pending)s({id:t,ok:!1,error:e});this.pending.clear()})}get isAlive(){return this.alive}send(e,t=5e3){return new Promise(s=>{if(!this.alive)return s(void e.expectReply);if(e.expectReply){const i=setTimeout(()=>{this.pending.delete(e.id),s(void 0)},t);this.pending.set(e.id,e=>{clearTimeout(i),s(e)})}try{this.port.postMessage(e)}catch{return e.expectReply&&this.pending.delete(e.id),void s(void 0)}e.expectReply||s(void 0)})}}const B=new Set;async function U(e,t,s){return await new Promise((i,a)=>{chrome.debugger.sendCommand(e,t,s??{},e=>{const t=function(){const e=chrome.runtime.lastError;return e?new Error(e.message||String(e)):null}();t?a(t):i(e??{})})})}async function k(e){const t=await chrome.tabs.get(e.tabId);if(!t.id||E(t.url))return void console.warn("Capturing is not possible due to restricted URL:",t.url);const s={tabId:t.id},i=e.format??"png",a=e.settleMs??500,n=e.scale??1,o=e.area??"full";let r=!1,l=!1;try{r=await async function(e){const t=e.tabId??null;return await new Promise((s,i)=>{chrome.debugger.attach(e,"1.3",()=>{const e=chrome.runtime.lastError;if(!e)return null!=t&&B.add(t),void s(!0);const a=e.message||"";a.includes("Another debugger is already attached")?null!=t&&B.has(t)?s(!1):i(new Error("Debugger is already attached by another client (DevTools/extension).")):i(new Error(a))})})}(s),await U(s,"Page.enable"),(e.bringToFront??1)&&await U(s,"Page.bringToFront");const c=await async function(e,t,s,i){if("viewport"===t){const{x:t,y:i,width:a,height:n}=await async function(e){const t=(await U(e,"Page.getLayoutMetrics")).cssVisualViewport;return{x:Math.max(0,0|Math.floor(t.pageX)),y:Math.max(0,0|Math.floor(t.pageY)),width:Math.max(1,0|Math.ceil(t.clientWidth)),height:Math.max(1,0|Math.ceil(t.clientHeight))}}(e);return{useOverride:!1,clip:{x:t,y:i,width:a,height:n,scale:s},captureBeyondViewport:!0,shouldScrollTop:!1}}const a=Math.max(1,0|Math.ceil(i.width)),n=Math.max(1,0|Math.ceil(i.height));return{useOverride:!0,metrics:{width:a,height:n,deviceScaleFactor:1,mobile:!1,screenWidth:a,screenHeight:n,positionX:0,positionY:0},clip:{x:0,y:0,width:a,height:n,scale:s},captureBeyondViewport:!0,shouldScrollTop:!0}}(s,o,n,e.contentSize);c.shouldScrollTop&&await U(s,"Runtime.evaluate",{expression:"window.scrollTo(0,0)"}),c.useOverride&&c.metrics&&(l=!0,await U(s,"Emulation.setDeviceMetricsOverride",c.metrics)),await new Promise(e=>setTimeout(e,a));const E={format:i,fromSurface:!0,captureBeyondViewport:c.captureBeyondViewport,clip:c.clip};"jpeg"===i&&"number"==typeof e.quality&&(E.quality=Math.min(100,Math.max(0,Math.round(e.quality))));const{data:d}=await U(s,"Page.captureScreenshot",E),h=`data:${"png"===i?"image/png":"image/jpeg"};base64,${d}`,u=e.filename??function(e,t){let s=(e.title&&e.title.trim()?e.title:"")||(()=>{try{return new URL(e.url??"").host||"page"}catch{return"page"}})();return s=s.replace(/[\\/:*?"<>|]/g,"_").replace(/\s+/g," ").trim(),s.length>80&&(s=s.slice(0,80)),`${s}-${(new Date).toISOString().replace(/[:.]/g,"-")}.${t}`}(t,i);return await chrome.downloads.download({url:h,filename:u,saveAs:!1})}finally{if(l)try{await U(s,"Emulation.clearDeviceMetricsOverride")}catch{}if(r)try{await async function(e){const t=e.tabId??null;null!=t&&B.has(t)&&(await async function(e){await new Promise(t=>{chrome.debugger.detach(e,()=>t())})}(e),B.delete(t))}(s)}catch{}}}async function x(e,t,s={}){const{saveAs:i=!1,prefix:a="specsketch-screen-state"}=s,n={format:"specsketch-export",kind:"screen-state",version:1,exportedAt:(new Date).toISOString(),pageKey:t,items:e.items},o=`data:application/json;charset=utf-8;base64,${function(e){const t=(new TextEncoder).encode(e);let s="";for(const e of t)s+=String.fromCharCode(e);return btoa(s)}(JSON.stringify(n,null,2))}`,r=function(e,t){return`${e}_${(t??"").replace(/https?:\/\//,"").replace(/[^a-zA-Z0-9._-]+/g,"-").replace(/-+/g,"-").replace(/^-|-$/g,"").slice(0,120)||"page"}_${function(e=new Date){const t=(e,t=2)=>String(e).padStart(t,"0"),s=-e.getTimezoneOffset(),i=s>=0?"+":"-",a=t(Math.floor(Math.abs(s)/60)),n=t(Math.abs(s)%60);return`${e.getFullYear()}-${t(e.getMonth()+1)}-${t(e.getDate())}_${t(e.getHours())}-${t(e.getMinutes())}-${t(e.getSeconds())}${i}${a}${n}`}()}.json`}(a,t);return await chrome.downloads.download({url:o,filename:r,saveAs:i})}async function H(e,t){const s=/\.json$/i.test(e.name),i="application/json"===e.type||"text/json"===e.type||""===e.type;if(!s&&!i)throw new Error(I.get("import_file_not_json"));let a;try{const t=await e.text();a=JSON.parse(t)}catch{throw new Error(I.get("import_payload_invalid"))}if(!function(e){if(!e||"object"!=typeof e)return!1;const t=e;return"specsketch-export"===t.format&&"screen-state"===t.kind&&"number"==typeof t.version&&"string"==typeof t.pageKey&&!!Array.isArray(t.items)&&t.items.every(_)}(a))throw new Error(I.get("import_payload_invalid"));const n=a.items,o=await g.get(t),r=e=>`${e.anchor.kind}:${e.anchor.version}:${e.anchor.value}`,l=new Set((o?.items??[]).map(r)),c=n.filter(e=>!l.has(r(e))).sort((e,t)=>t.id-e.id).map(e=>({anchor:e.anchor,size:e.size,color:e.color,shape:e.shape,position:e.position,group:e.group,comment:e.comment}));return{state:await f(t,{added:c}),successMessage:I.get("import_succeeded_with_count",[String(c.length)])}}var F;chrome.debugger.onDetach.addListener(e=>{const t=e.tabId;"number"==typeof t&&B.delete(t)}),function(e){e.TOGGLE_SELECT="TOGGLE_SELECT",e.CLEAR="CLEAR",e.CAPTURE="CAPTURE",e.BADGE_SIZE_CHANGE="BADGE_SIZE_CHANGE",e.BADGE_COLOR_SELECT="BADGE_COLOR_SELECT",e.BADGE_SHAPE_CHANGE="BADGE_SHAPE_CHANGE",e.BADGE_LABEL_FORMAT_CHANGE="BADGE_LABEL_FORMAT_CHANGE",e.BADGE_VISIBLE_CHANGE="BADGE_VISIBLE_CHANGE",e.BADGE_DELETE="BADGE_DELETE",e.BADGE_POSITION_SELECT="BADGE_POSITION_SELECT",e.SET_GROUP="SET_GROUP",e.CAPTURE_FORMAT_CHANGE="CAPTURE_FORMAT_CHANGE",e.CAPTURE_AREA_CHANGE="CAPTURE_AREA_CHANGE",e.CAPTURE_QUALITY_CHANGE="CAPTURE_QUALITY_CHANGE",e.CAPTURE_SCALE_CHANGE="CAPTURE_SCALE_CHANGE",e.TOGGLE_CAPTURE_PANEL="TOGGLE_CAPTURE_PANEL",e.REORDER_ITEMS="REORDER_ITEMS",e.ITEM_SELECTION_CHANGED="ITEM_SELECTION_CHANGED",e.ITEM_HOVER_IN="ITEM_HOVER_IN",e.ITEM_HOVER_OUT="ITEM_HOVER_OUT",e.ITEM_COMMENT_APPLY="ITEM_COMMENT_APPLY",e.UPDATE_THEME="UPDATE_THEME",e.SETTING_MODAL_SHOW="SETTING_MODAL_SHOW",e.IMPORT_SCREAN_STATE_FILE="IMPORT_SCREAN_STATE_FILE",e.TOAST_DISMISS_REQUESTED="TOAST_DISMISS_REQUESTED",e.REMOVE_PAGE_CLICK="REMOVE_PAGE_CLICK",e.EXPORT_PAGE_CLICK="EXPORT_PAGE_CLICK"}(F||(F={}));class V{view;model=structuredClone(S);conn=null;currentWindowId=null;static REQUIRES_CONN=new Set([P.RENDER_CONTENT,P.TOGGLE_SELECT_ON_CONTENT,P.CLEAR_CONTENT,P.HOVER]);constructor(e){this.view=e}async start(){this.dispatch({type:D.INIT});const{ok:e}=await this.ensureConnectionAlive({forceReconnect:!0});if(!e)return void this.view.render(this.model);this.registerViewHandlers(),this.view.render(this.model);const t=await chrome.windows.getCurrent();this.currentWindowId=t.id??null,chrome.runtime.onMessage.addListener(e=>{if(e.type!==c)return;const t=e.payload.windowId;null!=this.currentWindowId&&this.currentWindowId===t&&this.ensureConnectionAlive({forceReconnect:!0})})}registerViewHandlers(){this.view.on(F.TOGGLE_SELECT,()=>this.dispatch({type:D.TOGGLE_SELECT})),this.view.on(F.CLEAR,()=>this.dispatch({type:D.CLEAR_ALL})),this.view.on(F.CAPTURE,()=>this.dispatch({type:D.MEASURE_CONTENT_SIZE})),this.view.on(F.BADGE_SIZE_CHANGE,({size:e})=>this.dispatch({type:D.SET_BADGE_SIZE,size:e})),this.view.on(F.BADGE_COLOR_SELECT,({color:e})=>this.dispatch({type:D.SET_BADGE_COLOR,color:e})),this.view.on(F.BADGE_SHAPE_CHANGE,({shape:e})=>this.dispatch({type:D.SET_BADGE_SHAPE,shape:e})),this.view.on(F.BADGE_LABEL_FORMAT_CHANGE,({labelFormat:e})=>this.dispatch({type:D.SET_BADGE_LABEL_FORMAT,labelFormat:e})),this.view.on(F.BADGE_VISIBLE_CHANGE,({visible:e})=>this.dispatch({type:D.SET_BADGE_VISIBLE,visible:e})),this.view.on(F.BADGE_DELETE,()=>this.dispatch({type:D.BADGE_DELETE})),this.view.on(F.BADGE_POSITION_SELECT,({position:e})=>this.dispatch({type:D.SET_BADGE_POSITION,position:e})),this.view.on(F.TOGGLE_CAPTURE_PANEL,()=>this.dispatch({type:D.TOGGLE_CAPTURE_PANEL})),this.view.on(F.CAPTURE_FORMAT_CHANGE,({format:e})=>this.dispatch({type:D.SET_CAPTURE_FORMAT,format:e})),this.view.on(F.CAPTURE_AREA_CHANGE,({area:e})=>this.dispatch({type:D.SET_CAPTURE_AREA,area:e})),this.view.on(F.CAPTURE_QUALITY_CHANGE,({quality:e})=>this.dispatch({type:D.SET_CAPTURE_QUALITY,quality:e})),this.view.on(F.CAPTURE_SCALE_CHANGE,({scale:e})=>this.dispatch({type:D.SET_CAPTURE_SCALE,scale:e})),this.view.on(F.REORDER_ITEMS,({fromId:e,fromIndex:t,toIndex:s})=>this.dispatch({type:D.REORDER_ITEMS,fromId:e,fromIndex:t,toIndex:s})),this.view.on(F.SET_GROUP,({group:e})=>this.dispatch({type:D.SET_GROUP,group:e})),this.view.on(F.ITEM_SELECTION_CHANGED,e=>this.dispatch({type:D.ITEM_SELECTION_CHANGED,...e})),this.view.on(F.ITEM_HOVER_IN,({id:e})=>this.dispatch({type:D.ITEM_HOVER_IN,id:e})),this.view.on(F.ITEM_HOVER_OUT,()=>this.dispatch({type:D.ITEM_HOVER_OUT})),this.view.on(F.ITEM_COMMENT_APPLY,({id:e,comment:t})=>this.dispatch({type:D.UPDATE_ITEM_COMMENT,id:e,comment:t})),this.view.on(F.UPDATE_THEME,({theme:e})=>this.dispatch({type:D.UPDATE_THEME,theme:e})),this.view.on(F.SETTING_MODAL_SHOW,()=>this.dispatch({type:D.STORE_RELOAD_REQUESTED})),this.view.on(F.IMPORT_SCREAN_STATE_FILE,({file:e})=>this.dispatch({type:D.IMPORT_SCREAN_STATE_FILE,file:e})),this.view.on(F.TOAST_DISMISS_REQUESTED,({uuid:e})=>this.dispatch({type:D.TOAST_DISMISS_REQUESTED,uuid:e})),this.view.on(F.REMOVE_PAGE_CLICK,({pageKey:e})=>this.dispatch({type:D.REMOVE_SCREEN_STATE_BY_PAGE,pageKey:e})),this.view.on(F.EXPORT_PAGE_CLICK,({pageKey:e})=>this.dispatch({type:D.EXPORT_SCREEN_STATE_BY_PAGE,pageKey:e}))}dispatch(e){const{model:t,effects:s}=function(e,t){switch(t.type){case D.INIT:return{model:e,effects:[{kind:P.SET_THEME}]};case D.CONNECTED:return{model:{...e,tabId:t.tabId,pageKey:t.pageKey},effects:[]};case D.SET_STATUS:return t.status===L?{model:{...e,status:t.status},effects:[]}:{model:{...e,items:[],status:t.status},effects:[]};case D.RESTORE_STATE:return{model:{...e,items:t.state.items,defaultSize:t.state.defaultSize,defaultColor:t.state.defaultColor,defaultShape:t.state.defaultShape,defaultLabelFormat:t.state.defaultLabelFormat,defaultVisible:t.state.defaultVisible,defaultPosition:t.state.defaultPosition,defaultGroup:t.state.defaultGroup},effects:[{kind:P.RENDER_CONTENT,items:t.state.items}]};case D.SET_MISSING_IDS:return{model:{...e,missingIds:t.missingIds},effects:[]};case D.TOGGLE_SELECT:{const t=!e.selectionEnabled;return{model:{...e,selectionEnabled:t},effects:[{kind:P.TOGGLE_SELECT_ON_CONTENT,enabled:t}]}}case D.CLEAR_ALL:return{model:{...e,items:[]},effects:[{kind:P.CLEAR_CONTENT},{kind:P.CLEAR_STATE}]};case D.CONTENT_SELECTED:return{model:e,effects:[]};case D.TOGGLE_CAPTURE_PANEL:return{model:{...e,capture:{...e.capture,panelExpanded:!e.capture.panelExpanded}},effects:[]};case D.SET_BADGE_SIZE:{const s=e.items.map(s=>({...s,...e.selectItems.includes(s.id)?{size:t.size}:{}}));return{model:{...e,defaultSize:t.size,items:s},effects:[{kind:P.PERSIST_STATE},{kind:P.RENDER_CONTENT,items:s}]}}case D.SET_BADGE_COLOR:{const s=e.items.map(s=>({...s,...e.selectItems.includes(s.id)?{color:t.color}:{}}));return{model:{...e,defaultColor:t.color,items:s},effects:[{kind:P.PERSIST_STATE},{kind:P.RENDER_CONTENT,items:s}]}}case D.SET_BADGE_SHAPE:{const s=e.items.map(s=>({...s,...e.selectItems.includes(s.id)?{shape:t.shape}:{}}));return{model:{...e,defaultShape:t.shape,items:s},effects:[{kind:P.PERSIST_STATE},{kind:P.RENDER_CONTENT,items:s}]}}case D.SET_BADGE_LABEL_FORMAT:{const s=e.items.map(s=>({...s,...e.selectItems.includes(s.id)?{labelFormat:t.labelFormat}:{}}));return{model:{...e,defaultLabelFormat:t.labelFormat,items:s},effects:[{kind:P.PERSIST_STATE},{kind:P.RENDER_CONTENT,items:s}]}}case D.SET_BADGE_VISIBLE:{const s=e.items.map(s=>({...s,...e.selectItems.includes(s.id)?{visible:t.visible}:{}}));return{model:{...e,defaultVisible:t.visible,items:s},effects:[{kind:P.PERSIST_STATE},{kind:P.RENDER_CONTENT,items:s}]}}case D.BADGE_DELETE:{const t=C(e.items.filter(t=>!e.selectItems.includes(t.id)));return{model:{...e,items:t},effects:[{kind:P.PERSIST_STATE},{kind:P.RENDER_CONTENT,items:t}]}}case D.SET_BADGE_POSITION:{const s=e.items.map(s=>({...s,...e.selectItems.includes(s.id)?{position:t.position}:{}}));return{model:{...e,defaultPosition:t.position,items:s},effects:[{kind:P.PERSIST_STATE},{kind:P.RENDER_CONTENT,items:s}]}}case D.SET_GROUP:{const s=function(e,t,s){const i=(s??"").trim();let a=0;return e.sort((e,t)=>t.id-e.id).map(e=>{if(t.includes(e.id)&&e.group!==i){const t=Number.MAX_SAFE_INTEGER-a++;return{...e,group:i,label:t}}return e})}(e.items,e.selectItems,t.group),i=C(s);return{model:{...e,defaultGroup:t.group,items:i},effects:[{kind:P.PERSIST_STATE},{kind:P.RENDER_CONTENT,items:i}]}}case D.SET_CAPTURE_FORMAT:return{model:{...e,capture:{...e.capture,format:t.format}},effects:[]};case D.SET_CAPTURE_AREA:return{model:{...e,capture:{...e.capture,area:t.area}},effects:[]};case D.SET_CAPTURE_QUALITY:return{model:{...e,capture:{...e.capture,quality:t.quality}},effects:[]};case D.SET_CAPTURE_SCALE:return{model:{...e,capture:{...e.capture,scale:t.scale}},effects:[]};case D.MEASURE_CONTENT_SIZE:return{model:e,effects:[{kind:P.MEASURE_CONTENT_SIZE}]};case D.CAPTURE_REQUESTED:return null==e.tabId?{model:e,effects:[{kind:P.NOTIFY_ERROR,error:"No tabId"}]}:{model:e,effects:[{kind:P.CAPTURE,payload:{tabId:e.tabId,format:e.capture.format,area:e.capture.area,quality:e.capture.quality,scale:e.capture.scale,contentSize:t.contentSize}}]};case D.CAPTURE_SUCCEEDED:return{model:e,effects:[]};case D.CAPTURE_FAILED:return{model:e,effects:[{kind:P.NOTIFY_ERROR,error:t.error}]};case D.REORDER_ITEMS:{const s=function(e,t,s,i){if(i<0||i>=e.length)throw new RangeError(`toIndex out of range: ${i}`);const a=e.findIndex(e=>e.id===t);if(-1===a)throw new Error(`Item not found for id=${t}`);if(i<0||i>=e.filter(t=>t.group===e[a].group).length)throw new RangeError(`toIndex out of range: ${i}`);const n=i+(s<i?1.1:.1);return e.map(e=>e.id===t?{...e,label:n}:e)}(e.items,t.fromId,t.fromIndex,t.toIndex),i=C(s);return{model:{...e,items:i},effects:[{kind:P.PERSIST_STATE},{kind:P.RENDER_CONTENT,items:i}]}}case D.ITEM_SELECTION_CHANGED:if("id"in t){const s=function(e,t,s){return t&&!s.includes(e)?[...s,e]:s.filter(t=>t!==e)}(t.id,t.isCheck,e.selectItems);return{model:{...e,selectItems:s},effects:[]}}if("group"in t){const s=function(e,t,s,i){const a=e.trim(),n=i.filter(e=>(e.group??T).trim()===a).map(e=>e.id);if(0===n.length)return s;if(t){const e=new Set(s);for(const t of n)e.add(t);return[...e]}{const e=new Set(n);return s.filter(t=>!e.has(t))}}(t.group,t.isCheck,e.selectItems,e.items);return{model:{...e,selectItems:s},effects:[]}}{const a=(s=t.allCheck,i=e.items,s?i.map(e=>e.id):[]);return{model:{...e,selectItems:a},effects:[]}}case D.ITEM_HOVER_IN:return{model:e,effects:[{kind:P.HOVER,id:t.id}]};case D.ITEM_HOVER_OUT:return{model:e,effects:[{kind:P.HOVER,id:null}]};case D.UPDATE_ITEM_COMMENT:{const s=e.items.map(e=>({...e,...e.id===t.id?{comment:t.comment}:{}}));return{model:{...e,items:s},effects:[{kind:P.PERSIST_STATE},{kind:P.RENDER_CONTENT,items:s}]}}case D.PORT_DISCONNECTED:return{model:{...e,status:b,selectionEnabled:!1},effects:[{kind:P.TOGGLE_SELECT_ON_CONTENT,enabled:!1}]};case D.SET_THEME:return{model:{...e,theme:t.theme},effects:[]};case D.UPDATE_THEME:return{model:{...e,theme:t.theme},effects:[{kind:P.UPDATE_THEME,theme:t.theme}]};case D.STORE_RELOAD_REQUESTED:return{model:e,effects:[{kind:P.READ_SCREEN_STATE_STORE}]};case D.STORE_RELOAD_SUCCEEDED:return{model:{...e,pageKeys:t.pageKeys},effects:[]};case D.IMPORT_SCREAN_STATE_FILE:return{model:e,effects:[{kind:P.IMPORT_SCREAN_STATE_FILE,file:t.file}]};case D.IMPORT_SUCCEEDED:case D.IMPORT_FAILED:return{model:{...e,toastMessages:t.toastMessages},effects:[]};case D.TOAST_DISMISS_REQUESTED:{const s=e.toastMessages.filter(e=>e.uuid!==t.uuid);return{model:{...e,toastMessages:s},effects:[]}}case D.REMOVE_SCREEN_STATE_BY_PAGE:return{model:e,effects:[{kind:P.REMOVE_SCREEN_STATE_STORE_BY_PAGE_KEY,pageKey:t.pageKey}]};case D.EXPORT_SCREEN_STATE_BY_PAGE:return{model:e,effects:[{kind:P.EXPORT_SCREEN_STATE_BY_PAGE_KEY,pageKey:t.pageKey}]};case D.EXPORT_FAILED:return{model:e,effects:[{kind:P.NOTIFY_ERROR,error:t.error}]};default:return{model:e,effects:[]}}var s,i}(this.model,e);this.model=t,this.view.render(this.model),this.execEffects(s).catch(console.error)}async execEffects(e){if(e.some(e=>V.REQUIRES_CONN.has(e.kind))){const e=await this.ensureConnectionAlive();if(!e.ok||e.contextChanged)return}for(const t of e)switch(t.kind){case P.RENDER_CONTENT:await(this.conn?.api.render(t.items));break;case P.TOGGLE_SELECT_ON_CONTENT:await(this.conn?.api.toggleSelect(t.enabled));break;case P.CLEAR_CONTENT:await(this.conn?.api.clear());break;case P.HOVER:await(this.conn?.api.hover(t.id));break;case P.CLEAR_STATE:await g.set(this.model.pageKey,{items:this.model.items,nextId:1,defaultSize:this.model.defaultSize,defaultColor:this.model.defaultColor,defaultShape:this.model.defaultShape,defaultLabelFormat:this.model.defaultLabelFormat,defaultVisible:this.model.defaultVisible,defaultPosition:this.model.defaultPosition,defaultGroup:this.model.defaultGroup});break;case P.PERSIST_STATE:{const e=await g.get(this.model.pageKey);await g.set(this.model.pageKey,{...e,items:this.model.items,defaultSize:this.model.defaultSize,defaultColor:this.model.defaultColor,defaultShape:this.model.defaultShape,defaultLabelFormat:this.model.defaultLabelFormat,defaultVisible:this.model.defaultVisible,defaultPosition:this.model.defaultPosition,defaultGroup:this.model.defaultGroup});break}case P.SET_THEME:{const e=await A.get();this.dispatch({type:D.SET_THEME,theme:e});break}case P.UPDATE_THEME:await A.set(t.theme);break;case P.READ_SCREEN_STATE_STORE:{const e=await g.readAll(),t=Object.keys(e);this.dispatch({type:D.STORE_RELOAD_SUCCEEDED,pageKeys:t});break}case P.IMPORT_SCREAN_STATE_FILE:try{const{state:e,successMessage:s}=await H(t.file,this.model.pageKey);this.dispatch({type:D.RESTORE_STATE,state:{items:e.items,defaultSize:e.defaultSize,defaultColor:e.defaultColor,defaultShape:e.defaultShape,defaultLabelFormat:e.defaultLabelFormat,defaultVisible:e.defaultVisible,defaultPosition:e.defaultPosition,defaultGroup:e.defaultGroup}});const i={uuid:crypto.randomUUID(),message:s,kind:"success"};this.dispatch({type:D.IMPORT_SUCCEEDED,toastMessages:[i]})}catch(e){const t=e,s={uuid:crypto.randomUUID(),message:t.message,kind:"error"};this.dispatch({type:D.IMPORT_FAILED,toastMessages:[s]})}break;case P.REMOVE_SCREEN_STATE_STORE_BY_PAGE_KEY:{await g.remove(t.pageKey);const e=await g.readAll(),s=Object.keys(e);this.dispatch({type:D.STORE_RELOAD_SUCCEEDED,pageKeys:s});const i=await g.get(this.model.pageKey);this.dispatch({type:D.RESTORE_STATE,state:{items:i.items,defaultSize:i.defaultSize,defaultColor:i.defaultColor,defaultShape:i.defaultShape,defaultLabelFormat:i.defaultLabelFormat,defaultVisible:i.defaultVisible,defaultPosition:i.defaultPosition,defaultGroup:i.defaultGroup}});break}case P.EXPORT_SCREEN_STATE_BY_PAGE_KEY:try{const e=await g.get(t.pageKey);await x(e,t.pageKey)}catch(e){this.dispatch({type:D.EXPORT_FAILED,error:e})}break;case P.MEASURE_CONTENT_SIZE:await(this.conn?.api.measureSize());break;case P.CAPTURE:try{await k(t.payload),this.dispatch({type:D.CAPTURE_SUCCEEDED})}catch(e){this.dispatch({type:D.CAPTURE_FAILED,error:e})}break;case P.NOTIFY_ERROR:console.error(t.error)}}async ensureConnectionAlive(e){const t=this.model.pageKey;if(!0!==e?.forceReconnect&&void 0!==await(this.conn?.api.ping()))return{ok:!0,contextChanged:!1};const s=await async function(){return(await chrome.tabs.query({active:!0,currentWindow:!0}))[0]}();if(!s?.id||E(s.url))return this.dispatch({type:D.SET_STATUS,status:O}),{ok:!1};const i=function(e,t=!1){try{const s=new URL(e);return t?`${s.origin}${s.pathname}${s.search}${s.hash}`:`${s.origin}${s.pathname}${s.search}`}catch{return e}}(s.url),a=s.id;this.dispatch({type:D.CONNECTED,tabId:a,pageKey:i}),this.dispatch({type:D.SET_STATUS,status:N});try{this.conn?.port.disconnect()}catch{}this.conn=await async function(e){await chrome.scripting.executeScript({target:{tabId:e},files:["content/main.js"]}).catch(()=>{});const t=chrome.tabs.connect(e,{name:w}),s=new M(t),i=new G(s),a=[];return t.onDisconnect.addListener(()=>a.forEach(e=>e())),{api:i,port:t,rpc:s,onDisconnect:e=>a.push(e),dispose:()=>{try{t.disconnect()}catch{}}}}(a),this.conn.onDisconnect(()=>this.dispatch({type:D.PORT_DISCONNECTED})),this.conn.port.onMessage.addListener(async e=>{if(e?.type===o){const t=await async function(e,t){const s=await g.get(e),i=Array.from(new Set(t.map(e=>e.value))).map(e=>t.find(t=>t.value===e)).filter(Boolean),a=[],n=[];for(const e of i){const t=s.items.find(t=>t.anchor.kind===e.kind&&t.anchor.value===e.value);t?a.push(t.id):n.push({anchor:e})}const o={};return a.length&&(o.removedIds=a),n.length&&(o.added=n),f(e,o)}(this.model.pageKey,e.payload.anchors);this.dispatch({type:D.RESTORE_STATE,state:{items:t.items,defaultSize:t.defaultSize,defaultColor:t.defaultColor,defaultShape:t.defaultShape,defaultLabelFormat:t.defaultLabelFormat,defaultVisible:t.defaultVisible,defaultPosition:t.defaultPosition,defaultGroup:t.defaultGroup}})}else e?.type===r?this.dispatch({type:D.SET_MISSING_IDS,missingIds:e.payload.missingIds}):e?.type===l&&this.dispatch({type:D.CAPTURE_REQUESTED,contentSize:e.payload})});const n=await g.get(i);return this.dispatch({type:D.RESTORE_STATE,state:{items:n.items,defaultSize:n.defaultSize,defaultColor:n.defaultColor,defaultShape:n.defaultShape,defaultLabelFormat:n.defaultLabelFormat,defaultVisible:n.defaultVisible,defaultPosition:n.defaultPosition,defaultGroup:n.defaultGroup}}),this.dispatch({type:D.SET_STATUS,status:L}),{ok:!0,contextChanged:!!t&&t!==i}}}const $={caretDown:{d:"M5.23 7.21a.75.75 0 011.06.02L10 10.939l3.71-3.71a.75.75 0 111.06 1.062L10.53 12.53a.75.75 0 01-1.06 0L5.23 8.27a.75.75 0 01.02-1.06z",viewBox:"0 0 20 20"},caretDownFill:{d:"M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z",viewBox:"0 0 16 16"},caretRight:{d:"M7.293 14.707a1 1 0 01-1.414-1.414L10.172 9 5.879 4.707a1 1 0 011.414-1.414l5 5a1 1 0 010 1.414l-5 5z",viewBox:"0 0 20 20"},caretRightFill:{d:"m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z",viewBox:"0 0 16 16"},success:{d:"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0m-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z",viewBox:"0 0 16 16"},error:{d:"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0M8 4a.905.905 0 0 0-.9.995l.35 3.507a.552.552 0 0 0 1.1 0l.35-3.507A.905.905 0 0 0 8 4m.002 6a1 1 0 1 0 0 2 1 1 0 0 0 0-2",viewBox:"0 0 16 16"},warn:{d:"M9.049 2.927a1.5 1.5 0 012.902 0l6.41 11.94A1.5 1.5 0 0117.01 17H2.99a1.5 1.5 0 01-1.351-2.133l6.41-11.94zM11 13a1 1 0 10-2 0 1 1 0 002 0zm-1-2a1 1 0 001-1V7a1 1 0 10-2 0v3a1 1 0 001 1z",viewBox:"0 0 20 20"},comment:{d:"M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H4.414a1 1 0 0 0-.707.293L.854 15.146A.5.5 0 0 1 0 14.793zm5 4a1 1 0 1 0-2 0 1 1 0 0 0 2 0m4 0a1 1 0 1 0-2 0 1 1 0 0 0 2 0m3 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2",viewBox:"0 0 16 16"},remove:{d:"M7 3a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v1h3a1 1 0 1 1 0 2h-1l-1 10a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2L5 6H4a1 1 0 1 1 0-2h3V3Zm1 3a1 1 0 0 0-1 1v8a1 1 0 1 0 2 0V7a1 1 0 0 0-1-1Zm4 0a1 1 0 0 0-1 1v8a1 1 0 1 0 2 0V7a1 1 0 0 0-1-1Z",viewBox:"0 0 20 20"},export:{d:"M3 16.25a.75.75 0 0 1 .75-.75h12.5a.75.75 0 0 1 0 1.5H3.75a.75.75 0 0 1-.75-.75Zm7.53-2.03a.75.75 0 0 1-1.06 0l-3-3a.75.75 0 1 1 1.06-1.06l1.72 1.72V3.75a.75.75 0 0 1 1.5 0v8.13l1.72-1.72a.75.75 0 1 1 1.06 1.06l-3 3Z",viewBox:"0 0 20 20"},close:{d:"M5.23 5.23a.75.75 0 0 1 1.06 0L10 8.94l3.71-3.71a.75.75 0 1 1 1.06 1.06L11.06 10l3.71 3.71a.75.75 0 1 1-1.06 1.06L10 11.06l-3.71 3.71a.75.75 0 1 1-1.06-1.06L8.94 10 5.23 6.29a.75.75 0 0 1 0-1.06Z",viewBox:"0 0 20 20"}};function z(e){const{d:t,viewBox:s="0 0 20 20"}=$[e];return{d:t,viewBox:s}}function Y(e,t){return e.label!==t.label?e.label-t.label:e.id-t.id}class K{doc;listeners={};els;NEW_GROUP="__newgroup__";HOVER_OUT_DELAY=1e3;dragEl=null;dragStartParent=null;dragStartIndex=-1;hoverOutTimer=null;collapsedGroups=new Set;TOAST_AUTO_DISMISS=1e4;constructor(e){this.doc=e,I.localize(e),this.els={status:this.$("#status"),toggleBtn:this.$("#toggle-select"),toggleIcon:this.$("#toggle-select-icon"),toggleLabel:this.$("#toggle-select-label"),clearBtn:this.$("#clear"),captureBtn:this.$("#capture"),list:this.$("#select-list"),empty:this.$("#select-empty"),count:this.$("#select-count"),captureOptionsToggle:this.$("#capture-options-toggle"),captureOptionsPanel:this.$("#capture-options"),captureFmtRadios:this.$all('input[name="capture-format"]'),captureAreaRadios:this.$all('input[name="capture-area"]'),jpegOnlyEls:this.$all(".jpeg-only"),jpegQualityRange:this.$("#jpeg-quality-range"),jpegQualityNumber:this.$("#jpeg-quality-number"),captureScaleRange:this.$("#capture-scale-range"),captureScaleNumber:this.$("#capture-scale-number"),badgeSizeRange:this.$("#badge-size-range"),badgeSizeNumber:this.$("#badge-size-number"),badgeColorButtons:this.$all("#badge-color-pop button"),badgeColorLabel:this.$("#badge-color-label"),badgeColorDot:this.$("#badge-color-dot"),badgeShapeSelect:this.$("#badge-shape-select"),badgeLabelFormatSelect:this.$("#badge-label-format-select"),badgeVisibleSelect:this.$("#badge-visible-select"),badgeDeleteButton:this.$("#badge-delete-button"),badgePositionButtons:this.$all("#badge-position-pop button"),badgePositionLabel:this.$("#badge-position-label"),badgeGroupSelect:this.$("#badge-group-select"),groupNameModal:this.$("#group-name-modal"),groupNameInput:this.$("#group-name-input"),groupNameCancelBtn:this.$("#group-name-cancel-btn"),groupNameCreatelBtn:this.$("#group-name-create-btn"),itemCommentModal:this.$("#item-comment-modal"),itemCommentInput:this.$("#item-comment-input"),itemCommentIdInput:this.$("#item-comment-id-input"),itemCommentCancelBtn:this.$("#item-comment-cancel-btn"),itemCommentApplyBtn:this.$("#item-comment-apply-btn"),selectItemAllCheckbox:this.$('input[type="checkbox"][name="item-select"][value="all"]'),settingModal:this.$("#setting-modal"),settingButton:this.$("#setting-button"),settingCloseButton:this.$("#setting-close-btn"),themeLightBtn:this.$("#theme-light-btn"),themeDarkBtn:this.$("#theme-dark-btn"),themeDeviceBtn:this.$("#theme-device-btn"),importFileInput:this.$("#import-file-input"),importBtn:this.$("#import-btn"),storeCount:this.$("#store-count"),storeList:this.$("#store-list"),storeEmpty:this.$("#store-empty"),toastParent:this.$("#toast-parent")},this.els.toggleBtn.addEventListener("click",()=>this.emit(F.TOGGLE_SELECT,void 0)),this.els.clearBtn.addEventListener("click",()=>this.emit(F.CLEAR,void 0)),this.els.captureBtn.addEventListener("click",()=>this.emit(F.CAPTURE,void 0)),this.els.captureOptionsToggle.addEventListener("click",()=>{this.emit(F.TOGGLE_CAPTURE_PANEL,void 0)}),this.els.captureFmtRadios.forEach(e=>e.addEventListener("change",()=>{this.updateQualityVisibility(),this.emit(F.CAPTURE_FORMAT_CHANGE,{format:this.getSelectedCaptureFormat()})})),this.els.captureAreaRadios.forEach(e=>e.addEventListener("change",()=>{this.emit(F.CAPTURE_AREA_CHANGE,{area:this.getSelectedCaptureArea()})})),this.bindSync(this.els.jpegQualityRange,this.els.jpegQualityNumber,e=>this.emit(F.CAPTURE_QUALITY_CHANGE,{quality:e})),this.bindSync(this.els.captureScaleRange,this.els.captureScaleNumber,e=>this.emit(F.CAPTURE_SCALE_CHANGE,{scale:e})),this.bindSync(this.els.badgeSizeRange,this.els.badgeSizeNumber);const t=()=>{const e=Number(this.els.badgeSizeNumber.value);Number.isFinite(e)&&this.emit(F.BADGE_SIZE_CHANGE,{size:e})};this.els.badgeSizeRange.addEventListener("change",t),this.els.badgeSizeNumber.addEventListener("change",t),this.els.badgeColorButtons.forEach(e=>{e.addEventListener("click",()=>{const t=e.dataset.colorName??"",s="string"==typeof(i=t)&&d.includes(i)?t:"Blue";var i;this.emit(F.BADGE_COLOR_SELECT,{color:s})})}),this.els.badgeShapeSelect.addEventListener("change",()=>{const e=this.els.badgeShapeSelect.value??null,t=function(e){return"string"==typeof e&&h.includes(e)}(e)?e:"circle";this.emit(F.BADGE_SHAPE_CHANGE,{shape:t})}),this.els.badgeLabelFormatSelect.addEventListener("change",()=>{const e=this.els.badgeLabelFormatSelect.value??null,t=function(e){return"string"==typeof e&&m.includes(e)}(e)?e:"Numbers";this.emit(F.BADGE_LABEL_FORMAT_CHANGE,{labelFormat:t})}),this.els.badgeVisibleSelect.addEventListener("change",()=>{const e="true"===this.els.badgeVisibleSelect.value;this.emit(F.BADGE_VISIBLE_CHANGE,{visible:e})}),this.els.badgeDeleteButton.addEventListener("click",()=>{this.emit(F.BADGE_DELETE,void 0)}),this.els.badgePositionButtons.forEach(e=>{e.addEventListener("click",()=>{const t=e.dataset.positionName??"",s="string"==typeof(i=t)&&u.includes(i)?t:"left-top-outside";var i;this.emit(F.BADGE_POSITION_SELECT,{position:s})})}),this.els.badgeGroupSelect.addEventListener("change",()=>{const e=this.els.badgeGroupSelect.value??p,t=e===p?T:e;t===this.NEW_GROUP&&this.els.groupNameModal.classList.remove("hidden"),this.emit(F.SET_GROUP,{group:t})}),this.els.groupNameCancelBtn.addEventListener("click",()=>{this.els.groupNameModal.classList.add("hidden")}),this.els.groupNameCreatelBtn.addEventListener("click",()=>{const e=this.els.groupNameInput.value??p,t=e===p||e===this.NEW_GROUP?T:e;this.emit(F.SET_GROUP,{group:t}),this.els.groupNameModal.classList.add("hidden"),this.els.groupNameInput.value=""}),this.els.itemCommentCancelBtn.addEventListener("click",()=>{this.els.itemCommentModal.classList.add("hidden")}),this.els.itemCommentApplyBtn.addEventListener("click",()=>{const e=this.els.itemCommentInput.value,t=Number(this.els.itemCommentIdInput.value);this.emit(F.ITEM_COMMENT_APPLY,{id:t,comment:e}),this.els.itemCommentModal.classList.add("hidden")}),this.els.settingButton.addEventListener("click",()=>{this.els.settingModal.classList.remove("hidden"),this.emit(F.SETTING_MODAL_SHOW,void 0)}),this.els.settingCloseButton.addEventListener("click",()=>{this.els.settingModal.classList.add("hidden")}),this.els.themeLightBtn.addEventListener("click",()=>{this.applyTheme("light"),this.emit(F.UPDATE_THEME,{theme:"light"})}),this.els.themeDarkBtn.addEventListener("click",()=>{this.applyTheme("dark"),this.emit(F.UPDATE_THEME,{theme:"dark"})}),this.els.themeDeviceBtn.addEventListener("click",()=>{this.applyTheme("device"),this.emit(F.UPDATE_THEME,{theme:"device"})}),this.els.importBtn.addEventListener("click",()=>{if(!this.els.importFileInput.files||0===this.els.importFileInput.files.length)return void this.els.importFileInput.click();const e=this.els.importFileInput.files[0];this.emit(F.IMPORT_SCREAN_STATE_FILE,{file:e})}),this.updateQualityVisibility(),this.els.selectItemAllCheckbox.addEventListener("change",e=>{const t=e.target.checked;this.emit(F.ITEM_SELECTION_CHANGED,{allCheck:t})}),this.els.list.addEventListener("pointerenter",()=>this.cancelHoverOut()),this.els.list.addEventListener("pointerleave",()=>this.scheduleHoverOut()),e.addEventListener("pointerleave",()=>{this.cancelHoverOut(),this.emit(F.ITEM_HOVER_OUT,void 0)})}on(e,t){(this.listeners[e]??=[]).push(t)}emit(e,t){const s=this.listeners[e];s?.forEach(e=>e(t))}render(e){this.applyToastMessages(e.toastMessages),this.applyTheme(e.theme),this.applyStore(e.pageKeys),this.renderStatus(e.status),this.renderToggle(e.selectionEnabled),this.renderList(e.items,e.selectItems,e.missingIds),this.selectRadioByValue(this.els.captureFmtRadios,e.capture.format),this.selectRadioByValue(this.els.captureAreaRadios,e.capture.area),this.els.jpegQualityNumber.value=String(e.capture.quality),this.els.jpegQualityRange.value=String(e.capture.quality),this.els.captureScaleNumber.value=String(e.capture.scale),this.els.captureScaleRange.value=String(e.capture.scale),this.updateQualityVisibility(e.capture.format),this.applyCaptureOptionsToggleUI(e.capture.panelExpanded),this.els.badgeSizeNumber.value=String(e.defaultSize),this.els.badgeSizeRange.value=String(e.defaultSize),this.applyBadgeColorUI(e.defaultColor),this.els.badgeShapeSelect.value=e.defaultShape,this.els.badgeLabelFormatSelect.value=e.defaultLabelFormat??"Numbers",this.els.badgeVisibleSelect.value=String(e.defaultVisible??"true"),this.applyBadgePositonUI(e.defaultPosition),this.applyBadgeGroupSelectUI(this.getExistingGroups(e.items),e.defaultGroup)}renderStatus(e){const t=y[e],s=this.els.status;s.className="",s.className=`connect-status ${t}`;const i=this.doc.createElement("span");i.classList.add("connect-status-dot");const a=this.doc.createElement("span");a.textContent=function(e){const t=v[e];return I.get(t)||t}(e),s.replaceChildren(i,a),this.disableFormControls(e)}renderToggle(e){const t=this.els.toggleIcon;t.className="",t.classList.add("select-toggle-icon",e?"bg-indigo-500":"bg-slate-300"),this.els.toggleLabel.textContent=I.get(e?"toggle_on":"toggle_off")}renderList(e,t,s){this.els.count.textContent=String(e.length);const i=0!==e.length&&e.every(e=>t.includes(e.id));if(this.els.selectItemAllCheckbox.checked=i,!e.length)return this.els.empty.classList.remove("hidden"),void this.els.list.replaceChildren();this.els.empty.classList.add("hidden");const a=this.groupByGroup(e),n=Array.from(a.keys()).sort((e,t)=>e===p?-1:t===p?1:e.localeCompare(t)),o=this.doc.createDocumentFragment();for(const e of n){const i=this.renderGroupSection(e,a.get(e),t,s);o.appendChild(i)}this.els.list.replaceChildren(o)}renderGroupSection(e,t,s,i){const a=this.collapsedGroups.has(e),n=this.el("section","select-item-section"),o=this.el("div","select-item-header"),r=this.el("div","spsk-checkwrap"),l=this.el("input","spsk-checkbox spsk-checkbox--normal");l.type="checkbox",l.name="item-select",l.value=e===p?I.get("group_ungrouped"):e,l.checked=t.every(e=>s.includes(e.id)),l.addEventListener("change",t=>{const s=t.target.checked;this.emit(F.ITEM_SELECTION_CHANGED,{group:e===p?T:e,isCheck:s})}),r.append(l);const c=this.el("span","select-item-gh-title",e===p?I.get("group_ungrouped"):e),E=this.el("div","select-item-gh-left");E.append(r,c);const d=this.el("span","select-item-gh-count",String(t.length)),h=this.el("button","select-item-gh-toggle");h.type="button",h.setAttribute("aria-expanded",String(!a));const{d:u,viewBox:m}=z(a?"caretRight":"caretDown"),_=this.createSvgIcon(u,{className:"icon-sm",viewBox:m}),S=_.querySelector("path");h.append(_),o.append(E,d,h);const g=this.el("ul","select-item-list");a&&g.classList.add("hidden"),this.attachUlDnDHandlers(g);for(const e of t.sort(Y)){const t=s.includes(e.id);g.appendChild(this.renderItem(e,t,i))}return h.addEventListener("click",()=>{this.collapsedGroups.has(e)?(this.collapsedGroups.delete(e),g.classList.remove("hidden"),S.setAttribute("d",z("caretDown").d),h.setAttribute("aria-expanded","true")):(this.collapsedGroups.add(e),g.classList.add("hidden"),S.setAttribute("d",z("caretRight").d),h.setAttribute("aria-expanded","false"))}),n.append(o,g),n}renderItem(e,t,s){const i=s.includes(e.id),a="select-item",n=this.el("li",i?`group ${a} select-item--warn`:a);n.dataset.id=String(e.id),n.draggable=!0,n.addEventListener("dragstart",e=>{this.dragEl=n,this.dragStartParent=n.parentElement,this.dragStartIndex=Array.prototype.indexOf.call(n.parentElement?.children??[],n),e.dataTransfer&&(e.dataTransfer.effectAllowed="move"),n.classList.add("opacity-60")}),n.addEventListener("dragend",()=>{if(!this.dragEl)return;const e=this.dragEl.parentElement,t=e?Array.prototype.indexOf.call(e.children,this.dragEl):-1;this.dragEl.classList.remove("opacity-60");const s=this.dragEl.dataset.id??"";this.dragEl=null,s&&this.dragStartIndex>=0&&t>=0&&t!==this.dragStartIndex&&this.emit(F.REORDER_ITEMS,{fromId:Number(s),fromIndex:this.dragStartIndex,toIndex:t}),this.dragStartIndex=-1,this.dragStartParent=null});const o=this.el("div","spsk-checkwrap"),r=i?"spsk-checkbox spsk-checkbox--warn":"spsk-checkbox spsk-checkbox--normal",l=this.el("input",r);l.type="checkbox",l.name="item-select",l.value=String(e.id),l.checked=t,l.addEventListener("change",t=>{const s=t.target.checked;this.emit(F.ITEM_SELECTION_CHANGED,{id:e.id,isCheck:s})}),o.append(l);const c=i?"spsk-badge spsk-badge--warn":"spsk-badge spsk-badge--norm",E=this.el("span",c,String(e.label)),d=this.el("div","min-w-0 flex-1");if(d.addEventListener("pointerenter",()=>{this.dragStartParent||i||(this.cancelHoverOut(),this.emit(F.ITEM_HOVER_IN,{id:e.id}))}),i){const e=this.el("span","chip-warn"),{d:t,viewBox:s}=z("warn"),i=this.createSvgIcon(t,{className:"h-3.5 w-3.5",viewBox:s}),a=this.el("span",void 0,I.get("missing_item"));e.append(i,a),d.append(e)}const h=this.el("div","anchor",e.anchor.value);d.append(h);const u=this.generateCommentBtn(e);return n.append(o,E,d,u),n}generateCommentBtn(e){const t=document.createElement("button");t.className="btn-icon";const{d:s,viewBox:i}=z("comment"),a=this.createSvgIcon(s,{className:"h-3.5 w-3.5",viewBox:i});return t.appendChild(a),t.addEventListener("click",()=>{this.els.itemCommentModal.classList.remove("hidden"),this.els.itemCommentInput.value=e.comment??"",this.els.itemCommentIdInput.value=String(e.id)}),t}scheduleHoverOut(){this.hoverOutTimer&&clearTimeout(this.hoverOutTimer),this.dragStartParent||(this.hoverOutTimer=setTimeout(()=>{this.hoverOutTimer=null,this.emit(F.ITEM_HOVER_OUT,void 0)},this.HOVER_OUT_DELAY))}cancelHoverOut(){this.hoverOutTimer&&(clearTimeout(this.hoverOutTimer),this.hoverOutTimer=null)}attachUlDnDHandlers(e){e.addEventListener("dragover",t=>{if(t.preventDefault(),!this.dragEl)return;if(this.dragStartParent&&e!==this.dragStartParent)return;const s=t.target?.closest("li");if(s&&s!==this.dragEl){const i=s.getBoundingClientRect(),a=t.clientY-i.top>i.height/2;e.insertBefore(this.dragEl,a?s.nextSibling:s)}else s||e.appendChild(this.dragEl)}),e.addEventListener("drop",e=>e.preventDefault())}getExistingGroups(e){return Array.from(new Set(e.map(e=>(e.group??"").trim()).filter(e=>e.length>0))).sort((e,t)=>e.localeCompare(t))}groupByGroup(e){const t=new Map;for(const s of e){const e=(s.group??T).trim()||p;t.has(e)||t.set(e,[]),t.get(e).push(s)}return t}getSelectedCaptureFormat(){const e=this.doc.querySelector('input[name="capture-format"]:checked')?.value;return"jpeg"===e?"jpeg":"png"}getSelectedCaptureArea(){const e=this.doc.querySelector('input[name="capture-area"]:checked')?.value;return"viewport"===e?"viewport":"full"}updateQualityVisibility(e){const t="jpeg"===(e??this.getSelectedCaptureFormat());this.els.jpegOnlyEls.forEach(e=>e.classList.toggle("hidden",!t)),this.els.jpegQualityRange.disabled=!t,this.els.jpegQualityNumber.disabled=!t}selectRadioByValue(e,t){e.forEach(e=>e.checked=e.value===t)}bindSync(e,t,s){const i=(e,t)=>{const s=null!=e&&""!==e?Number(e):NaN;return Number.isFinite(s)?s:t},a=a=>{const n=i(t.min||e.min,Number.NEGATIVE_INFINITY),o=i(t.max||e.max,Number.POSITIVE_INFINITY),r=i(t.step||e.step,1),l=Number(a),c=((e,t,s)=>Math.min(Math.max(e,t),s))(Number.isFinite(l)?l:0,n,o),E=Math.round(c/r)*r,d=Number(E.toFixed(6));t.value=String(d),e.value=String(d),s?.(d)};e.addEventListener("input",()=>a(e.value)),t.addEventListener("input",()=>a(t.value))}disableFormControls(e){const t=this.doc.querySelectorAll("button, select, input, textarea"),s=e===L,i=e===N||e===b,a=e===O;t.forEach(e=>{const t=!!s||i&&e.hasAttribute("data-ignore-disable")||a&&!1;e.disabled=!t})}applyCaptureOptionsToggleUI(e){this.els.captureOptionsToggle.setAttribute("aria-expanded",String(e));const{d:t,viewBox:s}=z(e?"caretDownFill":"caretRightFill");this.els.captureOptionsToggle.innerHTML="",this.els.captureOptionsToggle.appendChild(this.createSvgIcon(t,{viewBox:s,className:"h-4 w-4"})),this.els.captureOptionsPanel.classList.toggle("hidden",!e)}getBadgeColorStyleName(e){return`bg-${("Gray"===e?"slate":e).toLowerCase()}-500`}applyBadgeColorUI(e){this.els.badgeColorButtons.forEach(t=>{const s=t.dataset.colorName===e;t.setAttribute("aria-selected",s?"true":"false")}),this.els.badgeColorLabel.textContent=e,this.els.badgeColorDot.className="inline-block w-4 h-4 rounded-full",this.els.badgeColorDot.classList.add(this.getBadgeColorStyleName(e))}applyBadgePositonUI(e){this.els.badgePositionButtons.forEach(t=>{const s=t.dataset.positionName===e;t.setAttribute("data-selected",s?"true":"false")}),this.els.badgePositionLabel.textContent=e.replaceAll("-"," ")}applyBadgeGroupSelectUI(e,t){this.els.badgeGroupSelect.innerHTML="",this.els.badgeGroupSelect.append(this.makeOpt(p,I.get("group_ungrouped"),t===p));for(const s of e){const e=(e=>(e??"").trim())(s);this.els.badgeGroupSelect.append(this.makeOpt(e,s,t===s))}const s=this.makeOpt(this.NEW_GROUP,I.get("common_create"));this.els.badgeGroupSelect.append(s)}applyTheme(e){const t=document.documentElement;("device"===e?window.matchMedia("(prefers-color-scheme: dark)").matches:"dark"===e)?t.classList.add("dark"):t.classList.remove("dark"),this.els.themeLightBtn.setAttribute("data-active",String("light"===e)),this.els.themeDarkBtn.setAttribute("data-active",String("dark"===e)),this.els.themeDeviceBtn.setAttribute("data-active",String("device"===e))}applyStore(e){if(this.els.storeCount.textContent=String(e.length),this.els.storeList.innerHTML="",e.length<=0)return this.els.storeList.classList.add("hidden"),void this.els.storeEmpty.classList.remove("hidden");for(const t of e){const e=this.el("li","select-item"),s=this.el("div","min-w-0 flex-1"),i=this.el("a","anchor whitespace-normal break-words",t);i.href=t,i.target="_blank",s.appendChild(i);const a=this.el("button","btn-icon");a.setAttribute("data-ignore-disable","true");const n=z("export"),o=this.createSvgIcon(n.d,{className:"icon-sm",viewBox:n.viewBox});a.appendChild(o);const r=this.el("button","btn-icon btn-icon--danger");r.setAttribute("data-ignore-disable","true");const l=z("remove"),c=this.createSvgIcon(l.d,{className:"icon-sm",viewBox:l.viewBox});r.appendChild(c),e.appendChild(s),e.appendChild(a),e.appendChild(r),this.els.storeList.appendChild(e),a.addEventListener("click",()=>{this.emit(F.EXPORT_PAGE_CLICK,{pageKey:t})}),r.addEventListener("click",()=>{this.emit(F.REMOVE_PAGE_CLICK,{pageKey:t})})}this.els.storeList.classList.remove("hidden"),this.els.storeEmpty.classList.add("hidden")}applyToastMessages(e){for(const t of e){const e=this.generateToastMessage(t);this.els.toastParent.appendChild(e),this.emit(F.TOAST_DISMISS_REQUESTED,{uuid:t.uuid})}}generateToastMessage(e){const t=this.el("div",`toast toast--${e.kind}`),s=z(e.kind),i=this.createSvgIcon(s.d,{className:"toast-icon",viewBox:s.viewBox,variant:"solid"}),a=this.el("div","toast-body"),n=this.el("p","toast-desc",e.message);a.appendChild(n);const o=this.el("button",`toast-close toast-close--${e.kind}`),r=z("close"),l=this.createSvgIcon(r.d,{className:"h-3.5 w-3.5",viewBox:r.viewBox});o.appendChild(l),t.appendChild(i),t.appendChild(a),t.appendChild(o);const c=window.setTimeout(()=>{t.isConnected&&t.remove()},this.TOAST_AUTO_DISMISS);return o.addEventListener("click",()=>{clearTimeout(c),t.isConnected&&t.remove()}),t}$(e){const t=this.doc.querySelector(e);if(!t)throw new Error(`[PanelView] Missing element: ${e}`);return t}$all(e){return this.doc.querySelectorAll(e)}el(e,t,s){const i=this.doc.createElement(e);return t&&(i.className=t),void 0!==s&&(i.textContent=s),i}makeOpt(e,t,s=!1){const i=this.doc.createElement("option");return i.value=e,i.textContent=t,s&&(i.selected=!0),i}createSvgIcon(e,t={}){const s="http://www.w3.org/2000/svg",i=document.createElementNS(s,"svg");i.setAttribute("viewBox",t.viewBox??"0 0 20 20"),i.setAttribute("aria-hidden","true"),t.className&&i.setAttribute("class",t.className);const a=document.createElementNS(s,"path");return a.setAttribute("d",e),"outline"===t.variant?(a.setAttribute("fill","none"),a.setAttribute("stroke","currentColor"),a.setAttribute("stroke-width","1.5"),a.setAttribute("stroke-linecap","round"),a.setAttribute("stroke-linejoin","round")):a.setAttribute("fill","currentColor"),i.appendChild(a),i}}async function Q(){const e=new K(document),t=new V(e);await t.start()}"complete"===document.readyState||"interactive"===document.readyState?Q().catch(e=>{console.error("Panel bootstrap failed:",e)}):document.addEventListener("DOMContentLoaded",()=>{Q().catch(e=>{console.error("Panel bootstrap failed:",e)})},{once:!0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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WSxJQUFRcUcsTUFBT3JPLElBQ2hCTSxRQUFRdkIsTUFBTSwwQkFBMkJpQixLQUk3Q3hFLFNBQVNpYSxpQkFBaUIsbUJBQW9CLEtBQVd6TixJQUFRcUcsTUFBT3JPLElBQ3BFTSxRQUFRdkIsTUFBTSwwQkFBMkJpQixNQUN6QyxDQUNBc2dCLE1BQU0sRyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2NvbW1vbi9tZXNzYWdlcy50cyIsIndlYnBhY2s6Ly8vLi9jb21tb24vdXJsLnRzIiwid2VicGFjazovLy8uL2NvbW1vbi90eXBlcy50cyIsIndlYnBhY2s6Ly8vLi9ydW50aW1lL3BhbmVsL2FwcC9tb2RlbC50cyIsIndlYnBhY2s6Ly8vLi9ydW50aW1lL3BhbmVsL3N0b3JhZ2UvdGFibGVzLnRzIiwid2VicGFjazovLy8uL3J1bnRpbWUvcGFuZWwvc2VydmljZXMvc3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vY29tbW9uL2kxOG4udHMiLCJ3ZWJwYWNrOi8vLy4vcnVudGltZS9wYW5lbC90eXBlcy9zdGF0dXMudHMiLCJ3ZWJwYWNrOi8vLy4vcnVudGltZS9wYW5lbC90eXBlcy9hY3Rpb25fdHlwZXMudHMiLCJ3ZWJwYWNrOi8vLy4vcnVudGltZS9wYW5lbC90eXBlcy9lZmZlY3RfdHlwZXMudHMiLCJ3ZWJwYWNrOi8vLy4vY29tbW9uL2NvbnN0YW50cy50cyIsIndlYnBhY2s6Ly8vLi9ydW50aW1lL3BhbmVsL21lc3NhZ2luZy9hcGkudHMiLCJ3ZWJwYWNrOi8vLy4vcnVudGltZS9wYW5lbC9tZXNzYWdpbmcvcG9ydF9ycGMudHMiLCJ3ZWJwYWNrOi8vLy4vaW5mcmEvY2RwL2NkcF9jbGllbnQudHMiLCJ3ZWJwYWNrOi8vLy4vcnVudGltZS9wYW5lbC9zZXJ2aWNlcy9jYXB0dXJlLnRzIiwid2VicGFjazovLy8uL3J1bnRpbWUvcGFuZWwvc2VydmljZXMvZXhwb3J0LnRzIiwid2VicGFjazovLy8uL2NvbW1vbi91dGlscy50cyIsIndlYnBhY2s6Ly8vLi9ydW50aW1lL3BhbmVsL3NlcnZpY2VzL2ltcG9ydC50cyIsIndlYnBhY2s6Ly8vLi9ydW50aW1lL3BhbmVsL3R5cGVzL3VpX2V2ZW50X3R5cGVzLnRzIiwid2VicGFjazovLy8uL3J1bnRpbWUvcGFuZWwvY29udHJvbGxlci9wYW5lbF9jb250cm9sbGVyLnRzIiwid2VicGFjazovLy8uL3J1bnRpbWUvcGFuZWwvYXBwL3VwZGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9pbmZyYS9jaHJvbWUvdGFicy50cyIsIndlYnBhY2s6Ly8vLi9ydW50aW1lL3BhbmVsL21lc3NhZ2luZy9jb25uZWN0aW9uLnRzIiwid2VicGFjazovLy8uL2NvbW1vbi9pY29ucy50cyIsIndlYnBhY2s6Ly8vLi9ydW50aW1lL3BhbmVsL3ZpZXcvcGFuZWxfdmlldy50cyIsIndlYnBhY2s6Ly8vLi9ydW50aW1lL3BhbmVsL2FwcC9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBQMkMgPSB7XG4gICAgUElORzogJ1BJTkcnLFxuICAgIFRPR0dMRV9TRUxFQ1Q6ICdUT0dHTEVfU0VMRUNUJyxcbiAgICBSRU5ERVI6ICdSRU5ERVInLFxuICAgIENMRUFSOiAnQ0xFQVInLFxuICAgIEhPVkVSOiAnSE9WRVInLFxuICAgIE1FQVNVUkVfU0laRTogJ01FQVNVUkVfU0laRScsXG59O1xuY29uc3QgQzJQID0ge1xuICAgIFNFTEVDVEVEOiAnU0VMRUNURUQnLFxuICAgIE1JU1NJTkdfSURTOiAnTUlTU0lOR19JRFMnLFxuICAgIENPTlRFTlRfU0laRV9SRVNVTFQ6ICdDT05URU5UX1NJWkVfUkVTVUxUJyxcbn07XG5jb25zdCBCMlAgPSB7XG4gICAgQUNUSVZFX1RBQl9DSEFOR0VEOiAnQUNUSVZFX1RBQl9DSEFOR0VEJyxcbn07XG5leHBvcnQgY29uc3QgTVNHX1RZUEUgPSB7IC4uLlAyQywgLi4uQzJQLCAuLi5CMlAgfTtcbmV4cG9ydCBmdW5jdGlvbiBpc1Jlc3BvbnNlKG1zZykge1xuICAgIHJldHVybiB0eXBlb2YgbXNnID09PSAnb2JqZWN0JyAmJiBtc2cgIT09IG51bGwgJiYgJ2lkJyBpbiBtc2cgJiYgJ29rJyBpbiBtc2c7XG59XG4iLCIvKipcbiAqIEJ1aWxkcyBhIHBhZ2Uga2V5IGZyb20gYSBVUkwuIEJ5IGRlZmF1bHQgZXhjbHVkZXMgdGhlIGhhc2ggYW5kIHVzZXNcbiAqIG9yaWdpbiArIHBhdGhuYW1lICsgc2VhcmNoLlxuICpcbiAqIEBwYXJhbSB1cmwgLSBJbnB1dCBVUkwgKHJldHVybmVkIGFzLWlzIGlmIGludmFsaWQpXG4gKiBAcGFyYW0gaW5jbHVkZUhhc2ggLSBXaGV0aGVyIHRvIGluY2x1ZGUgdGhlIGhhc2ggKGRlZmF1bHQ6IGZhbHNlKVxuICogQHJldHVybnMgUGFnZSBrZXkgc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYWdlS2V5KHVybCwgaW5jbHVkZUhhc2ggPSBmYWxzZSkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHUgPSBuZXcgVVJMKHVybCk7XG4gICAgICAgIHJldHVybiBpbmNsdWRlSGFzaFxuICAgICAgICAgICAgPyBgJHt1Lm9yaWdpbn0ke3UucGF0aG5hbWV9JHt1LnNlYXJjaH0ke3UuaGFzaH1gXG4gICAgICAgICAgICA6IGAke3Uub3JpZ2lufSR7dS5wYXRobmFtZX0ke3Uuc2VhcmNofWA7XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgcmV0dXJuIHVybDtcbiAgICB9XG59XG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciBhIFVSTCBzaG91bGQgYmUgZXhjbHVkZWQgZnJvbSBleHRlbnNpb24gb3BlcmF0aW9uLlxuICpcbiAqIFVucGFyc2VhYmxlL3Vua25vd24gc2NoZW1lcyBhcmUgdHJlYXRlZCBhcyByZXN0cmljdGVkLlxuICogTm9uLXdlYiBzY2hlbWVzIChlLmcuLCB2aWV3LXNvdXJjZTosIGRhdGE6LCBibG9iOiwgZmlsZXN5c3RlbTopIGFyZSBibG9ja2VkIGVhcmx5LlxuICogQ2hyb21lIFdlYiBTdG9yZSBwYWdlcyBhcmUgYWx3YXlzIGV4Y2x1ZGVkIChjb250ZW50IHNjcmlwdHMgYXJlIG5vdCBhbGxvd2VkIHRoZXJlKS5cbiAqXG4gKiBAcGFyYW0gcmF3IC0gVVJMIHN0cmluZyB0byBldmFsdWF0ZS5cbiAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgVVJMIHNob3VsZCBiZSBza2lwcGVkIGJ5IHRoZSBleHRlbnNpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1Jlc3RyaWN0ZWQocmF3KSB7XG4gICAgaWYgKCFyYXcpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGlmIChyYXcuc3RhcnRzV2l0aCgndmlldy1zb3VyY2U6JykgfHxcbiAgICAgICAgcmF3LnN0YXJ0c1dpdGgoJ2RhdGE6JykgfHxcbiAgICAgICAgcmF3LnN0YXJ0c1dpdGgoJ2Jsb2I6JykgfHxcbiAgICAgICAgcmF3LnN0YXJ0c1dpdGgoJ2ZpbGVzeXN0ZW06JykpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGxldCB1cmw7XG4gICAgdHJ5IHtcbiAgICAgICAgdXJsID0gbmV3IFVSTChyYXcpO1xuICAgIH1cbiAgICBjYXRjaCB7XG4gICAgICAgIC8vIEludmFsaWQgb3Igbm9uLXN0YW5kYXJkIFVSTCDihpIgc2tpcCBmb3Igc2FmZXR5LlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gQWxsb3ctbGlzdCBwb2xpY3k6IG9ubHkgb3BlcmF0ZSBvbiB0eXBpY2FsIHdlYiBwYWdlcy5cbiAgICBjb25zdCBhbGxvd2VkID0gbmV3IFNldChbJ2h0dHA6JywgJ2h0dHBzOicsICdmaWxlOiddKTtcbiAgICBpZiAoIWFsbG93ZWQuaGFzKHVybC5wcm90b2NvbCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIENocm9tZSBXZWIgU3RvcmUgKGN1cnJlbnQgYW5kIGxlZ2FjeSBob3N0KSDigJQgY29udGVudCBzY3JpcHRzIGFyZSBkaXNhbGxvd2VkIGJ5IHBsYXRmb3JtIHBvbGljeS5cbiAgICBjb25zdCB3ZWJTdG9yZUhvc3RzID0gbmV3IFNldChbJ2Nocm9tZXdlYnN0b3JlLmdvb2dsZS5jb20nLCAnY2hyb21lLmdvb2dsZS5jb20nXSk7XG4gICAgaWYgKHdlYlN0b3JlSG9zdHMuaGFzKHVybC5ob3N0bmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbiIsImNvbnN0IElURU1fQ09MT1JTID0gW1xuICAgICdHcmF5JyxcbiAgICAnUmVkJyxcbiAgICAnWWVsbG93JyxcbiAgICAnR3JlZW4nLFxuICAgICdCbHVlJyxcbiAgICAnTGltZScsXG4gICAgJ1B1cnBsZScsXG4gICAgJ1BpbmsnLFxuICAgICdPcmFuZ2UnLFxuICAgICdDeWFuJyxcbl07XG5leHBvcnQgZnVuY3Rpb24gaXNJdGVtQ29sb3Iodikge1xuICAgIHJldHVybiB0eXBlb2YgdiA9PT0gJ3N0cmluZycgJiYgSVRFTV9DT0xPUlMuaW5jbHVkZXModik7XG59XG5jb25zdCBJVEVNX1NIQVBFID0gWydjaXJjbGUnLCAnc3F1YXJlJ107XG5leHBvcnQgZnVuY3Rpb24gaXNJdGVtU2hhcGUodikge1xuICAgIHJldHVybiB0eXBlb2YgdiA9PT0gJ3N0cmluZycgJiYgSVRFTV9TSEFQRS5pbmNsdWRlcyh2KTtcbn1cbmV4cG9ydCBjb25zdCBJVEVNX1BPU0lUSU9OX1ZBTFVFUyA9IFtcbiAgICAncmlnaHQtdG9wLW91dHNpZGUnLFxuICAgICdyaWdodC10b3AtaW5zaWRlJyxcbiAgICAncmlnaHQtb3V0c2lkZScsXG4gICAgJ3JpZ2h0LWluc2lkZScsXG4gICAgJ3JpZ2h0LWJvdHRvbS1vdXRzaWRlJyxcbiAgICAncmlnaHQtYm90dG9tLWluc2lkZScsXG4gICAgJ3RvcC1vdXRzaWRlJyxcbiAgICAndG9wLWluc2lkZScsXG4gICAgJ2NlbnRlcicsXG4gICAgJ2JvdHRvbS1vdXRzaWRlJyxcbiAgICAnYm90dG9tLWluc2lkZScsXG4gICAgJ2xlZnQtdG9wLW91dHNpZGUnLFxuICAgICdsZWZ0LXRvcC1pbnNpZGUnLFxuICAgICdsZWZ0LW91dHNpZGUnLFxuICAgICdsZWZ0LWluc2lkZScsXG4gICAgJ2xlZnQtYm90dG9tLW91dHNpZGUnLFxuICAgICdsZWZ0LWJvdHRvbS1pbnNpZGUnLFxuXTtcbmV4cG9ydCBmdW5jdGlvbiBpc0l0ZW1Qb3NpdGlvbih2KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2ID09PSAnc3RyaW5nJyAmJiBJVEVNX1BPU0lUSU9OX1ZBTFVFUy5pbmNsdWRlcyh2KTtcbn1cbmV4cG9ydCBjb25zdCBVTkdST1VQRUQgPSAnX191bmdyb3VwZWRfXyc7XG5leHBvcnQgY29uc3QgVU5HUk9VUEVEX1ZBTFVFID0gJyc7XG5leHBvcnQgY29uc3QgTEFCRUxfRk9STUFUID0gWydOdW1iZXJzJywgJ1VwcGVyQWxwaGEnLCAnTG93ZXJBbHBoYScsICdOb25lJ107XG5leHBvcnQgZnVuY3Rpb24gaXNMYWJlbEZvcm1hdCh2KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2ID09PSAnc3RyaW5nJyAmJiBMQUJFTF9GT1JNQVQuaW5jbHVkZXModik7XG59XG4vKipcbiAqIE5hcnJvd2luZyBndWFyZCBmb3IgYSBtaW5pbWFsIGBTY3JlZW5JdGVtYC1saWtlIHNoYXBlLlxuICogQ2hlY2tzIG9ubHkgdGhlIGZpZWxkcyByZXF1aXJlZCBieSB0aGlzIGltcG9ydCBwYXRoIChhbmNob3Igc3RydWN0dXJlKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzU2NyZWVuSXRlbUxpa2Uodikge1xuICAgIGlmICghdiB8fCB0eXBlb2YgdiAhPT0gJ29iamVjdCcpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBvID0gdjtcbiAgICBjb25zdCBhbmNob3IgPSBvWydhbmNob3InXTtcbiAgICBpZiAoIWFuY2hvciB8fCB0eXBlb2YgYW5jaG9yICE9PSAnb2JqZWN0JylcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IGEgPSBhbmNob3I7XG4gICAgcmV0dXJuIChhWydraW5kJ10gPT09ICdjc3MnICYmXG4gICAgICAgIHR5cGVvZiBhWyd2YWx1ZSddID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAodHlwZW9mIGFbJ3ZlcnNpb24nXSA9PT0gJ251bWJlcicgfHwgYVsndmVyc2lvbiddID09PSAxKSk7XG59XG4vKipcbiAqIFZhbGlkYXRlcyBhIHBhcnNlZCBKU09OIHZhbHVlIGFnYWluc3QgdGhlIGV4cGVjdGVkIGV4cG9ydCBwYXlsb2FkIGNvbnRyYWN0LlxuICogUmVxdWlyZXM6IGBmb3JtYXQgPT09ICdzcGVjc2tldGNoLWV4cG9ydCdgLCBga2luZCA9PT0gJ3NjcmVlbi1zdGF0ZSdgLFxuICogYHZlcnNpb246IG51bWJlcmAsIGBwYWdlS2V5OiBzdHJpbmdgLCBhbmQgYGl0ZW1zOiBTY3JlZW5JdGVtW11gLWxpa2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkUGF5bG9hZCh2KSB7XG4gICAgaWYgKCF2IHx8IHR5cGVvZiB2ICE9PSAnb2JqZWN0JylcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IG8gPSB2O1xuICAgIGlmIChvWydmb3JtYXQnXSAhPT0gJ3NwZWNza2V0Y2gtZXhwb3J0JylcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChvWydraW5kJ10gIT09ICdzY3JlZW4tc3RhdGUnKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHR5cGVvZiBvWyd2ZXJzaW9uJ10gIT09ICdudW1iZXInKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHR5cGVvZiBvWydwYWdlS2V5J10gIT09ICdzdHJpbmcnKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KG9bJ2l0ZW1zJ10pKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIG9bJ2l0ZW1zJ10uZXZlcnkoaXNTY3JlZW5JdGVtTGlrZSk7XG59XG4iLCJpbXBvcnQgeyBVTkdST1VQRURfVkFMVUUsIH0gZnJvbSAnQGNvbW1vbi90eXBlcyc7XG5leHBvcnQgY29uc3QgaW5pdGlhbE1vZGVsID0ge1xuICAgIHN0YXR1czogJ0RJU0NPTk5FQ1RFRCcsXG4gICAgdGFiSWQ6IG51bGwsXG4gICAgcGFnZUtleTogJycsXG4gICAgcGFnZUtleXM6IFtdLFxuICAgIHRoZW1lOiAnZGV2aWNlJyxcbiAgICBzZWxlY3Rpb25FbmFibGVkOiBmYWxzZSxcbiAgICBpdGVtczogW10sXG4gICAgZGVmYXVsdFNpemU6IDE0LFxuICAgIGRlZmF1bHRDb2xvcjogJ0JsdWUnLFxuICAgIGRlZmF1bHRTaGFwZTogJ2NpcmNsZScsXG4gICAgZGVmYXVsdExhYmVsRm9ybWF0OiAnTnVtYmVycycsXG4gICAgZGVmYXVsdFZpc2libGU6IHRydWUsXG4gICAgZGVmYXVsdFBvc2l0aW9uOiAnbGVmdC10b3Atb3V0c2lkZScsXG4gICAgZGVmYXVsdEdyb3VwOiBVTkdST1VQRURfVkFMVUUsXG4gICAgY2FwdHVyZToge1xuICAgICAgICBmb3JtYXQ6ICdwbmcnLFxuICAgICAgICBhcmVhOiAnZnVsbCcsXG4gICAgICAgIHF1YWxpdHk6IDkwLFxuICAgICAgICBzY2FsZTogMSxcbiAgICAgICAgcGFuZWxFeHBhbmRlZDogZmFsc2UsXG4gICAgfSxcbiAgICBzZWxlY3RJdGVtczogW10sXG4gICAgbWlzc2luZ0lkczogW10sXG4gICAgdG9hc3RNZXNzYWdlczogW10sXG59O1xuIiwiaW1wb3J0IHsgVU5HUk9VUEVEX1ZBTFVFIH0gZnJvbSAnQGNvbW1vbi90eXBlcyc7XG4vKipcbiAqIENyZWF0ZXMgYSBrZXktc2NvcGVkIOKAnG1hcCB0YWJsZeKAnSB0aGF0IHN0b3JlcyBhIHJlY29yZCBgeyBbcGFnZUtleV06IFQgfWBcbiAqIHVuZGVyIGEgc2luZ2xlIHJvb3Qga2V5IGluIGBjaHJvbWUuc3RvcmFnZS5sb2NhbGAuXG4gKlxuICogVXNlIHRoaXMgZm9yIHBlci1wYWdlIG9yIHBlci1zY29wZSBzdGF0ZSB3aGVyZSB2YWx1ZXMgYXJlIGRpc3Rpbmd1aXNoZWQgYnkgYSByb3cga2V5LlxuICpcbiAqIEB0eXBlUGFyYW0gVCAtIFZhbHVlIHR5cGUgc3RvcmVkIHBlciByb3cuXG4gKiBAcGFyYW0gcm9vdEtleSAtIFJvb3Qga2V5ICh3aXRob3V0IG5hbWVzcGFjZSBwcmVmaXgpIHVuZGVyIHdoaWNoIHRoZSBlbnRpcmUgbWFwIGlzIHN0b3JlZC5cbiAqIEBwYXJhbSBkZWZhdWx0T2YgLSBPcHRpb25hbCBmYWN0b3J5IHRoYXQgcmV0dXJucyBhIGRlZmF1bHQgdmFsdWUgd2hlbiBhIHJvdyBpcyBtaXNzaW5nLlxuICogQHJldHVybnMgQW4gb2JqZWN0IHdpdGggQ1JVRCBoZWxwZXJzIGZvciB0aGUgdGFibGU6IGB7IGtleSwgcmVhZEFsbCwgd3JpdGVBbGwsIGdldCwgc2V0LCByZW1vdmUsIGNsZWFyIH1gLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTWFwVGFibGUocm9vdEtleSwgZGVmYXVsdE9mKSB7XG4gICAgY29uc3QgS0VZID0gcm9vdEtleTtcbiAgICAvKipcbiAgICAgKiBMb2FkcyB0aGUgZW50aXJlIHN0YXRlIG1hcCBmcm9tIGBjaHJvbWUuc3RvcmFnZS5sb2NhbGAgZm9yIHRoaXMgdGFibGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB0byB0aGUgZnVsbCBzdGF0ZSBtYXA7IHJldHVybnMgYW4gZW1wdHkgb2JqZWN0IHdoZW4gbm90aGluZyBpcyBzdG9yZWQuXG4gICAgICogQHJlbWFya3MgUGVyZm9ybXMgc3RvcmFnZSBJL08gb24gZXZlcnkgY2FsbC5cbiAgICAgKi9cbiAgICBhc3luYyBmdW5jdGlvbiByZWFkQWxsKCkge1xuICAgICAgICBjb25zdCByYXcgPSBhd2FpdCBjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQoS0VZKTtcbiAgICAgICAgcmV0dXJuIHJhd1tLRVldID8/IHt9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQZXJzaXN0cyB0aGUgZW50aXJlIHN0YXRlIG1hcCB0byBgY2hyb21lLnN0b3JhZ2UubG9jYWxgIGZvciB0aGlzIHRhYmxlLlxuICAgICAqXG4gICAgICogQHBhcmFtIG1hcCAtIFRoZSBjb21wbGV0ZSBzdGF0ZSBtYXAgdG8gd3JpdGUuXG4gICAgICogQHJldHVybnMgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIHdyaXRlIGNvbXBsZXRlcy5cbiAgICAgKi9cbiAgICBhc3luYyBmdW5jdGlvbiB3cml0ZUFsbChtYXApIHtcbiAgICAgICAgYXdhaXQgY2hyb21lLnN0b3JhZ2UubG9jYWwuc2V0KHsgW0tFWV06IG1hcCB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGEgc2luZ2xlIHJvdyBieSBpdHMgcGFnZSBrZXkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFnZUtleSAtIFJvdyBrZXkgKGUuZy4sIHBhZ2UgaWRlbnRpZmllcikuXG4gICAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgdG8gdGhlIHN0b3JlZCB2YWx1ZTsgaWYgbWlzc2luZyBhbmQgYGRlZmF1bHRPZmAgaXMgcHJvdmlkZWQsIHRoYXQgZGVmYXVsdCBpcyByZXR1cm5lZC5cbiAgICAgKiBAcmVtYXJrcyBXaGVuIGBkZWZhdWx0T2ZgIGlzIG5vdCBwcm92aWRlZCBhbmQgdGhlIHJvdyBpcyBtaXNzaW5nLCBgdW5kZWZpbmVkYCBpcyByZXR1cm5lZCAodHlwZWQgYXMgYFRgKS5cbiAgICAgKi9cbiAgICBhc3luYyBmdW5jdGlvbiBnZXQocGFnZUtleSkge1xuICAgICAgICBjb25zdCBtYXAgPSBhd2FpdCByZWFkQWxsKCk7XG4gICAgICAgIGNvbnN0IGZvdW5kID0gbWFwW3BhZ2VLZXldO1xuICAgICAgICBpZiAoZm91bmQgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiBmb3VuZDtcbiAgICAgICAgaWYgKGRlZmF1bHRPZilcbiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0T2YocGFnZUtleSk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVwc2VydHMgYSBzaW5nbGUgcm93IGZvciB0aGUgZ2l2ZW4gcGFnZSBrZXkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFnZUtleSAtIFJvdyBrZXkgdG8gd3JpdGUuXG4gICAgICogQHBhcmFtIHZhbHVlIC0gVmFsdWUgdG8gcGVyc2lzdC5cbiAgICAgKi9cbiAgICBhc3luYyBmdW5jdGlvbiBzZXQocGFnZUtleSwgdmFsdWUpIHtcbiAgICAgICAgY29uc3QgbWFwID0gYXdhaXQgcmVhZEFsbCgpO1xuICAgICAgICBtYXBbcGFnZUtleV0gPSB2YWx1ZTtcbiAgICAgICAgYXdhaXQgd3JpdGVBbGwobWFwKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVsZXRlcyBhIHNpbmdsZSByb3cgZm9yIHRoZSBnaXZlbiBwYWdlIGtleS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYWdlS2V5IC0gUm93IGtleSB0byBkZWxldGUuXG4gICAgICovXG4gICAgYXN5bmMgZnVuY3Rpb24gcmVtb3ZlKHBhZ2VLZXkpIHtcbiAgICAgICAgY29uc3QgbWFwID0gYXdhaXQgcmVhZEFsbCgpO1xuICAgICAgICBpZiAocGFnZUtleSBpbiBtYXApIHtcbiAgICAgICAgICAgIGRlbGV0ZSBtYXBbcGFnZUtleV07XG4gICAgICAgICAgICBhd2FpdCB3cml0ZUFsbChtYXApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsZWFycyB0aGUgZW50aXJlIHRhYmxlIChyZW1vdmVzIGFsbCByb3dzIHVuZGVyIHRoaXMgcm9vdCBrZXkpLlxuICAgICAqL1xuICAgIGFzeW5jIGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICBhd2FpdCB3cml0ZUFsbCh7fSk7XG4gICAgfVxuICAgIHJldHVybiB7IGtleTogS0VZLCByZWFkQWxsLCB3cml0ZUFsbCwgZ2V0LCBzZXQsIHJlbW92ZSwgY2xlYXIgfTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIGtleS1zY29wZWQg4oCcc2luZ2xldG9u4oCdIHN0b3JlIHRoYXQgc2F2ZXMgYSBzaW5nbGUgdmFsdWUgZGlyZWN0bHlcbiAqIHVuZGVyIHRoZSBnaXZlbiByb290IGtleSBpbiBgY2hyb21lLnN0b3JhZ2UubG9jYWxgLlxuICpcbiAqIFVzZSB0aGlzIGZvciBnbG9iYWwgc2V0dGluZ3Mgb3IgYW55IGNvbmZpZ3VyYXRpb24gdGhhdCBpcyBub3Qga2V5ZWQgYnkgcGFnZS5cbiAqXG4gKiBAdHlwZVBhcmFtIFQgLSBWYWx1ZSB0eXBlIHN0b3JlZCBhcyBhIHNpbmdsZXRvbi5cbiAqIEBwYXJhbSByb290S2V5IC0gUm9vdCBrZXkgKHdpdGhvdXQgbmFtZXNwYWNlIHByZWZpeCkgdW5kZXIgd2hpY2ggdGhlIHZhbHVlIGlzIHN0b3JlZC5cbiAqIEBwYXJhbSBkZWZhdWx0RmFjdG9yeSAtIEZhY3RvcnkgZnVuY3Rpb24gdG8gbGF6aWx5IHN1cHBseSB0aGUgZGVmYXVsdCB3aGVuIG5vIHZhbHVlIGV4aXN0cy5cbiAqIEByZXR1cm5zIEFuIG9iamVjdCB3aXRoIGhlbHBlcnMgZm9yIHRoZSBzaW5nbGV0b246IGB7IGtleSwgZ2V0LCBzZXQsIHJlbW92ZSB9YC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNpbmdsZXRvbihyb290S2V5LCBkZWZhdWx0RmFjdG9yeSkge1xuICAgIGNvbnN0IEtFWSA9IHJvb3RLZXk7XG4gICAgLyoqXG4gICAgICogUmVhZHMgdGhlIHNpbmdsZXRvbiB2YWx1ZSBmcm9tIHN0b3JhZ2UuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB0byB0aGUgc3RvcmVkIHZhbHVlOyBmYWxscyBiYWNrIHRvIGBkZWZhdWx0RmFjdG9yeSgpYCB3aGVuIG1pc3NpbmcuXG4gICAgICovXG4gICAgYXN5bmMgZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICBjb25zdCByYXcgPSBhd2FpdCBjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQoS0VZKTtcbiAgICAgICAgY29uc3QgdmFsID0gcmF3W0tFWV07XG4gICAgICAgIHJldHVybiB2YWwgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRGYWN0b3J5KCkgOiB2YWw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlcyB0aGUgc2luZ2xldG9uIHZhbHVlIHRvIHN0b3JhZ2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBWYWx1ZSB0byBwZXJzaXN0LlxuICAgICAqL1xuICAgIGFzeW5jIGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICBhd2FpdCBjaHJvbWUuc3RvcmFnZS5sb2NhbC5zZXQoeyBbS0VZXTogdmFsdWUgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIHNpbmdsZXRvbiB2YWx1ZSBmcm9tIHN0b3JhZ2UuXG4gICAgICovXG4gICAgYXN5bmMgZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgICBhd2FpdCBjaHJvbWUuc3RvcmFnZS5sb2NhbC5yZW1vdmUoS0VZKTtcbiAgICB9XG4gICAgcmV0dXJuIHsga2V5OiBLRVksIGdldCwgc2V0LCByZW1vdmUgfTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRTY3JlZW5TdGF0ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBpdGVtczogW10sXG4gICAgICAgIG5leHRJZDogMSxcbiAgICAgICAgZGVmYXVsdFNpemU6IDE0LFxuICAgICAgICBkZWZhdWx0Q29sb3I6ICdCbHVlJyxcbiAgICAgICAgZGVmYXVsdFNoYXBlOiAnY2lyY2xlJyxcbiAgICAgICAgZGVmYXVsdExhYmVsRm9ybWF0OiAnTnVtYmVycycsXG4gICAgICAgIGRlZmF1bHRWaXNpYmxlOiB0cnVlLFxuICAgICAgICBkZWZhdWx0UG9zaXRpb246ICdsZWZ0LXRvcC1vdXRzaWRlJyxcbiAgICAgICAgZGVmYXVsdEdyb3VwOiBVTkdST1VQRURfVkFMVUUsXG4gICAgfTtcbn1cbi8qKlxuICogVGFibGUgZm9yIHBlci1wYWdlIGBTY3JlZW5TdGF0ZWAgdmFsdWVzLlxuICogRWFjaCByb3cgaXMgYWRkcmVzc2VkIGJ5IGEgcGFnZSBrZXk7IG1pc3Npbmcgcm93cyBmYWxsIGJhY2sgdG8gYGRlZmF1bHRTY3JlZW5TdGF0ZSgpYC5cbiAqL1xuZXhwb3J0IGNvbnN0IHNjcmVlblN0YXRlVGFibGUgPSBjcmVhdGVNYXBUYWJsZSgnc2NyZWVuU3RhdGVCeVBhZ2UnLCAoKSA9PiBkZWZhdWx0U2NyZWVuU3RhdGUoKSk7XG4vKipcbiAqIFNpbmdsZXRvbiBmb3IgZ2xvYmFsIHRoZW1lIG1vZGUuXG4gKiBTdG9yZXMgYSBzaW5nbGUgYFRoZW1lTW9kZWAgdmFsdWU7IGRlZmF1bHRzIHRvIGAnZGV2aWNlJ2Agd2hlbiBub3Qgc2V0LlxuICovXG5leHBvcnQgY29uc3QgdGhlbWVUYWJsZSA9IGNyZWF0ZVNpbmdsZXRvbigndGhlbWVNb2RlJywgKCkgPT4gJ2RldmljZScpO1xuIiwiaW1wb3J0IHsgc2NyZWVuU3RhdGVUYWJsZSB9IGZyb20gJ0BwYW5lbC9zdG9yYWdlL3RhYmxlcyc7XG4vKipcbiAqIEFwcGxpZXMgYSBwYXRjaCAoYWRkL3VwZGF0ZS9yZW1vdmUpIHRvIHRoZSBzdGF0ZSBmb3IgdGhlIGdpdmVuIHBhZ2Uga2V5LFxuICogcmVsYWJlbHMgc2VxdWVudGlhbGx5IGlmIGFueSByZW1vdmFsIG9jY3VycmVkLCBwZXJzaXN0cyB0aGUgcmVzdWx0LFxuICogYW5kIHJldHVybnMgdGhlIHVwZGF0ZWQgc3RhdGUuXG4gKlxuICogQHBhcmFtIHBhZ2VLZXlTdHIgLSBQYWdlIGtleSBvZiB0aGUgc3RhdGUgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHBhdGNoIC0gQ2hhbmdlcyB0byBhcHBseSB0byB0aGUgc3RhdGUuXG4gKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB0byB0aGUgdXBkYXRlZCBTY3JlZW5TdGF0ZS5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFwcGx5UGF0Y2gocGFnZUtleSwgcGF0Y2gpIHtcbiAgICBjb25zdCBzdGF0ZSA9IGF3YWl0IHNjcmVlblN0YXRlVGFibGUuZ2V0KHBhZ2VLZXkpO1xuICAgIGlmIChwYXRjaC5yZW1vdmVkSWRzPy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgdG9SZW1vdmUgPSBuZXcgU2V0KHBhdGNoLnJlbW92ZWRJZHMpO1xuICAgICAgICBzdGF0ZS5pdGVtcyA9IHN0YXRlLml0ZW1zLmZpbHRlcigoaXQpID0+ICF0b1JlbW92ZS5oYXMoaXQuaWQpKTtcbiAgICB9XG4gICAgaWYgKHBhdGNoLmFkZGVkPy5sZW5ndGgpIHtcbiAgICAgICAgZm9yIChjb25zdCBhIG9mIHBhdGNoLmFkZGVkKSB7XG4gICAgICAgICAgICBjb25zdCBpZCA9IHN0YXRlLm5leHRJZCsrO1xuICAgICAgICAgICAgY29uc3QgbGFiZWwgPSBJbmZpbml0eTtcbiAgICAgICAgICAgIGNvbnN0IGl0ID0ge1xuICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgIGxhYmVsLFxuICAgICAgICAgICAgICAgIGFuY2hvcjogYS5hbmNob3IsXG4gICAgICAgICAgICAgICAgc2l6ZTogYS5zaXplID8/IHN0YXRlLmRlZmF1bHRTaXplLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBhLmNvbG9yID8/IHN0YXRlLmRlZmF1bHRDb2xvcixcbiAgICAgICAgICAgICAgICBzaGFwZTogYS5zaGFwZSA/PyBzdGF0ZS5kZWZhdWx0U2hhcGUsXG4gICAgICAgICAgICAgICAgbGFiZWxGb3JtYXQ6IGEubGFiZWxGb3JtYXQgPz8gc3RhdGUuZGVmYXVsdExhYmVsRm9ybWF0LFxuICAgICAgICAgICAgICAgIHZpc2libGU6IGEudmlzaWJsZSA/PyBzdGF0ZS5kZWZhdWx0VmlzaWJsZSxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogYS5wb3NpdGlvbiA/PyBzdGF0ZS5kZWZhdWx0UG9zaXRpb24sXG4gICAgICAgICAgICAgICAgZ3JvdXA6IGEuZ3JvdXAgPz8gc3RhdGUuZGVmYXVsdEdyb3VwLFxuICAgICAgICAgICAgICAgIGNvbW1lbnQ6IGEuY29tbWVudCA/PyAnJyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzdGF0ZS5pdGVtcy5wdXNoKGl0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0ZS5pdGVtcyA9IG5vcm1hbGl6ZUdyb3VwTGFiZWxzQW5kQ291bnRVbmdyb3VwZWQoc3RhdGUuaXRlbXMpO1xuICAgIGF3YWl0IHNjcmVlblN0YXRlVGFibGUuc2V0KHBhZ2VLZXksIHN0YXRlKTtcbiAgICByZXR1cm4gc3RhdGU7XG59XG4vKipcbiAqIFRvZ2dsZXMgc2VsZWN0aW9uIGZvciB0aGUgZ2l2ZW4gYW5jaG9ycyAoZnJvbSBDb250ZW50KTogaWYgYW4gYW5jaG9yIGFscmVhZHlcbiAqIGV4aXN0cywgcmVtb3ZlIGl0OyBvdGhlcndpc2UgYWRkIGl0LiBEZWR1cGUgaW5jb21pbmcgYW5jaG9ycyBieSBgdmFsdWVgLFxuICogYXBwbHkgdGhlIGNvcnJlc3BvbmRpbmcgcGF0Y2gsIHBlcnNpc3QsIGFuZCByZXR1cm4gdGhlIGxhdGVzdCBzdGF0ZS5cbiAqXG4gKiBAcGFyYW0gcGFnZUtleVN0ciAtIFBhZ2Uga2V5IG9mIHRoZSBzdGF0ZSB0byB1cGRhdGUuXG4gKiBAcGFyYW0gYW5jaG9ycyAtIEFuY2hvcnMgcmVwb3J0ZWQgYnkgQ29udGVudC5cbiAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIHRoZSB1cGRhdGVkIFNjcmVlblN0YXRlLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlU2VsZWN0ZWQocGFnZUtleSwgYW5jaG9ycykge1xuICAgIGNvbnN0IHN0YXRlID0gYXdhaXQgc2NyZWVuU3RhdGVUYWJsZS5nZXQocGFnZUtleSk7XG4gICAgY29uc3QgdW5pcSA9IEFycmF5LmZyb20obmV3IFNldChhbmNob3JzLm1hcCgoYSkgPT4gYS52YWx1ZSkpKVxuICAgICAgICAubWFwKCh2KSA9PiBhbmNob3JzLmZpbmQoKGEpID0+IGEudmFsdWUgPT09IHYpKVxuICAgICAgICAuZmlsdGVyKEJvb2xlYW4pO1xuICAgIGNvbnN0IHJlbW92ZWRJZHMgPSBbXTtcbiAgICBjb25zdCB0b0FkZCA9IFtdO1xuICAgIGZvciAoY29uc3QgYSBvZiB1bmlxKSB7XG4gICAgICAgIGNvbnN0IGZvdW5kID0gc3RhdGUuaXRlbXMuZmluZCgoaXQpID0+IGl0LmFuY2hvci5raW5kID09PSBhLmtpbmQgJiYgaXQuYW5jaG9yLnZhbHVlID09PSBhLnZhbHVlKTtcbiAgICAgICAgaWYgKGZvdW5kKSB7XG4gICAgICAgICAgICByZW1vdmVkSWRzLnB1c2goZm91bmQuaWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdG9BZGQucHVzaCh7IGFuY2hvcjogYSB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBwYXRjaCA9IHt9O1xuICAgIGlmIChyZW1vdmVkSWRzLmxlbmd0aClcbiAgICAgICAgcGF0Y2gucmVtb3ZlZElkcyA9IHJlbW92ZWRJZHM7XG4gICAgaWYgKHRvQWRkLmxlbmd0aClcbiAgICAgICAgcGF0Y2guYWRkZWQgPSB0b0FkZDtcbiAgICByZXR1cm4gYXBwbHlQYXRjaChwYWdlS2V5LCBwYXRjaCk7XG59XG4vKipcbiAqIFJlbGFiZWxzIGl0ZW1zIGNvbnNlY3V0aXZlbHkgKDEuLm4pICp3aXRoaW4gZWFjaCBncm91cCogYW5kIHJlcG9ydHNcbiAqIHRoZSBjdXJyZW50IHNpemUgb2YgdGhlIFwibm8gZ3JvdXBcIiBidWNrZXQuXG4gKlxuICogQHBhcmFtIGl0ZW1zIC0gVGhlIG9yaWdpbmFsIGxpc3Qgb2YgaXRlbXMgKHRyZWF0ZWQgaW1tdXRhYmx5KS5cbiAqIEByZXR1cm5zIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBub3JtYWxpemVkIGl0ZW1zIGFuZCB0aGUgbm8tZ3JvdXAgY291bnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVHcm91cExhYmVsc0FuZENvdW50VW5ncm91cGVkKGl0ZW1zKSB7XG4gICAgY29uc3Qgbm9ybWFsaXplID0gKGcpID0+IChnID8/ICcnKS50cmltKCk7IC8vICcnIGlzIHVuaWZpZWQgYXMgVW5Hcm91cFxuICAgIC8vIEJ1Y2tldCBbaW5kZXgsIGl0ZW1dIGZvciBlYWNoIGdyb3VwXG4gICAgY29uc3QgYnVja2V0cyA9IG5ldyBNYXAoKTtcbiAgICBpdGVtcy5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBrZXkgPSBub3JtYWxpemUoaXRlbS5ncm91cCk7XG4gICAgICAgIGlmICghYnVja2V0cy5oYXMoa2V5KSlcbiAgICAgICAgICAgIGJ1Y2tldHMuc2V0KGtleSwgW10pO1xuICAgICAgICBidWNrZXRzLmdldChrZXkpLnB1c2goeyBpbmRleCwgaXRlbSB9KTtcbiAgICB9KTtcbiAgICBjb25zdCBvdXQgPSBpdGVtcy5zbGljZSgpO1xuICAgIC8vIFNvcnQgZWFjaCBncm91cCDihpIgUmVhc3NpZ24gMS4ublxuICAgIGZvciAoY29uc3QgWywgYnVja2V0XSBvZiBidWNrZXRzKSB7XG4gICAgICAgIGJ1Y2tldC5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICBpZiAoYS5pdGVtLmxhYmVsICE9PSBiLml0ZW0ubGFiZWwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGEuaXRlbS5sYWJlbCAtIGIuaXRlbS5sYWJlbDtcbiAgICAgICAgICAgIHJldHVybiBhLml0ZW0uaWQgLSBiLml0ZW0uaWQ7XG4gICAgICAgIH0pO1xuICAgICAgICBidWNrZXQuZm9yRWFjaCgoeyBpbmRleCwgaXRlbSB9LCBpKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkZXNpcmVkID0gaSArIDE7XG4gICAgICAgICAgICBpZiAoaXRlbS5sYWJlbCAhPT0gZGVzaXJlZCkge1xuICAgICAgICAgICAgICAgIG91dFtpbmRleF0gPSB7IC4uLml0ZW0sIGxhYmVsOiBkZXNpcmVkIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xufVxuIiwiY29uc3QgaTE4biA9IHsgZ2V0LCBsb2NhbGl6ZSB9O1xuLyoqXG4gKiBSZXRyaWV2ZXMgYSBsb2NhbGl6ZWQgbWVzc2FnZSBieSBrZXkuIEZhbGxzIGJhY2sgdG8gdGhlIGtleSBpdHNlbGYgd2hlbiBub3QgZm91bmQuXG4gKlxuICogQHBhcmFtIGtleSAtIEtleSBkZWZpbmVkIGluIF9sb2NhbGVzL21lc3NhZ2VzLmpzb25cbiAqIEBwYXJhbSBzdWJzIC0gT3B0aW9uYWwgc3Vic3RpdHV0aW9uIGFyZ3VtZW50c1xuICogQHJldHVybnMgTG9jYWxpemVkIHN0cmluZ1xuICovXG5mdW5jdGlvbiBnZXQoa2V5LCBzdWJzKSB7XG4gICAgcmV0dXJuIGNocm9tZS5pMThuLmdldE1lc3NhZ2Uoa2V5LCBzdWJzKSB8fCBrZXk7XG59XG4vKipcbiAqIFdhbGtzIHRoZSBET00gYW5kIGFwcGxpZXMgbG9jYWxpemVkIHN0cmluZ3MgdG8gZWxlbWVudHMgd2l0aFxuICogYGRhdGEtaTE4bmAgYW5kIGBkYXRhLWkxOG4tYXR0cmAuXG4gKlxuICogQHBhcmFtIHJvb3QgLSBSb290IG5vZGUgdG8gbG9jYWxpemUgKGRlZmF1bHRzIHRvIGRvY3VtZW50KVxuICogQHJlbWFya3NcbiAqIC0gYGRhdGEtaTE4bmAgcmVwbGFjZXMgYHRleHRDb250ZW50YC5cbiAqIC0gYGRhdGEtaTE4bi1hdHRyYCB1c2VzIGBhdHRyOmtleTthdHRyOmtleTsuLi5gIHRvIHNldCBhdHRyaWJ1dGVzLlxuICogLSBNdXRhdGVzIHRoZSBET00gaW4gcGxhY2UuXG4gKi9cbmZ1bmN0aW9uIGxvY2FsaXplKHJvb3QgPSBkb2N1bWVudCkge1xuICAgIHJvb3QucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtaTE4bl0nKS5mb3JFYWNoKChlbCkgPT4ge1xuICAgICAgICBjb25zdCBrZXkgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaTE4bicpO1xuICAgICAgICBpZiAoa2V5KVxuICAgICAgICAgICAgZWwudGV4dENvbnRlbnQgPSBnZXQoa2V5KTtcbiAgICB9KTtcbiAgICByb290LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWkxOG4tYXR0cl0nKS5mb3JFYWNoKChlbCkgPT4ge1xuICAgICAgICBjb25zdCBzcGVjID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLWkxOG4tYXR0cicpO1xuICAgICAgICBpZiAoIXNwZWMpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGZvciAoY29uc3QgcGFpciBvZiBzcGVjLnNwbGl0KCc7JykpIHtcbiAgICAgICAgICAgIGNvbnN0IFthdHRyLCBrZXldID0gcGFpci5zcGxpdCgnOicpLm1hcCgocykgPT4gcz8udHJpbSgpKTtcbiAgICAgICAgICAgIGlmIChhdHRyICYmIGtleSlcbiAgICAgICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoYXR0ciwgZ2V0KGtleSkpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5leHBvcnQgZGVmYXVsdCBpMThuO1xuIiwiaW1wb3J0IGkxOG4gZnJvbSAnQGNvbW1vbi9pMThuJztcbmV4cG9ydCBjb25zdCBTVEFUVVMgPSB7XG4gICAgUkVTVFJJQ1RFRDogJ1JFU1RSSUNURUQnLFxuICAgIENPTk5FQ1RJTkc6ICdDT05ORUNUSU5HJyxcbiAgICBDT05ORUNURUQ6ICdDT05ORUNURUQnLFxuICAgIERJU0NPTk5FQ1RFRDogJ0RJU0NPTk5FQ1RFRCcsXG59O1xuY29uc3QgU1RBVFVTX01TR19LRVkgPSB7XG4gICAgUkVTVFJJQ1RFRDogJ3N0YXR1c19yZXN0cmljdGVkJyxcbiAgICBDT05ORUNUSU5HOiAnc3RhdHVzX2Nvbm5lY3RpbmcnLFxuICAgIENPTk5FQ1RFRDogJ3N0YXR1c19jb25uZWN0ZWQnLFxuICAgIERJU0NPTk5FQ1RFRDogJ3N0YXR1c19kaXNjb25uZWN0ZWQnLFxufTtcbmV4cG9ydCBjb25zdCBTVEFUVVNfQ0xBU1NfQllfS0VZID0ge1xuICAgIFJFU1RSSUNURUQ6ICdjb25uZWN0LXN0YXR1cy0tcmVzdHJpY3RlZCcsXG4gICAgQ09OTkVDVElORzogJ2Nvbm5lY3Qtc3RhdHVzLS1jb25uZWN0aW5nJyxcbiAgICBDT05ORUNURUQ6ICdjb25uZWN0LXN0YXR1cy0tY29ubmVjdGVkJyxcbiAgICBESVNDT05ORUNURUQ6ICdjb25uZWN0LXN0YXR1cy0tZGlzY29ubmVjdGVkJyxcbn07XG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RhdHVzTWVzc2FnZShrZXkpIHtcbiAgICBjb25zdCBtc2dLZXkgPSBTVEFUVVNfTVNHX0tFWVtrZXldO1xuICAgIHJldHVybiBpMThuLmdldChtc2dLZXkpIHx8IG1zZ0tleTtcbn1cbiIsIi8qKlxuICogQWN0aW9uVHlwZVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEFuIGV4aGF1c3RpdmUgbGlzdCBvZiAqYXBwbGljYXRpb24tbGV2ZWwgZXZlbnRzKiBjb25zdW1lZCBieSB0aGUgcmVkdWNlciAodXBkYXRlLnRzKS5cbiAqIE9yaWdpbnM6XG4gKiAgIC0gVmlldyBVSSBldmVudHMgKG5vcm1hbGl6ZWQgYnkgdGhlIENvbnRyb2xsZXIpXG4gKiAgIC0gTWVzc2FnZXMgZnJvbSBDb250ZW50L0JhY2tncm91bmQgc2NyaXB0c1xuICogICAtIFJlc3VsdHMgb2YgYXN5bmMgSS9PIChjYXB0dXJlIHN1Y2Nlc3MvZmFpbHVyZSwgZXRjLilcbiAqIFVzYWdlOlxuICogICAtIEFjdHMgYXMgdGhlIGRpc2NyaW1pbmFudCBmb3IgYHN3aXRjaChhY3Rpb24udHlwZSlgIGluIHRoZSByZWR1Y2VyXG4gKiAgIC0gUHVyZWx5IGRldGVybWluZXMgaG93IHRoZSBNb2RlbCB0cmFuc2l0aW9ucyAobm8gc2lkZSBlZmZlY3RzIGhlcmUpXG4gKi9cbmV4cG9ydCB2YXIgQWN0aW9uVHlwZTtcbihmdW5jdGlvbiAoQWN0aW9uVHlwZSkge1xuICAgIC8qKiBBcHAgYm9vdHN0cmFwIC8gc3RhcnQgKi9cbiAgICBBY3Rpb25UeXBlW1wiSU5JVFwiXSA9IFwiSU5JVFwiO1xuICAgIC8qKiBBY3RpdmUgdGFiIHJlc29sdmVkIGFuZCBjb25uZWN0aW9uIGVzdGFibGlzaGVkICh0YWJJZC9wYWdlS2V5IGRlY2lkZWQpICovXG4gICAgQWN0aW9uVHlwZVtcIkNPTk5FQ1RFRFwiXSA9IFwiQ09OTkVDVEVEXCI7XG4gICAgLyoqIFVwZGF0ZSBwYW5lbCBzdGF0dXMgKENPTk5FQ1RJTkcgLyBDT05ORUNURUQgLyBSRVNUUklDVEVEIC8gRElTQ09OTkVDVEVELCBldGMuKSAqL1xuICAgIEFjdGlvblR5cGVbXCJTRVRfU1RBVFVTXCJdID0gXCJTRVRfU1RBVFVTXCI7XG4gICAgLyoqIFJlc3RvcmUgcGVyc2lzdGVkIHN0YXRlOiBpdGVtcyBhbmQgZGVmYXVsdHMgKHNpemUvY29sb3Ivc2hhcGUpICovXG4gICAgQWN0aW9uVHlwZVtcIlJFU1RPUkVfU1RBVEVcIl0gPSBcIlJFU1RPUkVfU1RBVEVcIjtcbiAgICAvKiogT3ZlcndyaXRlcyB0aGUgc2V0IG9mIGVsZW1lbnRzIHRoYXQgYXJlIG5vdCBwcmVzZW50IGluIHRoZSBjb250ZW50ICovXG4gICAgQWN0aW9uVHlwZVtcIlNFVF9NSVNTSU5HX0lEU1wiXSA9IFwiU0VUX01JU1NJTkdfSURTXCI7XG4gICAgLyoqIFRvZ2dsZSBzZWxlY3Rpb24gbW9kZSBvbiB0aGUgcGFnZSBvdmVybGF5ICovXG4gICAgQWN0aW9uVHlwZVtcIlRPR0dMRV9TRUxFQ1RcIl0gPSBcIlRPR0dMRV9TRUxFQ1RcIjtcbiAgICAvKiogQ2xlYXIgYWxsIHNlbGVjdGlvbnMgKi9cbiAgICBBY3Rpb25UeXBlW1wiQ0xFQVJfQUxMXCJdID0gXCJDTEVBUl9BTExcIjtcbiAgICAvKiogQ29udGVudCDihpIgUGFuZWw6IGFuY2hvcnMgd2VyZSB0b2dnbGVkIChzZWxlY3RlZC91bnNlbGVjdGVkKSBvbiB0aGUgcGFnZSAqL1xuICAgIEFjdGlvblR5cGVbXCJDT05URU5UX1NFTEVDVEVEXCJdID0gXCJDT05URU5UX1NFTEVDVEVEXCI7XG4gICAgLyoqIFVwZGF0ZSBkZWZhdWx0IGJhZGdlIHNpemUgKGFsc28gYXBwbHkgdG8gZXhpc3RpbmcgaXRlbXMpICovXG4gICAgQWN0aW9uVHlwZVtcIlNFVF9CQURHRV9TSVpFXCJdID0gXCJTRVRfQkFER0VfU0laRVwiO1xuICAgIC8qKiBVcGRhdGUgZGVmYXVsdCBiYWRnZSBjb2xvciAoYWxzbyBhcHBseSB0byBleGlzdGluZyBpdGVtcykgKi9cbiAgICBBY3Rpb25UeXBlW1wiU0VUX0JBREdFX0NPTE9SXCJdID0gXCJTRVRfQkFER0VfQ09MT1JcIjtcbiAgICAvKiogVXBkYXRlIGRlZmF1bHQgYmFkZ2Ugc2hhcGUgKGFsc28gYXBwbHkgdG8gZXhpc3RpbmcgaXRlbXMpICovXG4gICAgQWN0aW9uVHlwZVtcIlNFVF9CQURHRV9TSEFQRVwiXSA9IFwiU0VUX0JBREdFX1NIQVBFXCI7XG4gICAgLyoqIFVwZGF0ZSBkZWZhdWx0IGJhZGdlIGxhYmVsIGZvcm1hdCAoYWxzbyBhcHBseSB0byBleGlzdGluZyBpdGVtcykgKi9cbiAgICBBY3Rpb25UeXBlW1wiU0VUX0JBREdFX0xBQkVMX0ZPUk1BVFwiXSA9IFwiU0VUX0JBREdFX0xBQkVMX0ZPUk1BVFwiO1xuICAgIC8qKiBVcGRhdGUgZGVmYXVsdCBiYWRnZSB2aXNhYmxlIChhbHNvIGFwcGx5IHRvIGV4aXN0aW5nIGl0ZW1zKSAqL1xuICAgIEFjdGlvblR5cGVbXCJTRVRfQkFER0VfVklTSUJMRVwiXSA9IFwiU0VUX0JBREdFX1ZJU0lCTEVcIjtcbiAgICAvKiogRGVsZXRlIHRoZSBzZWxlY3RlZCBiYWRnZSAqL1xuICAgIEFjdGlvblR5cGVbXCJCQURHRV9ERUxFVEVcIl0gPSBcIkJBREdFX0RFTEVURVwiO1xuICAgIC8qKiBVcGRhdGUgZGVmYXVsdCBiYWRnZSBwb3NpdGlvbiAoYWxzbyBhcHBseSB0byBleGlzdGluZyBpdGVtcykgKi9cbiAgICBBY3Rpb25UeXBlW1wiU0VUX0JBREdFX1BPU0lUSU9OXCJdID0gXCJTRVRfQkFER0VfUE9TSVRJT05cIjtcbiAgICAvKiogVXBkYXRlIGNhcHR1cmUgZm9ybWF0IChwbmcvanBlZykgKi9cbiAgICBBY3Rpb25UeXBlW1wiU0VUX0NBUFRVUkVfRk9STUFUXCJdID0gXCJTRVRfQ0FQVFVSRV9GT1JNQVRcIjtcbiAgICAvKiogVXBkYXRlIGNhcHR1cmUgYXJlYSAoZnVsbC92aWV3cG9ydCkgKi9cbiAgICBBY3Rpb25UeXBlW1wiU0VUX0NBUFRVUkVfQVJFQVwiXSA9IFwiU0VUX0NBUFRVUkVfQVJFQVwiO1xuICAgIC8qKiBVcGRhdGUgSlBFRyBxdWFsaXR5ICovXG4gICAgQWN0aW9uVHlwZVtcIlNFVF9DQVBUVVJFX1FVQUxJVFlcIl0gPSBcIlNFVF9DQVBUVVJFX1FVQUxJVFlcIjtcbiAgICAvKiogVXBkYXRlIGNhcHR1cmUgc2NhbGUgZmFjdG9yICovXG4gICAgQWN0aW9uVHlwZVtcIlNFVF9DQVBUVVJFX1NDQUxFXCJdID0gXCJTRVRfQ0FQVFVSRV9TQ0FMRVwiO1xuICAgIC8qKiBUb2dnbGUgY2FwdHVyZSBvcHRpb25zIGRyb3Bkb3duIChleHBhbmQvY29sbGFwc2UpICovXG4gICAgQWN0aW9uVHlwZVtcIlRPR0dMRV9DQVBUVVJFX1BBTkVMXCJdID0gXCJUT0dHTEVfQ0FQVFVSRV9QQU5FTFwiO1xuICAgIC8qKiByZXF1ZXN0IG1lYXN1cmluZyB0aGUgY29udGVudCBzaXplICovXG4gICAgQWN0aW9uVHlwZVtcIk1FQVNVUkVfQ09OVEVOVF9TSVpFXCJdID0gXCJNRUFTVVJFX0NPTlRFTlRfU0laRVwiO1xuICAgIC8qKiBSZXF1ZXN0IHRvIHJ1biBhIGNhcHR1cmUgKi9cbiAgICBBY3Rpb25UeXBlW1wiQ0FQVFVSRV9SRVFVRVNURURcIl0gPSBcIkNBUFRVUkVfUkVRVUVTVEVEXCI7XG4gICAgLyoqIENhcHR1cmUgY29tcGxldGVkIHN1Y2Nlc3NmdWxseSAqL1xuICAgIEFjdGlvblR5cGVbXCJDQVBUVVJFX1NVQ0NFRURFRFwiXSA9IFwiQ0FQVFVSRV9TVUNDRUVERURcIjtcbiAgICAvKiogQ2FwdHVyZSBmYWlsZWQgd2l0aCBhbiBlcnJvciAqL1xuICAgIEFjdGlvblR5cGVbXCJDQVBUVVJFX0ZBSUxFRFwiXSA9IFwiQ0FQVFVSRV9GQUlMRURcIjtcbiAgICAvKiogUmVvcmRlcmluZyBzZWxlY3RlZCBpdGVtcyAoZHJhZyBhbmQgZHJvcCkgKi9cbiAgICBBY3Rpb25UeXBlW1wiUkVPUkRFUl9JVEVNU1wiXSA9IFwiUkVPUkRFUl9JVEVNU1wiO1xuICAgIC8qKiBVcGRhdGUgYSBncm91cCBvZiBlbGVtZW50cyAqL1xuICAgIEFjdGlvblR5cGVbXCJTRVRfR1JPVVBcIl0gPSBcIlNFVF9HUk9VUFwiO1xuICAgIC8qKiBQb3J0IGRpc2Nvbm5lY3RlZCAobG9zdCBjb25uZWN0aW9uIHRvIENvbnRlbnQvU2VydmljZSBXb3JrZXIpICovXG4gICAgQWN0aW9uVHlwZVtcIlBPUlRfRElTQ09OTkVDVEVEXCJdID0gXCJQT1JUX0RJU0NPTk5FQ1RFRFwiO1xuICAgIC8qKiBSZXF1ZXN0IHRvIGNsb3NlIHRoZSBwYW5lbCB3aGVuIHRoZSB0YWJJZCBtYXRjaGVzIChCYWNrZ3JvdW5kIOKGkiBQYW5lbCkgKi9cbiAgICBBY3Rpb25UeXBlW1wiQ0xPU0VfUEFORUxfUkVRVUVTVEVEXCJdID0gXCJDTE9TRV9QQU5FTF9SRVFVRVNURURcIjtcbiAgICAvKiogRW1pdHRlZCB3aGVuIGFuIGl0ZW0ncyBlZGl0LXNlbGVjdGlvbiBjaGVja2JveCBjaGFuZ2VzIHN0YXRlICovXG4gICAgQWN0aW9uVHlwZVtcIklURU1fU0VMRUNUSU9OX0NIQU5HRURcIl0gPSBcIklURU1fU0VMRUNUSU9OX0NIQU5HRURcIjtcbiAgICAvKiogU3RhcnQgaXRlbSBob3ZlciAqL1xuICAgIEFjdGlvblR5cGVbXCJJVEVNX0hPVkVSX0lOXCJdID0gXCJJVEVNX0hPVkVSX0lOXCI7XG4gICAgLyoqIEVuZCBpdGVtIGhvdmVyICovXG4gICAgQWN0aW9uVHlwZVtcIklURU1fSE9WRVJfT1VUXCJdID0gXCJJVEVNX0hPVkVSX09VVFwiO1xuICAgIC8qKiBQZXJzaXN0IHRoZSBlZGl0ZWQgY29tbWVudCB0ZXh0IGZvciB0aGUgdGFyZ2V0ZWQgaXRlbSAqL1xuICAgIEFjdGlvblR5cGVbXCJVUERBVEVfSVRFTV9DT01NRU5UXCJdID0gXCJVUERBVEVfSVRFTV9DT01NRU5UXCI7XG4gICAgLyoqIFNldGUgVUkgdGhlbWUgKi9cbiAgICBBY3Rpb25UeXBlW1wiU0VUX1RIRU1FXCJdID0gXCJTRVRfVEhFTUVcIjtcbiAgICAvKiogVXBkYXRlIHRoZSBVSSB0aGVtZSAqL1xuICAgIEFjdGlvblR5cGVbXCJVUERBVEVfVEhFTUVcIl0gPSBcIlVQREFURV9USEVNRVwiO1xuICAgIC8qKiBEaXNwYXRjaGVkIHRvIHJlcXVlc3QgcmVsb2FkaW5nIHRoZSBsYXRlc3QgZGF0YSAqL1xuICAgIEFjdGlvblR5cGVbXCJTVE9SRV9SRUxPQURfUkVRVUVTVEVEXCJdID0gXCJTVE9SRV9SRUxPQURfUkVRVUVTVEVEXCI7XG4gICAgLyoqIERpc3BhdGNoZWQgYWZ0ZXIgdGhlIHN0b3JlIGlzIHN1Y2Nlc3NmdWxseSByZWxvYWRlZCB3aXRoIHRoZSBsYXRlc3QgZGF0YSAqL1xuICAgIEFjdGlvblR5cGVbXCJTVE9SRV9SRUxPQURfU1VDQ0VFREVEXCJdID0gXCJTVE9SRV9SRUxPQURfU1VDQ0VFREVEXCI7XG4gICAgLyoqIEltcG9ydCBhIFNjcmVlblN0YXRlIGZyb20gYSBzZWxlY3RlZCBKU09OIGZpbGUuICovXG4gICAgQWN0aW9uVHlwZVtcIklNUE9SVF9TQ1JFQU5fU1RBVEVfRklMRVwiXSA9IFwiSU1QT1JUX1NDUkVBTl9TVEFURV9GSUxFXCI7XG4gICAgLyoqIEVtaXR0ZWQgd2hlbiB0aGUgaW1wb3J0IG9wZXJhdGlvbiBzdWNjZWVkcy4gKi9cbiAgICBBY3Rpb25UeXBlW1wiSU1QT1JUX1NVQ0NFRURFRFwiXSA9IFwiSU1QT1JUX1NVQ0NFRURFRFwiO1xuICAgIC8qKiBFbWl0dGVkIHdoZW4gdGhlIGltcG9ydCBvcGVyYXRpb24gZmFpbHMuICovXG4gICAgQWN0aW9uVHlwZVtcIklNUE9SVF9GQUlMRURcIl0gPSBcIklNUE9SVF9GQUlMRURcIjtcbiAgICAvKiogRGlzbWlzcyBhIHRvYXN0IGJ5IFVVSUQgKi9cbiAgICBBY3Rpb25UeXBlW1wiVE9BU1RfRElTTUlTU19SRVFVRVNURURcIl0gPSBcIlRPQVNUX0RJU01JU1NfUkVRVUVTVEVEXCI7XG4gICAgLyoqIFJlbW92ZSBzY3JlZW4gc3RhdGUgYnkgcGFnZSBrZXkgKi9cbiAgICBBY3Rpb25UeXBlW1wiUkVNT1ZFX1NDUkVFTl9TVEFURV9CWV9QQUdFXCJdID0gXCJSRU1PVkVfU0NSRUVOX1NUQVRFX0JZX1BBR0VcIjtcbiAgICAvKiogRXhwb3J0IHNjcmVlbiBzdGF0ZSBieSBwYWdlIGtleSAqL1xuICAgIEFjdGlvblR5cGVbXCJFWFBPUlRfU0NSRUVOX1NUQVRFX0JZX1BBR0VcIl0gPSBcIkVYUE9SVF9TQ1JFRU5fU1RBVEVfQllfUEFHRVwiO1xuICAgIC8qKiBFeHBvcnQgZmFpbGVkIHdpdGggYW4gZXJyb3IgKi9cbiAgICBBY3Rpb25UeXBlW1wiRVhQT1JUX0ZBSUxFRFwiXSA9IFwiRVhQT1JUX0ZBSUxFRFwiO1xufSkoQWN0aW9uVHlwZSB8fCAoQWN0aW9uVHlwZSA9IHt9KSk7XG4iLCIvKipcbiAqIEVmZmVjdFR5cGVcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBBIGRlY2xhcmF0aXZlIHNldCBvZiAqc2lkZS1lZmZlY3QgcmVxdWVzdHMqIHByb2R1Y2VkIGJ5IHRoZSByZWR1Y2VyLlxuICogRXhlY3V0b3I6XG4gKiAgIC0gVGhlIENvbnRyb2xsZXIgaW50ZXJwcmV0cyBhbmQgcGVyZm9ybXMgZWFjaCBlZmZlY3QgKEkvTywgUlBDLCBwZXJzaXN0ZW5jZSkuXG4gKiBQdXJwb3NlOlxuICogICAtIEtlZXAgdGhlIHJlZHVjZXIgcHVyZSB3aGlsZSBzdGlsbCBlbmFibGluZyBuZWNlc3NhcnkgZXh0ZXJuYWwgZWZmZWN0cy5cbiAqL1xuZXhwb3J0IHZhciBFZmZlY3RUeXBlO1xuKGZ1bmN0aW9uIChFZmZlY3RUeXBlKSB7XG4gICAgLyoqIFB1c2ggdGhlIGN1cnJlbnQgaXRlbXMgdG8gdGhlIENvbnRlbnQgc2NyaXB0IHRvIHJlbmRlciB0aGUgb3ZlcmxheSAqL1xuICAgIEVmZmVjdFR5cGVbXCJSRU5ERVJfQ09OVEVOVFwiXSA9IFwiUkVOREVSX0NPTlRFTlRcIjtcbiAgICAvKiogRW5hYmxlL2Rpc2FibGUgc2VsZWN0aW9uIG1vZGUgb24gdGhlIENvbnRlbnQgc2lkZSAqL1xuICAgIEVmZmVjdFR5cGVbXCJUT0dHTEVfU0VMRUNUX09OX0NPTlRFTlRcIl0gPSBcIlRPR0dMRV9TRUxFQ1RfT05fQ09OVEVOVFwiO1xuICAgIC8qKiBDbGVhciBvdmVybGF5IG9uIHRoZSBDb250ZW50IHNpZGUgKi9cbiAgICBFZmZlY3RUeXBlW1wiQ0xFQVJfQ09OVEVOVFwiXSA9IFwiQ0xFQVJfQ09OVEVOVFwiO1xuICAgIC8qKiBpdGVtIGhvdmVyICovXG4gICAgRWZmZWN0VHlwZVtcIkhPVkVSXCJdID0gXCJIT1ZFUlwiO1xuICAgIC8qKiByZXF1ZXN0IG1lYXN1cmluZyB0aGUgY29udGVudCBzaXplICovXG4gICAgRWZmZWN0VHlwZVtcIk1FQVNVUkVfQ09OVEVOVF9TSVpFXCJdID0gXCJNRUFTVVJFX0NPTlRFTlRfU0laRVwiO1xuICAgIC8qKiBSdW4gYSBjYXB0dXJlIHdpdGggdGhlIGdpdmVuIHBhcmFtZXRlcnMgKHRhYklkL2Zvcm1hdC9hcmVhL3F1YWxpdHkvc2NhbGUpICovXG4gICAgRWZmZWN0VHlwZVtcIkNBUFRVUkVcIl0gPSBcIkNBUFRVUkVcIjtcbiAgICAvKiogUGVyc2lzdCB0aGUgc3RhdGUgdG8gc3RvcmFnZSB3aXRoIHNlbGVjdGVkIGl0ZW1zIHJlc2V0IChjbGVhcmVkKS4gKi9cbiAgICBFZmZlY3RUeXBlW1wiQ0xFQVJfU1RBVEVcIl0gPSBcIkNMRUFSX1NUQVRFXCI7XG4gICAgLyoqXG4gICAgICogUGVyc2lzdCB0aGUgY3VycmVudCBzdGF0ZSB0byBzdG9yYWdlLlxuICAgICAqIE5PVEU6IE11c3QgcHJlc2VydmUgZXhpc3RpbmcgY291bnRlcnMgKG5leHRJZC9uZXh0TGFiZWwpOyBkbyBub3QgcmVzZXQgdGhlbS5cbiAgICAgKi9cbiAgICBFZmZlY3RUeXBlW1wiUEVSU0lTVF9TVEFURVwiXSA9IFwiUEVSU0lTVF9TVEFURVwiO1xuICAgIC8qKiBTZXRlIFVJIHRoZW1lICovXG4gICAgRWZmZWN0VHlwZVtcIlNFVF9USEVNRVwiXSA9IFwiU0VUX1RIRU1FXCI7XG4gICAgLyoqIFVwZGF0ZSB0aGUgVUkgdGhlbWUgKi9cbiAgICBFZmZlY3RUeXBlW1wiVVBEQVRFX1RIRU1FXCJdID0gXCJVUERBVEVfVEhFTUVcIjtcbiAgICAvKiogUmVhZCB0aGUgc2NyZWVuLXN0YXRlIG1hcCBmcm9tIGBjaHJvbWUuc3RvcmFnZS5sb2NhbGAgKi9cbiAgICBFZmZlY3RUeXBlW1wiUkVBRF9TQ1JFRU5fU1RBVEVfU1RPUkVcIl0gPSBcIlJFQURfU0NSRUVOX1NUQVRFX1NUT1JFXCI7XG4gICAgLyoqIEltcG9ydCBhIFNjcmVlblN0YXRlIGZyb20gYSBzZWxlY3RlZCBKU09OIGZpbGUuICovXG4gICAgRWZmZWN0VHlwZVtcIklNUE9SVF9TQ1JFQU5fU1RBVEVfRklMRVwiXSA9IFwiSU1QT1JUX1NDUkVBTl9TVEFURV9GSUxFXCI7XG4gICAgLyoqIFJlbW92ZSBzY3JlZW4gc3RhdGUgYnkgcGFnZSBrZXkgKi9cbiAgICBFZmZlY3RUeXBlW1wiUkVNT1ZFX1NDUkVFTl9TVEFURV9TVE9SRV9CWV9QQUdFX0tFWVwiXSA9IFwiUkVNT1ZFX1NDUkVFTl9TVEFURV9TVE9SRV9CWV9QQUdFX0tFWVwiO1xuICAgIC8qKiBFeHBvcnQgc2NyZWVuIHN0YXRlIGJ5IHBhZ2Uga2V5ICovXG4gICAgRWZmZWN0VHlwZVtcIkVYUE9SVF9TQ1JFRU5fU1RBVEVfQllfUEFHRV9LRVlcIl0gPSBcIkVYUE9SVF9TQ1JFRU5fU1RBVEVfQllfUEFHRV9LRVlcIjtcbiAgICAvKiogUmVwb3J0L2xvZyBhbiBlcnJvciAoYW5kIG9wdGlvbmFsbHkgc3VyZmFjZSBpdCB0byB0aGUgVUkpICovXG4gICAgRWZmZWN0VHlwZVtcIk5PVElGWV9FUlJPUlwiXSA9IFwiTk9USUZZX0VSUk9SXCI7XG59KShFZmZlY3RUeXBlIHx8IChFZmZlY3RUeXBlID0ge30pKTtcbiIsImV4cG9ydCBjb25zdCBQUk9UT0NPTF9WRVJTSU9OID0gMTtcbmV4cG9ydCBjb25zdCBDSEFOTkVMID0ge1xuICAgIFBBTkVMX0NPTlRFTlQ6IGBzcHNrOnBhbmVsLWNvbnRlbnQ6diR7UFJPVE9DT0xfVkVSU0lPTn1gLFxufTtcbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIFBvcnQubmFtZSBtYXRjaGVzIHRoZSBzcGVjaWZpZWQgY2hhbm5lbC5cbiAqIFVzZSB0aGlzIHRvIHNhZmVseSBkaXN0aW5ndWlzaCBjb25uZWN0aW9uIHR5cGVzIGJldHdlZW4gUGFuZWwgYW5kIENvbnRlbnQuXG4gKlxuICogQHBhcmFtIHBvcnQgLSBBIGNvbm5lY3RlZCBydW50aW1lLlBvcnRcbiAqIEBwYXJhbSBuYW1lIC0gVGFyZ2V0IGNoYW5uZWwgbmFtZSB0byBjb21wYXJlXG4gKiBAcmV0dXJucyBUcnVlIGlmIHRoZSBwb3J0IGJlbG9uZ3MgdG8gdGhlIGNoYW5uZWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQ2hhbm5lbChwb3J0LCBuYW1lKSB7XG4gICAgcmV0dXJuIHBvcnQubmFtZSA9PT0gbmFtZTtcbn1cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBwb3J0IGlzIHVzZWQgZm9yIFBhbmVsIOKGlCBDb250ZW50IGNvbW11bmljYXRpb24uXG4gKiBBIGNvbnZlbmllbmNlIHdyYXBwZXIgZm9yIENIQU5ORUwuUEFORUxfQ09OVEVOVC5cbiAqXG4gKiBAcGFyYW0gcG9ydCAtIEEgY29ubmVjdGVkIHJ1bnRpbWUuUG9ydFxuICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgcG9ydCBpcyB0aGUgUGFuZWzigJNDb250ZW50IGNoYW5uZWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUGFuZWxDb250ZW50UG9ydChwb3J0KSB7XG4gICAgcmV0dXJuIGlzQ2hhbm5lbChwb3J0LCBDSEFOTkVMLlBBTkVMX0NPTlRFTlQpO1xufVxuIiwiaW1wb3J0IHsgTVNHX1RZUEUgfSBmcm9tICdAY29tbW9uL21lc3NhZ2VzJztcbi8qKlxuICogVGhpbiBSUEMgd3JhcHBlciBmb3Igc2VuZGluZyBtZXNzYWdlcyBmcm9tIFBhbmVsIHRvIENvbnRlbnQuXG4gKiBFeHBvc2VzIGhpZ2gtbGV2ZWwgbWV0aG9kcyBmb3IgZWFjaCBtZXNzYWdlIHR5cGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBQYW5lbEFwaSB7XG4gICAgcnBjO1xuICAgIGNvbnN0cnVjdG9yKHJwYykge1xuICAgICAgICB0aGlzLnJwYyA9IHJwYztcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgc2VuZCBoZWxwZXIgdGhhdCBhdHRhY2hlcyBhbiBSUEMgcmVxdWVzdCBpZCBhcyBuZWVkZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYm9keSAtIE1lc3NhZ2UgcGF5bG9hZCB0byBzZW5kXG4gICAgICogQHJldHVybnMgVm9pZC1saWtlIHdoZW4gbm8gcmVwbHkgaXMgZXhwZWN0ZWQ7IG90aGVyd2lzZSByZXNvbHZlcyB3aXRoIGEgcmVzcG9uc2VcbiAgICAgKi9cbiAgICBzZW5kKGJvZHkpIHtcbiAgICAgICAgY29uc3QgcmVxID0ge1xuICAgICAgICAgICAgaWQ6IGNyeXB0by5yYW5kb21VVUlEKCksXG4gICAgICAgICAgICBleHBlY3RSZXBseTogZmFsc2UsXG4gICAgICAgICAgICAuLi5ib2R5LFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5ycGMuc2VuZChyZXEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXF1ZXN0cyBDb250ZW50IHRvIHJlbmRlciB0aGUgZ2l2ZW4gaXRlbXMuXG4gICAgICogQHBhcmFtIGl0ZW1zIC0gSXRlbXMgdG8gZHJhd1xuICAgICAqL1xuICAgIHJlbmRlcihpdGVtcykge1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKHsgdHlwZTogTVNHX1RZUEUuUkVOREVSLCBwYXlsb2FkOiB7IGl0ZW1zIH0gfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRvZ2dsZXMgc2VsZWN0aW9uIG1vZGUgaW4gQ29udGVudC5cbiAgICAgKiBAcGFyYW0gZW5hYmxlZCAtIFRydWUgdG8gZW5hYmxlXG4gICAgICovXG4gICAgdG9nZ2xlU2VsZWN0KGVuYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCh7IHR5cGU6IE1TR19UWVBFLlRPR0dMRV9TRUxFQ1QsIHBheWxvYWQ6IHsgZW5hYmxlZCB9IH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgdGhlIENvbnRlbnQgb3ZlcmxheS5cbiAgICAgKi9cbiAgICBjbGVhcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCh7IHR5cGU6IE1TR19UWVBFLkNMRUFSIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGhvdmVyZWQgaXRlbSBhbmQgcmVxdWVzdCBhIHRyYW5zaWVudCBoaWdobGlnaHQgb24gQ29udGVudC5cbiAgICAgKiBQYXNzIGBudWxsYCB0byBjbGVhciB0aGUgY3VycmVudCBob3ZlciBoaWdobGlnaHQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaWQgLSBUYXJnZXQgaXRlbSBJRCwgb3IgYG51bGxgIHRvIGNsZWFyLlxuICAgICAqL1xuICAgIGhvdmVyKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoeyB0eXBlOiBNU0dfVFlQRS5IT1ZFUiwgcGF5bG9hZDogeyBpZCB9IH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kcyBhIHJlcXVlc3QgdG8gbWVhc3VyZSB0aGUgY3VycmVudCBjb250ZW50IHNpemUuXG4gICAgICovXG4gICAgbWVhc3VyZVNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoeyB0eXBlOiBNU0dfVFlQRS5NRUFTVVJFX1NJWkUgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgY29ubmVjdGl2aXR5IGhlYWx0aCBjaGVjayAocm91bmQtdHJpcCkuXG4gICAgICogU2VudCBhcyBhIHJlcXVlc3QgZXhwZWN0aW5nIGEgcmVwbHkuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgcmVzcG9uc2UsIG9yIHVuZGVmaW5lZCBvbiB0aW1lb3V0XG4gICAgICovXG4gICAgcGluZygpIHtcbiAgICAgICAgY29uc3QgcmVxID0ge1xuICAgICAgICAgICAgaWQ6IGNyeXB0by5yYW5kb21VVUlEKCksXG4gICAgICAgICAgICBleHBlY3RSZXBseTogdHJ1ZSxcbiAgICAgICAgICAgIHR5cGU6IE1TR19UWVBFLlBJTkcsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzLnJwYy5zZW5kKHJlcSwgNTAwMCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgaXNSZXNwb25zZSB9IGZyb20gJ0Bjb21tb24vbWVzc2FnZXMnO1xuLyoqXG4gKiBJbXBsZW1lbnRzIGEgbWluaW1hbCByZXF1ZXN0L3Jlc3BvbnNlIFJQQyBvdmVyIGNocm9tZS5ydW50aW1lLlBvcnQuXG4gKiBUcmFja3MgcGVuZGluZyByZXF1ZXN0cyBieSBpZCBhbmQgaGFuZGxlcyB0aW1lb3V0cyBhbmQgZGlzY29ubmVjdHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBQb3J0UnBjIHtcbiAgICBwb3J0O1xuICAgIHBlbmRpbmcgPSBuZXcgTWFwKCk7XG4gICAgYWxpdmUgPSB0cnVlO1xuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZXMgdG8gcG9ydCBtZXNzYWdlIGFuZCBkaXNjb25uZWN0IGV2ZW50cy5cbiAgICAgKiBAcGFyYW0gcG9ydCAtIFRoZSBydW50aW1lLlBvcnQgdXNlZCBmb3IgbWVzc2FnaW5nXG4gICAgICovXG4gICAgY29uc3RydWN0b3IocG9ydCkge1xuICAgICAgICB0aGlzLnBvcnQgPSBwb3J0O1xuICAgICAgICB0aGlzLnBvcnQub25NZXNzYWdlLmFkZExpc3RlbmVyKChtc2cpID0+IHtcbiAgICAgICAgICAgIGlmIChpc1Jlc3BvbnNlKG1zZykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmcuZ2V0KG1zZy5pZCk/Lihtc2cpO1xuICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZy5kZWxldGUobXNnLmlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucG9ydC5vbkRpc2Nvbm5lY3QuYWRkTGlzdGVuZXIoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hbGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgLy8gUmVhc29ucyBzdWNoIGFzIEJGQ2FjaGUgbWF5IGJlIGluY2x1ZGVkXG4gICAgICAgICAgICBjb25zdCByZWFzb24gPSBjaHJvbWUucnVudGltZS5sYXN0RXJyb3I/Lm1lc3NhZ2UgPz8gJ2Rpc2Nvbm5lY3RlZCc7XG4gICAgICAgICAgICAvLyBUcmVhdCBwZW5kaW5nIHN0YXR1cyBhcyBmYWlsdXJlIHdoZW4gYSBkaXNjb25uZWN0aW9uIG9jY3Vycy5cbiAgICAgICAgICAgIGZvciAoY29uc3QgW2lkLCByZXNvbHZlXSBvZiB0aGlzLnBlbmRpbmcpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHsgaWQsIG9rOiBmYWxzZSwgZXJyb3I6IHJlYXNvbiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucGVuZGluZy5jbGVhcigpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gR2V0IHRoZSBjdXJyZW50IGNvbm5lY3Rpb24gc3RhdHVzXG4gICAgZ2V0IGlzQWxpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFsaXZlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kcyBhbiBSUEMgcmVxdWVzdCBhbmQgb3B0aW9uYWxseSBhd2FpdHMgYSByZXNwb25zZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSByZXEgLSBUaGUgUlBDIHJlcXVlc3QgdG8gc2VuZFxuICAgICAqIEBwYXJhbSB0aW1lb3V0TXMgLSBUaW1lb3V0IChtcykgd2hlbiB3YWl0aW5nIGZvciBhIHJlcGx5IChkZWZhdWx0IDUwMDApXG4gICAgICogQHJldHVybnMgVGhlIHJlc3BvbnNlIHdoZW4gYGV4cGVjdFJlcGx5YCBpcyB0cnVlOyBvdGhlcndpc2UgdW5kZWZpbmVkXG4gICAgICovXG4gICAgc2VuZChyZXEsIHRpbWVvdXRNcyA9IDUwMDApIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICAvLyBJZiBhbHJlYWR5IGRpc2Nvbm5lY3RlZCwgaW1tZWRpYXRlbHkgdGVybWluYXRlIChhdm9pZCBVbmNoZWNrZWQgcnVudGltZS5sYXN0RXJyb3IpXG4gICAgICAgICAgICBpZiAoIXRoaXMuYWxpdmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShyZXEuZXhwZWN0UmVwbHkgPyB1bmRlZmluZWQgOiB1bmRlZmluZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlcS5leHBlY3RSZXBseSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZy5kZWxldGUocmVxLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgIH0sIHRpbWVvdXRNcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5nLnNldChyZXEuaWQsIChyZXMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLnBvcnQucG9zdE1lc3NhZ2UocmVxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgICAgICBpZiAocmVxLmV4cGVjdFJlcGx5KVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmcuZGVsZXRlKHJlcS5pZCk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghcmVxLmV4cGVjdFJlcGx5KVxuICAgICAgICAgICAgICAgIHJlc29sdmUodW5kZWZpbmVkKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IENEUF9WRVJTSU9OID0gJzEuMyc7XG4vKipcbiAqIFdyYXBzIGBjaHJvbWUucnVudGltZS5sYXN0RXJyb3JgIGludG8gYSBzdGFuZGFyZCBgRXJyb3JgIGluc3RhbmNlLlxuICpcbiAqIEByZXR1cm5zIEFuIGBFcnJvcmAgaWYgYSBsYXN0IGVycm9yIGV4aXN0czsgb3RoZXJ3aXNlIGBudWxsYC5cbiAqL1xuZnVuY3Rpb24gbGFzdEVycm9yKCkge1xuICAgIGNvbnN0IGVyciA9IGNocm9tZS5ydW50aW1lLmxhc3RFcnJvcjtcbiAgICByZXR1cm4gZXJyID8gbmV3IEVycm9yKGVyci5tZXNzYWdlIHx8IFN0cmluZyhlcnIpKSA6IG51bGw7XG59XG4vKiogVHJhY2tzIHRhYklkcyB0aGF0IHRoaXMgZXh0ZW5zaW9uIGN1cnJlbnRseSBvd25zIChhdHRhY2hlZCBieSBpdHNlbGYpLiAqL1xuY29uc3QgT1dORUQgPSBuZXcgU2V0KCk7XG4vKiogQ2xlYXJzIG93bmVyc2hpcCBvbiBkZXRhY2ggKGNvdmVycyBleHRlcm5hbCBjYXVzZXMgbGlrZSBvcGVuaW5nL2Nsb3NpbmcgRGV2VG9vbHMpLiAqL1xuY2hyb21lLmRlYnVnZ2VyLm9uRGV0YWNoLmFkZExpc3RlbmVyKChkZWJ1Z2dlZSkgPT4ge1xuICAgIGNvbnN0IGlkID0gZGVidWdnZWUudGFiSWQ7XG4gICAgaWYgKHR5cGVvZiBpZCA9PT0gJ251bWJlcicpXG4gICAgICAgIE9XTkVELmRlbGV0ZShpZCk7XG59KTtcbi8qKlxuICogRGV0YWNoZXMgdGhlIENocm9tZSBEZWJ1Z2dlciAoQ0RQKSBmcm9tIHRoZSBnaXZlbiB0YXJnZXQuXG4gKlxuICogQHBhcmFtIHRhcmdldCAtIFRoZSBkZWJ1Z2dlZSB0byBkZXRhY2ggZnJvbS5cbiAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIG9uY2UgZGV0YWNobWVudCBjb21wbGV0ZXMuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGRldGFjaCh0YXJnZXQpIHtcbiAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICBjaHJvbWUuZGVidWdnZXIuZGV0YWNoKHRhcmdldCwgKCkgPT4gcmVzb2x2ZSgpKTtcbiAgICB9KTtcbn1cbi8qKlxuICogU2FmZWx5IGF0dGFjaGVzIHRvIHRoZSB0YXJnZXQuIElmIGEgcHJldmlvdXMgc2Vzc2lvbiBvd25lZCBieSB0aGlzIGV4dGVuc2lvblxuICogaXMgYWxyZWFkeSBhdHRhY2hlZCwgaXQgcmV1c2VzIGl0IGluc3RlYWQgb2YgZmFpbGluZy5cbiAqXG4gKiBAcGFyYW0gdGFyZ2V0IC0gVGhlIGRlYnVnZ2VlIHRvIGF0dGFjaCB0byAoZS5nLiwgYHsgdGFiSWQgfWApLlxuICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYHRydWVgIHdoZW4gdGhpcyBjYWxsIHBlcmZvcm1lZCBhIG5ldyBhdHRhY2gsXG4gKiAgICAgICAgICBvciBgZmFsc2VgIHdoZW4gYW4gZXhpc3Rpbmcgb3duZWQgc2Vzc2lvbiBpcyByZXVzZWQuXG4gKiBAdGhyb3dzIElmIGFub3RoZXIgY2xpZW50IChEZXZUb29scy9hbm90aGVyIGV4dGVuc2lvbikgaXMgYXR0YWNoZWQsIG9yIG9uIG90aGVyIGF0dGFjaCBlcnJvcnMuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhdHRhY2hPd25lZCh0YXJnZXQpIHtcbiAgICBjb25zdCB0YWJJZCA9IHRhcmdldC50YWJJZCA/PyBudWxsO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNocm9tZS5kZWJ1Z2dlci5hdHRhY2godGFyZ2V0LCBDRFBfVkVSU0lPTiwgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZXJyID0gY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yO1xuICAgICAgICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAodGFiSWQgIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgT1dORUQuYWRkKHRhYklkKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpOyAvLyBuZXdseSBhdHRhY2hlZCBieSB0aGlzIGNhbGxcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBtc2cgPSBlcnIubWVzc2FnZSB8fCAnJztcbiAgICAgICAgICAgIGlmIChtc2cuaW5jbHVkZXMoJ0Fub3RoZXIgZGVidWdnZXIgaXMgYWxyZWFkeSBhdHRhY2hlZCcpKSB7XG4gICAgICAgICAgICAgICAgLy8gQWxyZWFkeSBhdHRhY2hlZDogcmV1c2Ugb25seSBpZiBvd25lZCBieSB0aGlzIGV4dGVuc2lvbi5cbiAgICAgICAgICAgICAgICBpZiAodGFiSWQgIT0gbnVsbCAmJiBPV05FRC5oYXModGFiSWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZmFsc2UpOyAvLyByZXVzZSBleGlzdGluZyBvd25lZCBzZXNzaW9uXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdEZWJ1Z2dlciBpcyBhbHJlYWR5IGF0dGFjaGVkIGJ5IGFub3RoZXIgY2xpZW50IChEZXZUb29scy9leHRlbnNpb24pLicpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKG1zZykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8qKlxuICogU2FmZWx5IGRldGFjaGVzIG9ubHkgd2hlbiB0aGUgY3VycmVudCBleHRlbnNpb24gb3ducyB0aGUgc2Vzc2lvbi5cbiAqIE5vLW9wcyBpZiB0aGUgdGFyZ2V0IGlzIG5vdCBvd25lZC5cbiAqXG4gKiBAcGFyYW0gdGFyZ2V0IC0gVGhlIGRlYnVnZ2VlIHRvIGRldGFjaCBmcm9tLlxuICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgYWZ0ZXIgZGV0YWNoaW5nIChvciBpbW1lZGlhdGVseSBpZiBub3Qgb3duZWQpLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGV0YWNoT3duZWQodGFyZ2V0KSB7XG4gICAgY29uc3QgdGFiSWQgPSB0YXJnZXQudGFiSWQgPz8gbnVsbDtcbiAgICBpZiAodGFiSWQgPT0gbnVsbClcbiAgICAgICAgcmV0dXJuO1xuICAgIGlmICghT1dORUQuaGFzKHRhYklkKSlcbiAgICAgICAgcmV0dXJuOyAvLyBub3Qgb3duZWQgYnkgdGhpcyBleHRlbnNpb25cbiAgICBhd2FpdCBkZXRhY2godGFyZ2V0KTtcbiAgICBPV05FRC5kZWxldGUodGFiSWQpO1xufVxuLyoqXG4gKiBTZW5kcyBhIENEUCBjb21tYW5kIHRvIHRoZSBhdHRhY2hlZCB0YXJnZXQuXG4gKlxuICogQHR5cGVQYXJhbSBUIC0gRXhwZWN0ZWQgcmVzdWx0IHR5cGUgb2YgdGhlIGNvbW1hbmQuXG4gKiBAcGFyYW0gdGFyZ2V0IC0gVGhlIGRlYnVnZ2VlIHRvIHdoaWNoIHRoZSBjb21tYW5kIGlzIHNlbnQuXG4gKiBAcGFyYW0gbWV0aG9kIC0gQ0RQIG1ldGhvZCBuYW1lIChlLmcuLCBgJ1BhZ2UuY2FwdHVyZVNjcmVlbnNob3QnYCkuXG4gKiBAcGFyYW0gcGFyYW1zIC0gT3B0aW9uYWwgcGFyYW1ldGVycyBvYmplY3QgZm9yIHRoZSBjb21tYW5kLlxuICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgY29tbWFuZCByZXN1bHQgb3IgcmVqZWN0cyBpZiBhbiBlcnJvciBvY2N1cnMuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZW5kKHRhcmdldCwgbWV0aG9kLCBwYXJhbXMpIHtcbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjaHJvbWUuZGVidWdnZXIuc2VuZENvbW1hbmQodGFyZ2V0LCBtZXRob2QsIHBhcmFtcyA/PyB7fSwgKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZXJyID0gbGFzdEVycm9yKCk7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKChyZXN1bHQgPz8ge30pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4iLCJpbXBvcnQgeyBpc1Jlc3RyaWN0ZWQgfSBmcm9tICdAY29tbW9uL3VybCc7XG5pbXBvcnQgeyBhdHRhY2hPd25lZCwgZGV0YWNoT3duZWQsIHNlbmQgfSBmcm9tICdAaW5mcmEvY2RwL2NkcF9jbGllbnQnO1xuLyoqXG4gKiBOb3JtYWxpemVzIGEgc3RyaW5nIGZvciBzYWZlIHVzZSBhcyBhIGZpbGVuYW1lOlxuICogcmVwbGFjZXMgcmVzZXJ2ZWQgY2hhcmFjdGVycywgY29sbGFwc2VzIHdoaXRlc3BhY2UsIGFuZCB0cmltcyBlbmRzLlxuICpcbiAqIEBwYXJhbSBzIC0gUmF3IHN0cmluZyB0byBzYW5pdGl6ZS5cbiAqIEByZXR1cm5zIFNhbml0aXplZCBmaWxlbmFtZS1zYWZlIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gc2FuaXRpemVGb3JGaWxlbmFtZShzKSB7XG4gICAgcmV0dXJuIHNcbiAgICAgICAgLnJlcGxhY2UoL1tcXFxcLzoqP1wiPD58XS9nLCAnXycpXG4gICAgICAgIC5yZXBsYWNlKC9cXHMrL2csICcgJylcbiAgICAgICAgLnRyaW0oKTtcbn1cbi8qKlxuICogQnVpbGRzIGEgdGltZXN0YW1wZWQgZmlsZW5hbWUgZm9yIHRoZSBjYXB0dXJlIGJhc2VkIG9uIHRoZSB0YWIncyB0aXRsZSBvciBob3N0LlxuICogVHJ1bmNhdGVzIHRoZSBiYXNlIG5hbWUgdG8gODAgY2hhcmFjdGVycyBhbmQgYXBwZW5kcyB0aGUgcHJvcGVyIGV4dGVuc2lvbi5cbiAqXG4gKiBAcGFyYW0gdGFiIC0gU291cmNlIHRhYiAodGl0bGUvdXJsIHVzZWQgZm9yIG5hbWluZykuXG4gKiBAcGFyYW0gZm10IC0gVGFyZ2V0IGltYWdlIGZvcm1hdCAoJ3BuZycgfCAnanBlZycpLlxuICogQHJldHVybnMgQSBmaWxlbmFtZSBsaWtlIGBwYWdlLTIwMjUtMDgtMTNUMTAtMjAtMzAtMDAwWi5wbmdgLlxuICovXG5mdW5jdGlvbiBtYWtlRmlsZW5hbWUodGFiLCBmbXQpIHtcbiAgICBjb25zdCB0aXRsZSA9IHRhYi50aXRsZSAmJiB0YWIudGl0bGUudHJpbSgpID8gdGFiLnRpdGxlIDogJyc7XG4gICAgbGV0IGJhc2UgPSB0aXRsZSB8fFxuICAgICAgICAoKCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFVSTCh0YWIudXJsID8/ICcnKS5ob3N0IHx8ICdwYWdlJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3BhZ2UnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSgpO1xuICAgIGJhc2UgPSBzYW5pdGl6ZUZvckZpbGVuYW1lKGJhc2UpO1xuICAgIGlmIChiYXNlLmxlbmd0aCA+IDgwKVxuICAgICAgICBiYXNlID0gYmFzZS5zbGljZSgwLCA4MCk7XG4gICAgY29uc3QgdHMgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkucmVwbGFjZSgvWzouXS9nLCAnLScpO1xuICAgIHJldHVybiBgJHtiYXNlfS0ke3RzfS4ke2ZtdH1gO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IHZpc3VhbCB2aWV3cG9ydCByZWN0YW5nbGUgaW4gQ1NTIHBpeGVscyAoZm9yIHZpZXdwb3J0IGNhcHR1cmUpLlxuICogQHBhcmFtIHRhcmdldCAtIERldlRvb2xzIFByb3RvY29sIHRhcmdldCB0YWIgKGBjaHJvbWUuZGVidWdnZXIuRGVidWdnZWVgKS5cbiAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIGB7IHgsIHksIHdpZHRoLCBoZWlnaHQgfWAgaW4gQ1NTIHBpeGVscy5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0Vmlld3BvcnRDc3NSZWN0KHRhcmdldCkge1xuICAgIGNvbnN0IGxtID0gYXdhaXQgc2VuZCh0YXJnZXQsICdQYWdlLmdldExheW91dE1ldHJpY3MnKTtcbiAgICBjb25zdCB2ID0gbG0uY3NzVmlzdWFsVmlld3BvcnQ7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogTWF0aC5tYXgoMCwgTWF0aC5mbG9vcih2LnBhZ2VYKSB8IDApLFxuICAgICAgICB5OiBNYXRoLm1heCgwLCBNYXRoLmZsb29yKHYucGFnZVkpIHwgMCksXG4gICAgICAgIHdpZHRoOiBNYXRoLm1heCgxLCBNYXRoLmNlaWwodi5jbGllbnRXaWR0aCkgfCAwKSxcbiAgICAgICAgaGVpZ2h0OiBNYXRoLm1heCgxLCBNYXRoLmNlaWwodi5jbGllbnRIZWlnaHQpIHwgMCksXG4gICAgfTtcbn1cbi8qKlxuICogUmVzb2x2ZXMgc2NyZWVuc2hvdCBnZW9tZXRyeSBmb3IgdGhlIHNlbGVjdGVkIGNhcHR1cmUgYXJlYS5cbiAqIEBwYXJhbSB0YXJnZXQgLSBEZXZUb29scyBQcm90b2NvbCB0YXJnZXQgdGFiIChgY2hyb21lLmRlYnVnZ2VyLkRlYnVnZ2VlYCkuXG4gKiBAcGFyYW0gYXJlYSAtIENhcHR1cmUgYXJlYTogYCdmdWxsJ2AgKGVudGlyZSBwYWdlKSBvciBgJ3ZpZXdwb3J0J2AgKHZpc2libGUgYXJlYSkuXG4gKiBAcGFyYW0gc2NhbGUgLSBJbWFnZSBzY2FsZSBmYWN0b3IgYXBwbGllZCB0byBgY2xpcC5zY2FsZWAuXG4gKiBAcGFyYW0gY29udGVudFNpemUgLSBNZWFzdXJlZCBwYWdlIGNvbnRlbnQgc2l6ZSBpbiBDU1MgcGl4ZWxzIHVzZWQgd2hlbiBgYXJlYWAgaXMgYCdmdWxsJ2AuXG4gKiBAcmV0dXJucyBgQ2FwdHVyZUdlb21ldHJ5YCBkZXNjcmliaW5nIHdoZXRoZXIgZGV2aWNlIG1ldHJpY3Mgb3ZlcnJpZGUgaXMgcmVxdWlyZWQgYW5kIHRoZSBjbGlwIHJlY3RhbmdsZSBmb3IgYFBhZ2UuY2FwdHVyZVNjcmVlbnNob3RgLlxuICovXG5hc3luYyBmdW5jdGlvbiByZXNvbHZlR2VvbWV0cnkodGFyZ2V0LCBhcmVhLCBzY2FsZSwgY29udGVudFNpemUpIHtcbiAgICBpZiAoYXJlYSA9PT0gJ3ZpZXdwb3J0Jykge1xuICAgICAgICAvLyBObyBvdmVycmlkZSByZXF1aXJlZDogQ2xpcCB0aGUgY3VycmVudCBkaXNwbGF5IGFyZWEgd2l0aCBjbGlwXG4gICAgICAgIGNvbnN0IHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9ID0gYXdhaXQgZ2V0Vmlld3BvcnRDc3NSZWN0KHRhcmdldCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB1c2VPdmVycmlkZTogZmFsc2UsXG4gICAgICAgICAgICBjbGlwOiB7IHgsIHksIHdpZHRoLCBoZWlnaHQsIHNjYWxlIH0sXG4gICAgICAgICAgICBjYXB0dXJlQmV5b25kVmlld3BvcnQ6IHRydWUsXG4gICAgICAgICAgICBzaG91bGRTY3JvbGxUb3A6IGZhbHNlLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCB3aWR0aCA9IE1hdGgubWF4KDEsIE1hdGguY2VpbChjb250ZW50U2l6ZS53aWR0aCkgfCAwKTtcbiAgICBjb25zdCBoZWlnaHQgPSBNYXRoLm1heCgxLCBNYXRoLmNlaWwoY29udGVudFNpemUuaGVpZ2h0KSB8IDApO1xuICAgIHJldHVybiB7XG4gICAgICAgIHVzZU92ZXJyaWRlOiB0cnVlLFxuICAgICAgICBtZXRyaWNzOiB7XG4gICAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICAgIGhlaWdodCxcbiAgICAgICAgICAgIGRldmljZVNjYWxlRmFjdG9yOiAxLFxuICAgICAgICAgICAgbW9iaWxlOiBmYWxzZSxcbiAgICAgICAgICAgIHNjcmVlbldpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgIHNjcmVlbkhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgICAgcG9zaXRpb25YOiAwLFxuICAgICAgICAgICAgcG9zaXRpb25ZOiAwLFxuICAgICAgICB9LFxuICAgICAgICBjbGlwOiB7IHg6IDAsIHk6IDAsIHdpZHRoLCBoZWlnaHQsIHNjYWxlIH0sXG4gICAgICAgIGNhcHR1cmVCZXlvbmRWaWV3cG9ydDogdHJ1ZSxcbiAgICAgICAgc2hvdWxkU2Nyb2xsVG9wOiB0cnVlLFxuICAgIH07XG59XG4vKipcbiAqIENhcHR1cmUgc2NyZWVuc2hvdHMgYW5kIHNhdmUgdGhlbSB2aWEgdGhlIGRvd25sb2FkIEFQSS5cbiAqXG4gKiBAcGFyYW0gb3B0cyAtIENhcHR1cmUgb3B0aW9ucyAodGFiIGlkLCBmb3JtYXQsIHF1YWxpdHksIHNjYWxlLCBldGMuKS5cbiAqIEByZXR1cm5zIFRoZSBgZG93bmxvYWRJZGAgd2hlbiBzYXZlZCBzdWNjZXNzZnVsbHk7IGB1bmRlZmluZWRgIHdoZW4gY2FwdHVyZSBpcyBza2lwcGVkLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2FwdHVyZShvcHRzKSB7XG4gICAgY29uc3QgdGFiID0gYXdhaXQgY2hyb21lLnRhYnMuZ2V0KG9wdHMudGFiSWQpO1xuICAgIGlmICghdGFiLmlkIHx8IGlzUmVzdHJpY3RlZCh0YWIudXJsKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0NhcHR1cmluZyBpcyBub3QgcG9zc2libGUgZHVlIHRvIHJlc3RyaWN0ZWQgVVJMOicsIHRhYi51cmwpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHRhcmdldCA9IHsgdGFiSWQ6IHRhYi5pZCB9O1xuICAgIGNvbnN0IGZtdCA9IG9wdHMuZm9ybWF0ID8/ICdwbmcnO1xuICAgIGNvbnN0IHNldHRsZU1zID0gb3B0cy5zZXR0bGVNcyA/PyA1MDA7XG4gICAgY29uc3Qgc2NhbGUgPSBvcHRzLnNjYWxlID8/IDE7XG4gICAgY29uc3QgYXJlYSA9IG9wdHMuYXJlYSA/PyAnZnVsbCc7XG4gICAgbGV0IGRpZEF0dGFjaCA9IGZhbHNlO1xuICAgIGxldCB1c2VkT3ZlcnJpZGUgPSBmYWxzZTtcbiAgICB0cnkge1xuICAgICAgICBkaWRBdHRhY2ggPSBhd2FpdCBhdHRhY2hPd25lZCh0YXJnZXQpO1xuICAgICAgICBhd2FpdCBzZW5kKHRhcmdldCwgJ1BhZ2UuZW5hYmxlJyk7XG4gICAgICAgIGlmIChvcHRzLmJyaW5nVG9Gcm9udCA/PyB0cnVlKSB7XG4gICAgICAgICAgICBhd2FpdCBzZW5kKHRhcmdldCwgJ1BhZ2UuYnJpbmdUb0Zyb250Jyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZ2VvbSA9IGF3YWl0IHJlc29sdmVHZW9tZXRyeSh0YXJnZXQsIGFyZWEsIHNjYWxlLCBvcHRzLmNvbnRlbnRTaXplKTtcbiAgICAgICAgaWYgKGdlb20uc2hvdWxkU2Nyb2xsVG9wKSB7XG4gICAgICAgICAgICBhd2FpdCBzZW5kKHRhcmdldCwgJ1J1bnRpbWUuZXZhbHVhdGUnLCB7IGV4cHJlc3Npb246ICd3aW5kb3cuc2Nyb2xsVG8oMCwwKScgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdlb20udXNlT3ZlcnJpZGUgJiYgZ2VvbS5tZXRyaWNzKSB7XG4gICAgICAgICAgICB1c2VkT3ZlcnJpZGUgPSB0cnVlO1xuICAgICAgICAgICAgLy8gU2Nyb2xsIHRvIHRvcCAmIHdhaXQgYnJpZWZseSBmb3IgbGF5b3V0L2ltYWdlIHN0YWJpbGl6YXRpb25cbiAgICAgICAgICAgIGF3YWl0IHNlbmQodGFyZ2V0LCAnRW11bGF0aW9uLnNldERldmljZU1ldHJpY3NPdmVycmlkZScsIGdlb20ubWV0cmljcyk7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHIpID0+IHNldFRpbWVvdXQociwgc2V0dGxlTXMpKTtcbiAgICAgICAgY29uc3QgY2FwUGFyYW1zID0ge1xuICAgICAgICAgICAgZm9ybWF0OiBmbXQsXG4gICAgICAgICAgICBmcm9tU3VyZmFjZTogdHJ1ZSxcbiAgICAgICAgICAgIGNhcHR1cmVCZXlvbmRWaWV3cG9ydDogZ2VvbS5jYXB0dXJlQmV5b25kVmlld3BvcnQsXG4gICAgICAgICAgICBjbGlwOiBnZW9tLmNsaXAsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChmbXQgPT09ICdqcGVnJyAmJiB0eXBlb2Ygb3B0cy5xdWFsaXR5ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgY2FwUGFyYW1zLnF1YWxpdHkgPSBNYXRoLm1pbigxMDAsIE1hdGgubWF4KDAsIE1hdGgucm91bmQob3B0cy5xdWFsaXR5KSkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgc2VuZCh0YXJnZXQsICdQYWdlLmNhcHR1cmVTY3JlZW5zaG90JywgY2FwUGFyYW1zKTtcbiAgICAgICAgY29uc3QgbWltZSA9IGZtdCA9PT0gJ3BuZycgPyAnaW1hZ2UvcG5nJyA6ICdpbWFnZS9qcGVnJztcbiAgICAgICAgY29uc3QgdXJsID0gYGRhdGE6JHttaW1lfTtiYXNlNjQsJHtkYXRhfWA7XG4gICAgICAgIGNvbnN0IGZpbGVuYW1lID0gb3B0cy5maWxlbmFtZSA/PyBtYWtlRmlsZW5hbWUodGFiLCBmbXQpO1xuICAgICAgICByZXR1cm4gYXdhaXQgY2hyb21lLmRvd25sb2Fkcy5kb3dubG9hZCh7IHVybCwgZmlsZW5hbWUsIHNhdmVBczogZmFsc2UgfSk7XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBpZiAodXNlZE92ZXJyaWRlKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHNlbmQodGFyZ2V0LCAnRW11bGF0aW9uLmNsZWFyRGV2aWNlTWV0cmljc092ZXJyaWRlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICAgICAgLyogbm8tb3AgKi9cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZGlkQXR0YWNoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGF3YWl0IGRldGFjaE93bmVkKHRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICAgICAgLyogbm8tb3AgKi9cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IHRpbWVzdGFtcCB9IGZyb20gJ0Bjb21tb24vdXRpbHMnO1xuLyoqXG4gKiBFeHBvcnRzIGEge0BsaW5rIFNjcmVlblN0YXRlfSBhcyBhIEpTT04gZmlsZSBhbmQgc2F2ZXNcbiAqXG4gKiBUaGUgSlNPTiBwYXlsb2FkIGluY2x1ZGVzIGJhc2ljIG1ldGFkYXRhIChmb3JtYXQva2luZC92ZXJzaW9uL2V4cG9ydGVkQXQvcGFnZUtleSlcbiAqIGFuZCB0aGUgc3RhdGUncyBgaXRlbXNgIGZvciBmdXR1cmUgY29tcGF0aWJpbGl0eSBhbmQgZWFzeSByZS1pbXBvcnQuXG4gKlxuICogQHBhcmFtIHN0YXRlIC0gVGhlIHNjcmVlbiBzdGF0ZSB0byBleHBvcnQuXG4gKiBAcGFyYW0gcGFnZUtleSAtIEEgcGFnZSBrZXkgdG8gZW1iZWQgaW50byB0aGUgZXhwb3J0ZWQgbWV0YWRhdGEgYW5kIHRvIGRlcml2ZSB0aGUgZmlsZW5hbWUuXG4gKiBAcGFyYW0gb3B0cyAtIEV4cG9ydCBvcHRpb25zIChlLmcuLCBgc2F2ZUFzYCwgYHByZWZpeGApLlxuICogQHJldHVybnMgQSBwcm9taXNlIHJlc29sdmluZyB0byB0aGUgZG93bmxvYWQgSUQgcmV0dXJuZWQgYnkgYGNocm9tZS5kb3dubG9hZHMuZG93bmxvYWRgLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXhwb3J0U2NyZWVuU3RhdGUoc3RhdGUsIHBhZ2VLZXksIG9wdHMgPSB7fSkge1xuICAgIGNvbnN0IHsgc2F2ZUFzID0gZmFsc2UsIHByZWZpeCA9ICdzcGVjc2tldGNoLXNjcmVlbi1zdGF0ZScgfSA9IG9wdHM7XG4gICAgLy8gTWV0YWRhdGEgKyBwYXlsb2FkIChrZWVwIHZlcnNpb25pbmcgZm9yIGZvcndhcmQgY29tcGF0aWJpbGl0eSlcbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgICBmb3JtYXQ6ICdzcGVjc2tldGNoLWV4cG9ydCcsXG4gICAgICAgIGtpbmQ6ICdzY3JlZW4tc3RhdGUnLFxuICAgICAgICB2ZXJzaW9uOiAxLFxuICAgICAgICBleHBvcnRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIHBhZ2VLZXksXG4gICAgICAgIGl0ZW1zOiBzdGF0ZS5pdGVtcyxcbiAgICB9O1xuICAgIGNvbnN0IGpzb24gPSBKU09OLnN0cmluZ2lmeShwYXlsb2FkLCBudWxsLCAyKTtcbiAgICBjb25zdCBiYXNlNjQgPSB0b0Jhc2U2NFV0ZjgoanNvbik7XG4gICAgY29uc3QgbWltZSA9ICdhcHBsaWNhdGlvbi9qc29uJztcbiAgICBjb25zdCB1cmwgPSBgZGF0YToke21pbWV9O2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCR7YmFzZTY0fWA7XG4gICAgY29uc3QgZmlsZW5hbWUgPSBtYWtlRmlsZW5hbWUocHJlZml4LCBwYWdlS2V5LCAnanNvbicpO1xuICAgIC8vIFNhdmUgdXNpbmcgdGhlIHNhbWUgQVBJIHBhdHRlcm4gYXMgaW1hZ2UgZG93bmxvYWRcbiAgICByZXR1cm4gYXdhaXQgY2hyb21lLmRvd25sb2Fkcy5kb3dubG9hZCh7IHVybCwgZmlsZW5hbWUsIHNhdmVBcyB9KTtcbn1cbi8qKlxuICogRW5jb2RlcyBhIFVURi04IHN0cmluZyB0byBCYXNlNjQgZm9yIHVzZSBpbiBhIGRhdGEgVVJMLlxuICpcbiAqIEBwYXJhbSB0ZXh0IC0gVGhlIFVURi04IHRleHQgdG8gZW5jb2RlLlxuICogQHJldHVybnMgQmFzZTY0IHN0cmluZyAobm8gZGF0YSBVUkwgcHJlZml4KS5cbiAqL1xuZnVuY3Rpb24gdG9CYXNlNjRVdGY4KHRleHQpIHtcbiAgICBjb25zdCBieXRlcyA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZSh0ZXh0KTsgLy8gVWludDhBcnJheVxuICAgIGxldCBiaW4gPSAnJztcbiAgICBmb3IgKGNvbnN0IGIgb2YgYnl0ZXMpIHtcbiAgICAgICAgYmluICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYik7XG4gICAgfVxuICAgIHJldHVybiBidG9hKGJpbik7XG59XG4vKipcbiAqIEJ1aWxkcyBhIHNhbml0aXplZCBmaWxlbmFtZSBpbiB0aGUgZm9ybTpcbiAqIGB7cHJlZml4fV97c2FuaXRpemVkUGFnZUtleX1fe1lZWVktTU0tRERfSEgtbW0tc3MrMDkwMH0ue2V4dH1gXG4gKlxuICogQHBhcmFtIHByZWZpeCAtIEZpbGVuYW1lIHByZWZpeCAoZS5nLiwgcHJvZHVjdCBvciBmZWF0dXJlIG5hbWUpLlxuICogQHBhcmFtIHBhZ2VLZXkgLSBUaGUgb3JpZ2luYWwgcGFnZSBrZXkgc3RyaW5nIHRvIGRlcml2ZSBhIHNhZmUgZmlsZW5hbWUgcGFydC5cbiAqIEBwYXJhbSBleHQgLSBGaWxlIGV4dGVuc2lvbiB3aXRob3V0IGRvdCAoZS5nLiwgJ2pzb24nKS5cbiAqIEByZXR1cm5zIEEgc2FmZSBmaWxlbmFtZSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG1ha2VGaWxlbmFtZShwcmVmaXgsIHBhZ2VLZXksIGV4dCkge1xuICAgIGNvbnN0IHNhZmVLZXkgPSAocGFnZUtleSA/PyAnJylcbiAgICAgICAgLnJlcGxhY2UoL2h0dHBzPzpcXC9cXC8vLCAnJylcbiAgICAgICAgLnJlcGxhY2UoL1teYS16QS1aMC05Ll8tXSsvZywgJy0nKVxuICAgICAgICAucmVwbGFjZSgvLSsvZywgJy0nKVxuICAgICAgICAucmVwbGFjZSgvXi18LSQvZywgJycpXG4gICAgICAgIC5zbGljZSgwLCAxMjApIHx8ICdwYWdlJztcbiAgICByZXR1cm4gYCR7cHJlZml4fV8ke3NhZmVLZXl9XyR7dGltZXN0YW1wKCl9LiR7ZXh0fWA7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gdGltZXN0YW1wKGQgPSBuZXcgRGF0ZSgpKSB7XG4gICAgY29uc3QgcGFkID0gKG4sIHcgPSAyKSA9PiBTdHJpbmcobikucGFkU3RhcnQodywgJzAnKTtcbiAgICBjb25zdCB0em8gPSAtZC5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgIGNvbnN0IHNpZ24gPSB0em8gPj0gMCA/ICcrJyA6ICctJztcbiAgICBjb25zdCBoaCA9IHBhZChNYXRoLmZsb29yKE1hdGguYWJzKHR6bykgLyA2MCkpO1xuICAgIGNvbnN0IG1tID0gcGFkKE1hdGguYWJzKHR6bykgJSA2MCk7XG4gICAgcmV0dXJuIGAke2QuZ2V0RnVsbFllYXIoKX0tJHtwYWQoZC5nZXRNb250aCgpICsgMSl9LSR7cGFkKGQuZ2V0RGF0ZSgpKX1fJHtwYWQoZC5nZXRIb3VycygpKX0tJHtwYWQoZC5nZXRNaW51dGVzKCkpfS0ke3BhZChkLmdldFNlY29uZHMoKSl9JHtzaWdufSR7aGh9JHttbX1gO1xufVxuIiwiaW1wb3J0IGkxOG4gZnJvbSAnQGNvbW1vbi9pMThuJztcbmltcG9ydCB7IGlzVmFsaWRQYXlsb2FkIH0gZnJvbSAnQGNvbW1vbi90eXBlcyc7XG5pbXBvcnQgeyBzY3JlZW5TdGF0ZVRhYmxlIH0gZnJvbSAnQHBhbmVsL3N0b3JhZ2UvdGFibGVzJztcbmltcG9ydCB7IGFwcGx5UGF0Y2ggfSBmcm9tICcuL3N0YXRlJztcbi8qKlxuICogSW1wb3J0IGEgU2NyZWVuU3RhdGUtbGlrZSBKU09OIGZpbGUgYW5kIG1lcmdlIGl0cyBpdGVtcyBpbnRvIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogLSBPbmx5IGAuanNvbmAgKGJ5IGV4dGVuc2lvbikgb3IgYGFwcGxpY2F0aW9uL2pzb25gIC8gYHRleHQvanNvbmAgKGJ5IE1JTUUpIGlzIGFjY2VwdGVkLlxuICogLSBQYXlsb2FkIG11c3QgbWF0Y2ggdGhlIFwic3BlY3NrZXRjaC1leHBvcnQgLyBzY3JlZW4tc3RhdGVcIiBjb250cmFjdC5cbiAqIC0gSXRlbXMgYXJlIG1lcmdlZCBieSAqKmFuY2hvcioqIGlkZW50aXR5OyBhbiBpbXBvcnRlZCBpdGVtIGlzIHNraXBwZWQgaWYgYW4gaXRlbSB3aXRoIHRoZVxuICogICBzYW1lIGFuY2hvciBge2tpbmQsIHZlcnNpb24sIHZhbHVlfWAgYWxyZWFkeSBleGlzdHMgaW4gdGhlIGN1cnJlbnQgcGFnZS5cbiAqXG4gKiBAcGFyYW0gZmlsZSAgICAgQSB1c2VyLXNlbGVjdGVkIEpTT04gZmlsZSB0aGF0IGNvbnRhaW5zIGV4cG9ydCBwYXlsb2FkLlxuICogQHBhcmFtIHBhZ2VLZXkgIFRoZSB0YXJnZXQgcGFnZSBrZXkgdG8gbWVyZ2UgaW50by5cbiAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSB1cGRhdGVkIHtAbGluayBTY3JlZW5TdGF0ZX0gYW5kIGEgaHVtYW4tcmVhZGFibGUgc3VjY2VzcyBtZXNzYWdlLlxuICpcbiAqIEB0aHJvd3MgRXJyb3Igd2l0aCBpMThuIG1lc3NhZ2UgYGltcG9ydF9maWxlX25vdF9qc29uYFxuICogICAgICAgICB3aGVuIHRoZSBmaWxlIGlzIG5vdCByZWNvZ25pemVkIGFzIEpTT04uXG4gKiBAdGhyb3dzIEVycm9yIHdpdGggaTE4biBtZXNzYWdlIGBpbXBvcnRfcGF5bG9hZF9pbnZhbGlkYFxuICogICAgICAgICB3aGVuIHRoZSBwYXJzZWQgSlNPTiBkb2VzIG5vdCBzYXRpc2Z5IHRoZSBleHBlY3RlZCBwYXlsb2FkIGNvbnRyYWN0LlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW1wb3J0U2NyZWFuU3RhdGUoZmlsZSwgcGFnZUtleSkge1xuICAgIC8vIFZhbGlkYXRlIGZpbGUgdHlwZSBhcyBKU09OIGJ5IGV4dGVuc2lvbiBvciBNSU1FIChlbXB0eSBNSU1FIGlzIGFsbG93ZWQgb24gc29tZSBicm93c2VycykuXG4gICAgY29uc3QgaXNKc29uQnlFeHQgPSAvXFwuanNvbiQvaS50ZXN0KGZpbGUubmFtZSk7XG4gICAgY29uc3QgaXNKc29uQnlNaW1lID0gZmlsZS50eXBlID09PSAnYXBwbGljYXRpb24vanNvbicgfHwgZmlsZS50eXBlID09PSAndGV4dC9qc29uJyB8fCBmaWxlLnR5cGUgPT09ICcnO1xuICAgIGlmICghaXNKc29uQnlFeHQgJiYgIWlzSnNvbkJ5TWltZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoaTE4bi5nZXQoJ2ltcG9ydF9maWxlX25vdF9qc29uJykpO1xuICAgIH1cbiAgICAvLyBQYXJzZSBKU09OIHRleHQg4oaSIHZhbHVlLlxuICAgIGxldCBwYXJzZWQ7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgdGV4dCA9IGF3YWl0IGZpbGUudGV4dCgpO1xuICAgICAgICBwYXJzZWQgPSBKU09OLnBhcnNlKHRleHQpO1xuICAgIH1cbiAgICBjYXRjaCB7XG4gICAgICAgIC8vIFRyZWF0IG1hbGZvcm1lZCBKU09OIHRoZSBzYW1lIGFzIHBheWxvYWQgaW52YWxpZC5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGkxOG4uZ2V0KCdpbXBvcnRfcGF5bG9hZF9pbnZhbGlkJykpO1xuICAgIH1cbiAgICAvLyBWYWxpZGF0ZSBwYXlsb2FkIGNvbnRyYWN0OiBmb3JtYXQva2luZC92ZXJzaW9uL3BhZ2VLZXkvaXRlbXMgKGl0ZW1zIG11c3QgYmUgYXJyYXktbGlrZSBTY3JlZW5JdGVtKS5cbiAgICBpZiAoIWlzVmFsaWRQYXlsb2FkKHBhcnNlZCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGkxOG4uZ2V0KCdpbXBvcnRfcGF5bG9hZF9pbnZhbGlkJykpO1xuICAgIH1cbiAgICBjb25zdCBwYXlsb2FkID0gcGFyc2VkO1xuICAgIGNvbnN0IGl0ZW1zID0gcGF5bG9hZC5pdGVtcztcbiAgICAvLyBGZXRjaCBjdXJyZW50IHN0YXRlIChpZiBtaXNzaW5nLCB0cmVhdCBhcyBlbXB0eSBpdGVtcyBmb3IgY29tcGFyaXNvbikuXG4gICAgY29uc3Qgc3RhdGUgPSBhd2FpdCBzY3JlZW5TdGF0ZVRhYmxlLmdldChwYWdlS2V5KTtcbiAgICBjb25zdCBleGlzdGluZyA9IHN0YXRlPy5pdGVtcyA/PyBbXTtcbiAgICAvLyBCdWlsZCBhIGZhc3QgbG9va3VwIG9mIGV4aXN0aW5nIGFuY2hvcnMgKGlkZW50aXR5ID0ga2luZDp2ZXJzaW9uOnZhbHVlKS5cbiAgICBjb25zdCBrZXlPZiA9IChpdCkgPT4gYCR7aXQuYW5jaG9yLmtpbmR9OiR7aXQuYW5jaG9yLnZlcnNpb259OiR7aXQuYW5jaG9yLnZhbHVlfWA7XG4gICAgY29uc3QgZXhpc3RpbmdTZXQgPSBuZXcgU2V0KGV4aXN0aW5nLm1hcChrZXlPZikpO1xuICAgIC8vIENyZWF0ZSB0aGUgbWluaW1hbCBwYXRjaCBwYXlsb2FkIGZvciBgYXBwbHlQYXRjaGAg4oCUIG9ubHkgZmllbGRzIHN1cHBvcnRlZCBieSBcImFkZGVkXCIuXG4gICAgY29uc3QgYWRkZWQgPSBpdGVtc1xuICAgICAgICAuZmlsdGVyKChpdCkgPT4gIWV4aXN0aW5nU2V0LmhhcyhrZXlPZihpdCkpKVxuICAgICAgICAuc29ydCgoYSwgYikgPT4gYi5pZCAtIGEuaWQpXG4gICAgICAgIC5tYXAoKGl0KSA9PiAoe1xuICAgICAgICBhbmNob3I6IGl0LmFuY2hvcixcbiAgICAgICAgc2l6ZTogaXQuc2l6ZSxcbiAgICAgICAgY29sb3I6IGl0LmNvbG9yLFxuICAgICAgICBzaGFwZTogaXQuc2hhcGUsXG4gICAgICAgIHBvc2l0aW9uOiBpdC5wb3NpdGlvbixcbiAgICAgICAgZ3JvdXA6IGl0Lmdyb3VwLFxuICAgICAgICBjb21tZW50OiBpdC5jb21tZW50LFxuICAgIH0pKTtcbiAgICBjb25zdCBuZXdTdGF0ZSA9IGF3YWl0IGFwcGx5UGF0Y2gocGFnZUtleSwgeyBhZGRlZCB9KTtcbiAgICBjb25zdCBzdWNjZXNzTWVzc2FnZSA9IGkxOG4uZ2V0KCdpbXBvcnRfc3VjY2VlZGVkX3dpdGhfY291bnQnLCBbU3RyaW5nKGFkZGVkLmxlbmd0aCldKTtcbiAgICByZXR1cm4geyBzdGF0ZTogbmV3U3RhdGUsIHN1Y2Nlc3NNZXNzYWdlIH07XG59XG4iLCIvKipcbiAqIFVJRXZlbnRUeXBlIC8gVUlFdmVudFBheWxvYWRNYXBcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBBIHR5cGVkIGNhdGFsb2cgb2YgKnB1cmUgVUkgZXZlbnRzKiBlbWl0dGVkIGJ5IHRoZSBWaWV3IChwYW5lbF92aWV3LnRzKS5cbiAqIC0gVGhlIFZpZXcgcmVhZHMgRE9NIHN0YXRlLCBub3JtYWxpemVzIGl0LCBhbmQgZW1pdHMgb25lIG9mIHRoZXNlIGV2ZW50cy5cbiAqIC0gVGhlIENvbnRyb2xsZXIgbWFwcyBlYWNoIFVJIGV2ZW50IHRvIGFuIEFjdGlvblR5cGUgYW5kIGRpc3BhdGNoZXMgaXQuXG4gKiAtIFBheWxvYWRzIGFyZSBzdHJvbmdseSB0eXBlZCB2aWEgVUlFdmVudFBheWxvYWRNYXA7IHVzZSBgdW5kZWZpbmVkYCBmb3Igbm8gcGF5bG9hZC5cbiAqL1xuZXhwb3J0IHZhciBVSUV2ZW50VHlwZTtcbihmdW5jdGlvbiAoVUlFdmVudFR5cGUpIHtcbiAgICAvKiogVG9nZ2xlIHNlbGVjdGlvbiBtb2RlICovXG4gICAgVUlFdmVudFR5cGVbXCJUT0dHTEVfU0VMRUNUXCJdID0gXCJUT0dHTEVfU0VMRUNUXCI7XG4gICAgLyoqIENsZWFyIGFsbCBzZWxlY3Rpb25zICovXG4gICAgVUlFdmVudFR5cGVbXCJDTEVBUlwiXSA9IFwiQ0xFQVJcIjtcbiAgICAvKiogVHJpZ2dlciBwYWdlIGNhcHR1cmUgKi9cbiAgICBVSUV2ZW50VHlwZVtcIkNBUFRVUkVcIl0gPSBcIkNBUFRVUkVcIjtcbiAgICAvKiogQmFkZ2Ugc2l6ZSBjaGFuZ2VkIChyYW5nZS9udW1iZXIgaW5wdXRzKSAqL1xuICAgIFVJRXZlbnRUeXBlW1wiQkFER0VfU0laRV9DSEFOR0VcIl0gPSBcIkJBREdFX1NJWkVfQ0hBTkdFXCI7XG4gICAgLyoqIEJhZGdlIGNvbG9yIHBpY2tlZCAocG9wb3ZlciBidXR0b25zKSAqL1xuICAgIFVJRXZlbnRUeXBlW1wiQkFER0VfQ09MT1JfU0VMRUNUXCJdID0gXCJCQURHRV9DT0xPUl9TRUxFQ1RcIjtcbiAgICAvKiogQmFkZ2Ugc2hhcGUgY2hhbmdlZCAoc2VsZWN0KSAqL1xuICAgIFVJRXZlbnRUeXBlW1wiQkFER0VfU0hBUEVfQ0hBTkdFXCJdID0gXCJCQURHRV9TSEFQRV9DSEFOR0VcIjtcbiAgICAvKiogQmFkZ2UgbGFiZWwgZm9ybWF0IGNoYW5nZWQgKHNlbGVjdCkgKi9cbiAgICBVSUV2ZW50VHlwZVtcIkJBREdFX0xBQkVMX0ZPUk1BVF9DSEFOR0VcIl0gPSBcIkJBREdFX0xBQkVMX0ZPUk1BVF9DSEFOR0VcIjtcbiAgICAvKiogQmFkZ2UgdmlzaWJsZSBmb3JtYXQgY2hhbmdlZCAoc2VsZWN0KSAqL1xuICAgIFVJRXZlbnRUeXBlW1wiQkFER0VfVklTSUJMRV9DSEFOR0VcIl0gPSBcIkJBREdFX1ZJU0lCTEVfQ0hBTkdFXCI7XG4gICAgLyoqIERlbGV0ZSB0aGUgc2VsZWN0ZWQgYmFkZ2UgKi9cbiAgICBVSUV2ZW50VHlwZVtcIkJBREdFX0RFTEVURVwiXSA9IFwiQkFER0VfREVMRVRFXCI7XG4gICAgLyoqIEJhZGdlIHBvc2l0aW9uIHBpY2tlZCAocG9wb3ZlciBidXR0b25zKSAqL1xuICAgIFVJRXZlbnRUeXBlW1wiQkFER0VfUE9TSVRJT05fU0VMRUNUXCJdID0gXCJCQURHRV9QT1NJVElPTl9TRUxFQ1RcIjtcbiAgICAvKiogVXBkYXRlIGEgZ3JvdXAgb2YgZWxlbWVudHMgKi9cbiAgICBVSUV2ZW50VHlwZVtcIlNFVF9HUk9VUFwiXSA9IFwiU0VUX0dST1VQXCI7XG4gICAgLyoqIENhcHR1cmUgZm9ybWF0IGNoYW5nZWQgKHJhZGlvKSAqL1xuICAgIFVJRXZlbnRUeXBlW1wiQ0FQVFVSRV9GT1JNQVRfQ0hBTkdFXCJdID0gXCJDQVBUVVJFX0ZPUk1BVF9DSEFOR0VcIjtcbiAgICAvKiogQ2FwdHVyZSBhcmVhIGNoYW5nZWQgKHJhZGlvKSAqL1xuICAgIFVJRXZlbnRUeXBlW1wiQ0FQVFVSRV9BUkVBX0NIQU5HRVwiXSA9IFwiQ0FQVFVSRV9BUkVBX0NIQU5HRVwiO1xuICAgIC8qKiBKUEVHIHF1YWxpdHkgY2hhbmdlZCAocmFuZ2UvbnVtYmVyKSAqL1xuICAgIFVJRXZlbnRUeXBlW1wiQ0FQVFVSRV9RVUFMSVRZX0NIQU5HRVwiXSA9IFwiQ0FQVFVSRV9RVUFMSVRZX0NIQU5HRVwiO1xuICAgIC8qKiBDYXB0dXJlIHNjYWxlIGNoYW5nZWQgKHJhbmdlL251bWJlcikgKi9cbiAgICBVSUV2ZW50VHlwZVtcIkNBUFRVUkVfU0NBTEVfQ0hBTkdFXCJdID0gXCJDQVBUVVJFX1NDQUxFX0NIQU5HRVwiO1xuICAgIC8qKiBUb2dnbGUgY2FwdHVyZSBvcHRpb25zIGRyb3Bkb3duIChleHBhbmQvY29sbGFwc2UpICovXG4gICAgVUlFdmVudFR5cGVbXCJUT0dHTEVfQ0FQVFVSRV9QQU5FTFwiXSA9IFwiVE9HR0xFX0NBUFRVUkVfUEFORUxcIjtcbiAgICAvKiogUmVvcmRlcmluZyBzZWxlY3RlZCBpdGVtcyAoZHJhZyBhbmQgZHJvcCkgKi9cbiAgICBVSUV2ZW50VHlwZVtcIlJFT1JERVJfSVRFTVNcIl0gPSBcIlJFT1JERVJfSVRFTVNcIjtcbiAgICAvKiogRW1pdHRlZCB3aGVuIGFuIGl0ZW0ncyBlZGl0LXNlbGVjdGlvbiBjaGVja2JveCBjaGFuZ2VzIHN0YXRlICovXG4gICAgVUlFdmVudFR5cGVbXCJJVEVNX1NFTEVDVElPTl9DSEFOR0VEXCJdID0gXCJJVEVNX1NFTEVDVElPTl9DSEFOR0VEXCI7XG4gICAgLyoqIFN0YXJ0IGl0ZW0gaG92ZXIgKi9cbiAgICBVSUV2ZW50VHlwZVtcIklURU1fSE9WRVJfSU5cIl0gPSBcIklURU1fSE9WRVJfSU5cIjtcbiAgICAvKiogRW5kIGl0ZW0gaG92ZXIgKi9cbiAgICBVSUV2ZW50VHlwZVtcIklURU1fSE9WRVJfT1VUXCJdID0gXCJJVEVNX0hPVkVSX09VVFwiO1xuICAgIC8qKiBBcHBseSBwZW5kaW5nIGNvbW1lbnQgZWRpdHMgdG8gdGhlIHNlbGVjdGVkIGl0ZW0gKi9cbiAgICBVSUV2ZW50VHlwZVtcIklURU1fQ09NTUVOVF9BUFBMWVwiXSA9IFwiSVRFTV9DT01NRU5UX0FQUExZXCI7XG4gICAgLyoqIFVwZGF0ZSB0aGUgVUkgdGhlbWUgKi9cbiAgICBVSUV2ZW50VHlwZVtcIlVQREFURV9USEVNRVwiXSA9IFwiVVBEQVRFX1RIRU1FXCI7XG4gICAgLyoqIEVtaXR0ZWQgYWZ0ZXIgdGhlIFNldHRpbmdzIG1vZGFsIGlzIHNob3cgKi9cbiAgICBVSUV2ZW50VHlwZVtcIlNFVFRJTkdfTU9EQUxfU0hPV1wiXSA9IFwiU0VUVElOR19NT0RBTF9TSE9XXCI7XG4gICAgLyoqIEltcG9ydCBhIFNjcmVlblN0YXRlIGZyb20gYSBzZWxlY3RlZCBKU09OIGZpbGUgKi9cbiAgICBVSUV2ZW50VHlwZVtcIklNUE9SVF9TQ1JFQU5fU1RBVEVfRklMRVwiXSA9IFwiSU1QT1JUX1NDUkVBTl9TVEFURV9GSUxFXCI7XG4gICAgLyoqIERpc21pc3MgYSB0b2FzdCBieSBVVUlEICovXG4gICAgVUlFdmVudFR5cGVbXCJUT0FTVF9ESVNNSVNTX1JFUVVFU1RFRFwiXSA9IFwiVE9BU1RfRElTTUlTU19SRVFVRVNURURcIjtcbiAgICAvKiogQ2xpY2sgdG8gcmVtb3ZlIHRoZSBzYXZlZCBwYWdlICovXG4gICAgVUlFdmVudFR5cGVbXCJSRU1PVkVfUEFHRV9DTElDS1wiXSA9IFwiUkVNT1ZFX1BBR0VfQ0xJQ0tcIjtcbiAgICAvKiogQ2xpY2sgdGhlIGV4cG9ydCBidXR0b24gKi9cbiAgICBVSUV2ZW50VHlwZVtcIkVYUE9SVF9QQUdFX0NMSUNLXCJdID0gXCJFWFBPUlRfUEFHRV9DTElDS1wiO1xufSkoVUlFdmVudFR5cGUgfHwgKFVJRXZlbnRUeXBlID0ge30pKTtcbiIsImltcG9ydCB7IE1TR19UWVBFIH0gZnJvbSAnQGNvbW1vbi9tZXNzYWdlcyc7XG5pbXBvcnQgeyBpc1Jlc3RyaWN0ZWQsIHBhZ2VLZXkgfSBmcm9tICdAY29tbW9uL3VybCc7XG5pbXBvcnQgeyBnZXRBY3RpdmVUYWIgfSBmcm9tICdAaW5mcmEvY2hyb21lL3RhYnMnO1xuaW1wb3J0IHsgaW5pdGlhbE1vZGVsIH0gZnJvbSAnQHBhbmVsL2FwcC9tb2RlbCc7XG5pbXBvcnQgeyB1cGRhdGUgfSBmcm9tICdAcGFuZWwvYXBwL3VwZGF0ZSc7XG5pbXBvcnQgeyBjb25uZWN0VG9UYWIgfSBmcm9tICdAcGFuZWwvbWVzc2FnaW5nL2Nvbm5lY3Rpb24nO1xuaW1wb3J0IHsgY2FwdHVyZSB9IGZyb20gJ0BwYW5lbC9zZXJ2aWNlcy9jYXB0dXJlJztcbmltcG9ydCB7IGV4cG9ydFNjcmVlblN0YXRlIH0gZnJvbSAnQHBhbmVsL3NlcnZpY2VzL2V4cG9ydCc7XG5pbXBvcnQgeyBpbXBvcnRTY3JlYW5TdGF0ZSB9IGZyb20gJ0BwYW5lbC9zZXJ2aWNlcy9pbXBvcnQnO1xuaW1wb3J0IHsgaGFuZGxlU2VsZWN0ZWQgfSBmcm9tICdAcGFuZWwvc2VydmljZXMvc3RhdGUnO1xuaW1wb3J0IHsgc2NyZWVuU3RhdGVUYWJsZSwgdGhlbWVUYWJsZSB9IGZyb20gJ0BwYW5lbC9zdG9yYWdlL3RhYmxlcyc7XG5pbXBvcnQgeyBBY3Rpb25UeXBlIH0gZnJvbSAnQHBhbmVsL3R5cGVzL2FjdGlvbl90eXBlcyc7XG5pbXBvcnQgeyBFZmZlY3RUeXBlIH0gZnJvbSAnQHBhbmVsL3R5cGVzL2VmZmVjdF90eXBlcyc7XG5pbXBvcnQgeyBTVEFUVVMgfSBmcm9tICdAcGFuZWwvdHlwZXMvc3RhdHVzJztcbmltcG9ydCB7IFVJRXZlbnRUeXBlIH0gZnJvbSAnQHBhbmVsL3R5cGVzL3VpX2V2ZW50X3R5cGVzJztcbmV4cG9ydCBjbGFzcyBQYW5lbENvbnRyb2xsZXIge1xuICAgIHZpZXc7XG4gICAgbW9kZWwgPSBzdHJ1Y3R1cmVkQ2xvbmUoaW5pdGlhbE1vZGVsKTtcbiAgICBjb25uID0gbnVsbDtcbiAgICBjdXJyZW50V2luZG93SWQgPSBudWxsO1xuICAgIHN0YXRpYyBSRVFVSVJFU19DT05OID0gbmV3IFNldChbXG4gICAgICAgIEVmZmVjdFR5cGUuUkVOREVSX0NPTlRFTlQsXG4gICAgICAgIEVmZmVjdFR5cGUuVE9HR0xFX1NFTEVDVF9PTl9DT05URU5ULFxuICAgICAgICBFZmZlY3RUeXBlLkNMRUFSX0NPTlRFTlQsXG4gICAgICAgIEVmZmVjdFR5cGUuSE9WRVIsXG4gICAgXSk7XG4gICAgY29uc3RydWN0b3Iodmlldykge1xuICAgICAgICB0aGlzLnZpZXcgPSB2aWV3O1xuICAgIH1cbiAgICBhc3luYyBzdGFydCgpIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGUuSU5JVCB9KTtcbiAgICAgICAgY29uc3QgeyBvayB9ID0gYXdhaXQgdGhpcy5lbnN1cmVDb25uZWN0aW9uQWxpdmUoeyBmb3JjZVJlY29ubmVjdDogdHJ1ZSB9KTtcbiAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgdGhpcy52aWV3LnJlbmRlcih0aGlzLm1vZGVsKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlZ2lzdGVyVmlld0hhbmRsZXJzKCk7XG4gICAgICAgIHRoaXMudmlldy5yZW5kZXIodGhpcy5tb2RlbCk7XG4gICAgICAgIGNvbnN0IHcgPSBhd2FpdCBjaHJvbWUud2luZG93cy5nZXRDdXJyZW50KCk7XG4gICAgICAgIHRoaXMuY3VycmVudFdpbmRvd0lkID0gdy5pZCA/PyBudWxsO1xuICAgICAgICBjaHJvbWUucnVudGltZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoKG1zZykgPT4ge1xuICAgICAgICAgICAgaWYgKG1zZy50eXBlICE9PSBNU0dfVFlQRS5BQ1RJVkVfVEFCX0NIQU5HRUQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3Qgc2VuZGVyV2luZG93SWQgPSBtc2cucGF5bG9hZC53aW5kb3dJZDtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRXaW5kb3dJZCA9PSBudWxsIHx8IHRoaXMuY3VycmVudFdpbmRvd0lkICE9PSBzZW5kZXJXaW5kb3dJZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB2b2lkIHRoaXMuZW5zdXJlQ29ubmVjdGlvbkFsaXZlKHsgZm9yY2VSZWNvbm5lY3Q6IHRydWUgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZWdpc3RlclZpZXdIYW5kbGVycygpIHtcbiAgICAgICAgdGhpcy52aWV3Lm9uKFVJRXZlbnRUeXBlLlRPR0dMRV9TRUxFQ1QsICgpID0+IHRoaXMuZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlLlRPR0dMRV9TRUxFQ1QgfSkpO1xuICAgICAgICB0aGlzLnZpZXcub24oVUlFdmVudFR5cGUuQ0xFQVIsICgpID0+IHRoaXMuZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlLkNMRUFSX0FMTCB9KSk7XG4gICAgICAgIHRoaXMudmlldy5vbihVSUV2ZW50VHlwZS5DQVBUVVJFLCAoKSA9PiB0aGlzLmRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZS5NRUFTVVJFX0NPTlRFTlRfU0laRSB9KSk7XG4gICAgICAgIHRoaXMudmlldy5vbihVSUV2ZW50VHlwZS5CQURHRV9TSVpFX0NIQU5HRSwgKHsgc2l6ZSB9KSA9PiB0aGlzLmRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZS5TRVRfQkFER0VfU0laRSwgc2l6ZSB9KSk7XG4gICAgICAgIHRoaXMudmlldy5vbihVSUV2ZW50VHlwZS5CQURHRV9DT0xPUl9TRUxFQ1QsICh7IGNvbG9yIH0pID0+IHRoaXMuZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlLlNFVF9CQURHRV9DT0xPUiwgY29sb3IgfSkpO1xuICAgICAgICB0aGlzLnZpZXcub24oVUlFdmVudFR5cGUuQkFER0VfU0hBUEVfQ0hBTkdFLCAoeyBzaGFwZSB9KSA9PiB0aGlzLmRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZS5TRVRfQkFER0VfU0hBUEUsIHNoYXBlIH0pKTtcbiAgICAgICAgdGhpcy52aWV3Lm9uKFVJRXZlbnRUeXBlLkJBREdFX0xBQkVMX0ZPUk1BVF9DSEFOR0UsICh7IGxhYmVsRm9ybWF0IH0pID0+IHRoaXMuZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlLlNFVF9CQURHRV9MQUJFTF9GT1JNQVQsIGxhYmVsRm9ybWF0IH0pKTtcbiAgICAgICAgdGhpcy52aWV3Lm9uKFVJRXZlbnRUeXBlLkJBREdFX1ZJU0lCTEVfQ0hBTkdFLCAoeyB2aXNpYmxlIH0pID0+IHRoaXMuZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlLlNFVF9CQURHRV9WSVNJQkxFLCB2aXNpYmxlIH0pKTtcbiAgICAgICAgdGhpcy52aWV3Lm9uKFVJRXZlbnRUeXBlLkJBREdFX0RFTEVURSwgKCkgPT4gdGhpcy5kaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGUuQkFER0VfREVMRVRFIH0pKTtcbiAgICAgICAgdGhpcy52aWV3Lm9uKFVJRXZlbnRUeXBlLkJBREdFX1BPU0lUSU9OX1NFTEVDVCwgKHsgcG9zaXRpb24gfSkgPT4gdGhpcy5kaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGUuU0VUX0JBREdFX1BPU0lUSU9OLCBwb3NpdGlvbiB9KSk7XG4gICAgICAgIHRoaXMudmlldy5vbihVSUV2ZW50VHlwZS5UT0dHTEVfQ0FQVFVSRV9QQU5FTCwgKCkgPT4gdGhpcy5kaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGUuVE9HR0xFX0NBUFRVUkVfUEFORUwgfSkpO1xuICAgICAgICB0aGlzLnZpZXcub24oVUlFdmVudFR5cGUuQ0FQVFVSRV9GT1JNQVRfQ0hBTkdFLCAoeyBmb3JtYXQgfSkgPT4gdGhpcy5kaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGUuU0VUX0NBUFRVUkVfRk9STUFULCBmb3JtYXQgfSkpO1xuICAgICAgICB0aGlzLnZpZXcub24oVUlFdmVudFR5cGUuQ0FQVFVSRV9BUkVBX0NIQU5HRSwgKHsgYXJlYSB9KSA9PiB0aGlzLmRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZS5TRVRfQ0FQVFVSRV9BUkVBLCBhcmVhIH0pKTtcbiAgICAgICAgdGhpcy52aWV3Lm9uKFVJRXZlbnRUeXBlLkNBUFRVUkVfUVVBTElUWV9DSEFOR0UsICh7IHF1YWxpdHkgfSkgPT4gdGhpcy5kaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGUuU0VUX0NBUFRVUkVfUVVBTElUWSwgcXVhbGl0eSB9KSk7XG4gICAgICAgIHRoaXMudmlldy5vbihVSUV2ZW50VHlwZS5DQVBUVVJFX1NDQUxFX0NIQU5HRSwgKHsgc2NhbGUgfSkgPT4gdGhpcy5kaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGUuU0VUX0NBUFRVUkVfU0NBTEUsIHNjYWxlIH0pKTtcbiAgICAgICAgdGhpcy52aWV3Lm9uKFVJRXZlbnRUeXBlLlJFT1JERVJfSVRFTVMsICh7IGZyb21JZCwgZnJvbUluZGV4LCB0b0luZGV4IH0pID0+IHRoaXMuZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlLlJFT1JERVJfSVRFTVMsIGZyb21JZCwgZnJvbUluZGV4LCB0b0luZGV4IH0pKTtcbiAgICAgICAgdGhpcy52aWV3Lm9uKFVJRXZlbnRUeXBlLlNFVF9HUk9VUCwgKHsgZ3JvdXAgfSkgPT4gdGhpcy5kaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGUuU0VUX0dST1VQLCBncm91cCB9KSk7XG4gICAgICAgIHRoaXMudmlldy5vbihVSUV2ZW50VHlwZS5JVEVNX1NFTEVDVElPTl9DSEFOR0VELCAocGF5bG9hZCkgPT4gdGhpcy5kaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGUuSVRFTV9TRUxFQ1RJT05fQ0hBTkdFRCwgLi4ucGF5bG9hZCB9KSk7XG4gICAgICAgIHRoaXMudmlldy5vbihVSUV2ZW50VHlwZS5JVEVNX0hPVkVSX0lOLCAoeyBpZCB9KSA9PiB0aGlzLmRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZS5JVEVNX0hPVkVSX0lOLCBpZCB9KSk7XG4gICAgICAgIHRoaXMudmlldy5vbihVSUV2ZW50VHlwZS5JVEVNX0hPVkVSX09VVCwgKCkgPT4gdGhpcy5kaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGUuSVRFTV9IT1ZFUl9PVVQgfSkpO1xuICAgICAgICB0aGlzLnZpZXcub24oVUlFdmVudFR5cGUuSVRFTV9DT01NRU5UX0FQUExZLCAoeyBpZCwgY29tbWVudCB9KSA9PiB0aGlzLmRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZS5VUERBVEVfSVRFTV9DT01NRU5ULCBpZCwgY29tbWVudCB9KSk7XG4gICAgICAgIHRoaXMudmlldy5vbihVSUV2ZW50VHlwZS5VUERBVEVfVEhFTUUsICh7IHRoZW1lIH0pID0+IHRoaXMuZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlLlVQREFURV9USEVNRSwgdGhlbWUgfSkpO1xuICAgICAgICB0aGlzLnZpZXcub24oVUlFdmVudFR5cGUuU0VUVElOR19NT0RBTF9TSE9XLCAoKSA9PiB0aGlzLmRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZS5TVE9SRV9SRUxPQURfUkVRVUVTVEVEIH0pKTtcbiAgICAgICAgdGhpcy52aWV3Lm9uKFVJRXZlbnRUeXBlLklNUE9SVF9TQ1JFQU5fU1RBVEVfRklMRSwgKHsgZmlsZSB9KSA9PiB0aGlzLmRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZS5JTVBPUlRfU0NSRUFOX1NUQVRFX0ZJTEUsIGZpbGUgfSkpO1xuICAgICAgICB0aGlzLnZpZXcub24oVUlFdmVudFR5cGUuVE9BU1RfRElTTUlTU19SRVFVRVNURUQsICh7IHV1aWQgfSkgPT4gdGhpcy5kaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGUuVE9BU1RfRElTTUlTU19SRVFVRVNURUQsIHV1aWQgfSkpO1xuICAgICAgICB0aGlzLnZpZXcub24oVUlFdmVudFR5cGUuUkVNT1ZFX1BBR0VfQ0xJQ0ssICh7IHBhZ2VLZXkgfSkgPT4gdGhpcy5kaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGUuUkVNT1ZFX1NDUkVFTl9TVEFURV9CWV9QQUdFLCBwYWdlS2V5IH0pKTtcbiAgICAgICAgdGhpcy52aWV3Lm9uKFVJRXZlbnRUeXBlLkVYUE9SVF9QQUdFX0NMSUNLLCAoeyBwYWdlS2V5IH0pID0+IHRoaXMuZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlLkVYUE9SVF9TQ1JFRU5fU1RBVEVfQllfUEFHRSwgcGFnZUtleSB9KSk7XG4gICAgfVxuICAgIGRpc3BhdGNoKGFjdGlvbikge1xuICAgICAgICBjb25zdCB7IG1vZGVsOiBuZXh0LCBlZmZlY3RzIH0gPSB1cGRhdGUodGhpcy5tb2RlbCwgYWN0aW9uKTtcbiAgICAgICAgdGhpcy5tb2RlbCA9IG5leHQ7XG4gICAgICAgIHRoaXMudmlldy5yZW5kZXIodGhpcy5tb2RlbCk7XG4gICAgICAgIHZvaWQgdGhpcy5leGVjRWZmZWN0cyhlZmZlY3RzKS5jYXRjaChjb25zb2xlLmVycm9yKTtcbiAgICB9XG4gICAgYXN5bmMgZXhlY0VmZmVjdHMoZWZmZWN0cykge1xuICAgICAgICBjb25zdCBuZWVkc0Nvbm4gPSBlZmZlY3RzLnNvbWUoKGZ4KSA9PiBQYW5lbENvbnRyb2xsZXIuUkVRVUlSRVNfQ09OTi5oYXMoZngua2luZCkpO1xuICAgICAgICBpZiAobmVlZHNDb25uKSB7XG4gICAgICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5lbnN1cmVDb25uZWN0aW9uQWxpdmUoKTtcbiAgICAgICAgICAgIGlmICghci5vayB8fCByLmNvbnRleHRDaGFuZ2VkKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGZ4IG9mIGVmZmVjdHMpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoZngua2luZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgRWZmZWN0VHlwZS5SRU5ERVJfQ09OVEVOVDpcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5jb25uPy5hcGkucmVuZGVyKGZ4Lml0ZW1zKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBFZmZlY3RUeXBlLlRPR0dMRV9TRUxFQ1RfT05fQ09OVEVOVDpcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5jb25uPy5hcGkudG9nZ2xlU2VsZWN0KGZ4LmVuYWJsZWQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEVmZmVjdFR5cGUuQ0xFQVJfQ09OVEVOVDpcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5jb25uPy5hcGkuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBFZmZlY3RUeXBlLkhPVkVSOlxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmNvbm4/LmFwaS5ob3ZlcihmeC5pZCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgRWZmZWN0VHlwZS5DTEVBUl9TVEFURTpcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgc2NyZWVuU3RhdGVUYWJsZS5zZXQodGhpcy5tb2RlbC5wYWdlS2V5LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogdGhpcy5tb2RlbC5pdGVtcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRJZDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRTaXplOiB0aGlzLm1vZGVsLmRlZmF1bHRTaXplLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdENvbG9yOiB0aGlzLm1vZGVsLmRlZmF1bHRDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRTaGFwZTogdGhpcy5tb2RlbC5kZWZhdWx0U2hhcGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0TGFiZWxGb3JtYXQ6IHRoaXMubW9kZWwuZGVmYXVsdExhYmVsRm9ybWF0LFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZpc2libGU6IHRoaXMubW9kZWwuZGVmYXVsdFZpc2libGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UG9zaXRpb246IHRoaXMubW9kZWwuZGVmYXVsdFBvc2l0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdEdyb3VwOiB0aGlzLm1vZGVsLmRlZmF1bHRHcm91cCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgRWZmZWN0VHlwZS5QRVJTSVNUX1NUQVRFOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXYgPSBhd2FpdCBzY3JlZW5TdGF0ZVRhYmxlLmdldCh0aGlzLm1vZGVsLnBhZ2VLZXkpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBzY3JlZW5TdGF0ZVRhYmxlLnNldCh0aGlzLm1vZGVsLnBhZ2VLZXksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnByZXYsXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogdGhpcy5tb2RlbC5pdGVtcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRTaXplOiB0aGlzLm1vZGVsLmRlZmF1bHRTaXplLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdENvbG9yOiB0aGlzLm1vZGVsLmRlZmF1bHRDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRTaGFwZTogdGhpcy5tb2RlbC5kZWZhdWx0U2hhcGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0TGFiZWxGb3JtYXQ6IHRoaXMubW9kZWwuZGVmYXVsdExhYmVsRm9ybWF0LFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZpc2libGU6IHRoaXMubW9kZWwuZGVmYXVsdFZpc2libGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UG9zaXRpb246IHRoaXMubW9kZWwuZGVmYXVsdFBvc2l0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdEdyb3VwOiB0aGlzLm1vZGVsLmRlZmF1bHRHcm91cCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIEVmZmVjdFR5cGUuU0VUX1RIRU1FOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRoZW1lID0gYXdhaXQgdGhlbWVUYWJsZS5nZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGUuU0VUX1RIRU1FLCB0aGVtZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgRWZmZWN0VHlwZS5VUERBVEVfVEhFTUU6XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoZW1lVGFibGUuc2V0KGZ4LnRoZW1lKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBFZmZlY3RUeXBlLlJFQURfU0NSRUVOX1NUQVRFX1NUT1JFOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNjcmVlblN0YXRlcyA9IGF3YWl0IHNjcmVlblN0YXRlVGFibGUucmVhZEFsbCgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYWdlS2V5cyA9IE9iamVjdC5rZXlzKHNjcmVlblN0YXRlcyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogQWN0aW9uVHlwZS5TVE9SRV9SRUxPQURfU1VDQ0VFREVELFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFnZUtleXMsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBFZmZlY3RUeXBlLklNUE9SVF9TQ1JFQU5fU1RBVEVfRklMRToge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBzdGF0ZSwgc3VjY2Vzc01lc3NhZ2UgfSA9IGF3YWl0IGltcG9ydFNjcmVhblN0YXRlKGZ4LmZpbGUsIHRoaXMubW9kZWwucGFnZUtleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBBY3Rpb25UeXBlLlJFU1RPUkVfU1RBVEUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6IHN0YXRlLml0ZW1zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0U2l6ZTogc3RhdGUuZGVmYXVsdFNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRDb2xvcjogc3RhdGUuZGVmYXVsdENvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0U2hhcGU6IHN0YXRlLmRlZmF1bHRTaGFwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdExhYmVsRm9ybWF0OiBzdGF0ZS5kZWZhdWx0TGFiZWxGb3JtYXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWaXNpYmxlOiBzdGF0ZS5kZWZhdWx0VmlzaWJsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFBvc2l0aW9uOiBzdGF0ZS5kZWZhdWx0UG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRHcm91cDogc3RhdGUuZGVmYXVsdEdyb3VwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXVpZDogY3J5cHRvLnJhbmRvbVVVSUQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBzdWNjZXNzTWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBraW5kOiAnc3VjY2VzcycsXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogQWN0aW9uVHlwZS5JTVBPUlRfU1VDQ0VFREVELFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0TWVzc2FnZXM6IFttZXNzYWdlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV1aWQ6IGNyeXB0by5yYW5kb21VVUlEKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBraW5kOiAnZXJyb3InLFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IEFjdGlvblR5cGUuSU1QT1JUX0ZBSUxFRCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdE1lc3NhZ2VzOiBbbWVzc2FnZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBFZmZlY3RUeXBlLlJFTU9WRV9TQ1JFRU5fU1RBVEVfU1RPUkVfQllfUEFHRV9LRVk6IHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgc2NyZWVuU3RhdGVUYWJsZS5yZW1vdmUoZngucGFnZUtleSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNjcmVlblN0YXRlcyA9IGF3YWl0IHNjcmVlblN0YXRlVGFibGUucmVhZEFsbCgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYWdlS2V5cyA9IE9iamVjdC5rZXlzKHNjcmVlblN0YXRlcyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogQWN0aW9uVHlwZS5TVE9SRV9SRUxPQURfU1VDQ0VFREVELFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFnZUtleXMsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdCA9IGF3YWl0IHNjcmVlblN0YXRlVGFibGUuZ2V0KHRoaXMubW9kZWwucGFnZUtleSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogQWN0aW9uVHlwZS5SRVNUT1JFX1NUQVRFLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogc3QuaXRlbXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFNpemU6IHN0LmRlZmF1bHRTaXplLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRDb2xvcjogc3QuZGVmYXVsdENvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRTaGFwZTogc3QuZGVmYXVsdFNoYXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRMYWJlbEZvcm1hdDogc3QuZGVmYXVsdExhYmVsRm9ybWF0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWaXNpYmxlOiBzdC5kZWZhdWx0VmlzaWJsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UG9zaXRpb246IHN0LmRlZmF1bHRQb3NpdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0R3JvdXA6IHN0LmRlZmF1bHRHcm91cCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBFZmZlY3RUeXBlLkVYUE9SVF9TQ1JFRU5fU1RBVEVfQllfUEFHRV9LRVk6IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gYXdhaXQgc2NyZWVuU3RhdGVUYWJsZS5nZXQoZngucGFnZUtleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBleHBvcnRTY3JlZW5TdGF0ZShzdGF0ZSwgZngucGFnZUtleSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZS5FWFBPUlRfRkFJTEVELCBlcnJvciB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBFZmZlY3RUeXBlLk1FQVNVUkVfQ09OVEVOVF9TSVpFOlxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmNvbm4/LmFwaS5tZWFzdXJlU2l6ZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEVmZmVjdFR5cGUuQ0FQVFVSRTpcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGNhcHR1cmUoZngucGF5bG9hZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZS5DQVBUVVJFX1NVQ0NFRURFRCB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGUuQ0FQVFVSRV9GQUlMRUQsIGVycm9yOiBlIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgRWZmZWN0VHlwZS5OT1RJRllfRVJST1I6XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZnguZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBlbnN1cmVDb25uZWN0aW9uQWxpdmUob3B0cykge1xuICAgICAgICBjb25zdCBwcmV2S2V5ID0gdGhpcy5tb2RlbC5wYWdlS2V5O1xuICAgICAgICBjb25zdCBmb3JjZSA9IG9wdHM/LmZvcmNlUmVjb25uZWN0ID09PSB0cnVlO1xuICAgICAgICBpZiAoIWZvcmNlKSB7XG4gICAgICAgICAgICBjb25zdCBwb25nID0gYXdhaXQgdGhpcy5jb25uPy5hcGkucGluZygpO1xuICAgICAgICAgICAgaWYgKHBvbmcgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICByZXR1cm4geyBvazogdHJ1ZSwgY29udGV4dENoYW5nZWQ6IGZhbHNlIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGFiID0gYXdhaXQgZ2V0QWN0aXZlVGFiKCk7XG4gICAgICAgIGlmICghdGFiPy5pZCB8fCBpc1Jlc3RyaWN0ZWQodGFiLnVybCkpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlLlNFVF9TVEFUVVMsIHN0YXR1czogU1RBVFVTLlJFU1RSSUNURUQgfSk7XG4gICAgICAgICAgICByZXR1cm4geyBvazogZmFsc2UgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdLZXkgPSBwYWdlS2V5KHRhYi51cmwpO1xuICAgICAgICBjb25zdCB0YWJJZCA9IHRhYi5pZDtcbiAgICAgICAgdGhpcy5kaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGUuQ09OTkVDVEVELCB0YWJJZCwgcGFnZUtleTogbmV3S2V5IH0pO1xuICAgICAgICB0aGlzLmRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZS5TRVRfU1RBVFVTLCBzdGF0dXM6IFNUQVRVUy5DT05ORUNUSU5HIH0pO1xuICAgICAgICAvLyBFeHBsaWNpdGx5IGNsb3NlIHRoZSBvbGQgcG9ydFxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5jb25uPy5wb3J0LmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICAvKiBuby1vcCAqL1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29ubiA9IGF3YWl0IGNvbm5lY3RUb1RhYih0YWJJZCk7XG4gICAgICAgIHRoaXMuY29ubi5vbkRpc2Nvbm5lY3QoKCkgPT4gdGhpcy5kaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGUuUE9SVF9ESVNDT05ORUNURUQgfSkpO1xuICAgICAgICB0aGlzLmNvbm4ucG9ydC5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoYXN5bmMgKG1zZykgPT4ge1xuICAgICAgICAgICAgaWYgKG1zZz8udHlwZSA9PT0gTVNHX1RZUEUuU0VMRUNURUQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gYXdhaXQgaGFuZGxlU2VsZWN0ZWQodGhpcy5tb2RlbC5wYWdlS2V5LCBtc2cucGF5bG9hZC5hbmNob3JzKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogQWN0aW9uVHlwZS5SRVNUT1JFX1NUQVRFLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6IHMuaXRlbXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0U2l6ZTogcy5kZWZhdWx0U2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRDb2xvcjogcy5kZWZhdWx0Q29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0U2hhcGU6IHMuZGVmYXVsdFNoYXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdExhYmVsRm9ybWF0OiBzLmRlZmF1bHRMYWJlbEZvcm1hdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWaXNpYmxlOiBzLmRlZmF1bHRWaXNpYmxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFBvc2l0aW9uOiBzLmRlZmF1bHRQb3NpdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRHcm91cDogcy5kZWZhdWx0R3JvdXAsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChtc2c/LnR5cGUgPT09IE1TR19UWVBFLk1JU1NJTkdfSURTKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IEFjdGlvblR5cGUuU0VUX01JU1NJTkdfSURTLFxuICAgICAgICAgICAgICAgICAgICBtaXNzaW5nSWRzOiBtc2cucGF5bG9hZC5taXNzaW5nSWRzLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobXNnPy50eXBlID09PSBNU0dfVFlQRS5DT05URU5UX1NJWkVfUkVTVUxUKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IEFjdGlvblR5cGUuQ0FQVFVSRV9SRVFVRVNURUQsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRTaXplOiBtc2cucGF5bG9hZCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHN0ID0gYXdhaXQgc2NyZWVuU3RhdGVUYWJsZS5nZXQobmV3S2V5KTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICB0eXBlOiBBY3Rpb25UeXBlLlJFU1RPUkVfU1RBVEUsXG4gICAgICAgICAgICBzdGF0ZToge1xuICAgICAgICAgICAgICAgIGl0ZW1zOiBzdC5pdGVtcyxcbiAgICAgICAgICAgICAgICBkZWZhdWx0U2l6ZTogc3QuZGVmYXVsdFNpemUsXG4gICAgICAgICAgICAgICAgZGVmYXVsdENvbG9yOiBzdC5kZWZhdWx0Q29sb3IsXG4gICAgICAgICAgICAgICAgZGVmYXVsdFNoYXBlOiBzdC5kZWZhdWx0U2hhcGUsXG4gICAgICAgICAgICAgICAgZGVmYXVsdExhYmVsRm9ybWF0OiBzdC5kZWZhdWx0TGFiZWxGb3JtYXQsXG4gICAgICAgICAgICAgICAgZGVmYXVsdFZpc2libGU6IHN0LmRlZmF1bHRWaXNpYmxlLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRQb3NpdGlvbjogc3QuZGVmYXVsdFBvc2l0aW9uLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRHcm91cDogc3QuZGVmYXVsdEdyb3VwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlLlNFVF9TVEFUVVMsIHN0YXR1czogU1RBVFVTLkNPTk5FQ1RFRCB9KTtcbiAgICAgICAgY29uc3QgY29udGV4dENoYW5nZWQgPSAhIXByZXZLZXkgJiYgcHJldktleSAhPT0gbmV3S2V5O1xuICAgICAgICByZXR1cm4geyBvazogdHJ1ZSwgY29udGV4dENoYW5nZWQgfTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBVTkdST1VQRURfVkFMVUUgfSBmcm9tICdAY29tbW9uL3R5cGVzJztcbmltcG9ydCB7IG5vcm1hbGl6ZUdyb3VwTGFiZWxzQW5kQ291bnRVbmdyb3VwZWQgfSBmcm9tICdAcGFuZWwvc2VydmljZXMvc3RhdGUnO1xuaW1wb3J0IHsgU1RBVFVTIH0gZnJvbSAnQHBhbmVsL3R5cGVzL3N0YXR1cyc7XG5pbXBvcnQgeyBBY3Rpb25UeXBlIH0gZnJvbSAnLi4vdHlwZXMvYWN0aW9uX3R5cGVzJztcbmltcG9ydCB7IEVmZmVjdFR5cGUgfSBmcm9tICcuLi90eXBlcy9lZmZlY3RfdHlwZXMnO1xuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZShtb2RlbCwgYWN0aW9uKSB7XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlIEFjdGlvblR5cGUuSU5JVDpcbiAgICAgICAgICAgIHJldHVybiB7IG1vZGVsLCBlZmZlY3RzOiBbeyBraW5kOiBFZmZlY3RUeXBlLlNFVF9USEVNRSB9XSB9O1xuICAgICAgICBjYXNlIEFjdGlvblR5cGUuQ09OTkVDVEVEOlxuICAgICAgICAgICAgcmV0dXJuIHsgbW9kZWw6IHsgLi4ubW9kZWwsIHRhYklkOiBhY3Rpb24udGFiSWQsIHBhZ2VLZXk6IGFjdGlvbi5wYWdlS2V5IH0sIGVmZmVjdHM6IFtdIH07XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5TRVRfU1RBVFVTOiB7XG4gICAgICAgICAgICBpZiAoYWN0aW9uLnN0YXR1cyA9PT0gU1RBVFVTLkNPTk5FQ1RFRCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IG1vZGVsOiB7IC4uLm1vZGVsLCBzdGF0dXM6IGFjdGlvbi5zdGF0dXMgfSwgZWZmZWN0czogW10gfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IG1vZGVsOiB7IC4uLm1vZGVsLCBpdGVtczogW10sIHN0YXR1czogYWN0aW9uLnN0YXR1cyB9LCBlZmZlY3RzOiBbXSB9O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5SRVNUT1JFX1NUQVRFOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtb2RlbDoge1xuICAgICAgICAgICAgICAgICAgICAuLi5tb2RlbCxcbiAgICAgICAgICAgICAgICAgICAgaXRlbXM6IGFjdGlvbi5zdGF0ZS5pdGVtcyxcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFNpemU6IGFjdGlvbi5zdGF0ZS5kZWZhdWx0U2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdENvbG9yOiBhY3Rpb24uc3RhdGUuZGVmYXVsdENvbG9yLFxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0U2hhcGU6IGFjdGlvbi5zdGF0ZS5kZWZhdWx0U2hhcGUsXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRMYWJlbEZvcm1hdDogYWN0aW9uLnN0YXRlLmRlZmF1bHRMYWJlbEZvcm1hdCxcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZpc2libGU6IGFjdGlvbi5zdGF0ZS5kZWZhdWx0VmlzaWJsZSxcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFBvc2l0aW9uOiBhY3Rpb24uc3RhdGUuZGVmYXVsdFBvc2l0aW9uLFxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0R3JvdXA6IGFjdGlvbi5zdGF0ZS5kZWZhdWx0R3JvdXAsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlZmZlY3RzOiBbeyBraW5kOiBFZmZlY3RUeXBlLlJFTkRFUl9DT05URU5ULCBpdGVtczogYWN0aW9uLnN0YXRlLml0ZW1zIH1dLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLlNFVF9NSVNTSU5HX0lEUzpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbW9kZWw6IHsgLi4ubW9kZWwsIG1pc3NpbmdJZHM6IGFjdGlvbi5taXNzaW5nSWRzIH0sXG4gICAgICAgICAgICAgICAgZWZmZWN0czogW10sXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIEFjdGlvblR5cGUuVE9HR0xFX1NFTEVDVDoge1xuICAgICAgICAgICAgY29uc3QgbmV4dCA9ICFtb2RlbC5zZWxlY3Rpb25FbmFibGVkO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtb2RlbDogeyAuLi5tb2RlbCwgc2VsZWN0aW9uRW5hYmxlZDogbmV4dCB9LFxuICAgICAgICAgICAgICAgIGVmZmVjdHM6IFt7IGtpbmQ6IEVmZmVjdFR5cGUuVE9HR0xFX1NFTEVDVF9PTl9DT05URU5ULCBlbmFibGVkOiBuZXh0IH1dLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIEFjdGlvblR5cGUuQ0xFQVJfQUxMOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtb2RlbDogeyAuLi5tb2RlbCwgaXRlbXM6IFtdIH0sXG4gICAgICAgICAgICAgICAgZWZmZWN0czogW3sga2luZDogRWZmZWN0VHlwZS5DTEVBUl9DT05URU5UIH0sIHsga2luZDogRWZmZWN0VHlwZS5DTEVBUl9TVEFURSB9XSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5DT05URU5UX1NFTEVDVEVEOlxuICAgICAgICAgICAgcmV0dXJuIHsgbW9kZWwsIGVmZmVjdHM6IFtdIH07XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5UT0dHTEVfQ0FQVFVSRV9QQU5FTDpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbW9kZWw6IHtcbiAgICAgICAgICAgICAgICAgICAgLi4ubW9kZWwsXG4gICAgICAgICAgICAgICAgICAgIGNhcHR1cmU6IHsgLi4ubW9kZWwuY2FwdHVyZSwgcGFuZWxFeHBhbmRlZDogIW1vZGVsLmNhcHR1cmUucGFuZWxFeHBhbmRlZCB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZWZmZWN0czogW10sXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIEFjdGlvblR5cGUuU0VUX0JBREdFX1NJWkU6IHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gbW9kZWwuaXRlbXMubWFwKChpdCkgPT4gKHtcbiAgICAgICAgICAgICAgICAuLi5pdCxcbiAgICAgICAgICAgICAgICAuLi4obW9kZWwuc2VsZWN0SXRlbXMuaW5jbHVkZXMoaXQuaWQpID8geyBzaXplOiBhY3Rpb24uc2l6ZSB9IDoge30pLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtb2RlbDogeyAuLi5tb2RlbCwgZGVmYXVsdFNpemU6IGFjdGlvbi5zaXplLCBpdGVtcyB9LFxuICAgICAgICAgICAgICAgIGVmZmVjdHM6IFt7IGtpbmQ6IEVmZmVjdFR5cGUuUEVSU0lTVF9TVEFURSB9LCB7IGtpbmQ6IEVmZmVjdFR5cGUuUkVOREVSX0NPTlRFTlQsIGl0ZW1zIH1dLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIEFjdGlvblR5cGUuU0VUX0JBREdFX0NPTE9SOiB7XG4gICAgICAgICAgICBjb25zdCBpdGVtcyA9IG1vZGVsLml0ZW1zLm1hcCgoaXQpID0+ICh7XG4gICAgICAgICAgICAgICAgLi4uaXQsXG4gICAgICAgICAgICAgICAgLi4uKG1vZGVsLnNlbGVjdEl0ZW1zLmluY2x1ZGVzKGl0LmlkKSA/IHsgY29sb3I6IGFjdGlvbi5jb2xvciB9IDoge30pLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtb2RlbDogeyAuLi5tb2RlbCwgZGVmYXVsdENvbG9yOiBhY3Rpb24uY29sb3IsIGl0ZW1zIH0sXG4gICAgICAgICAgICAgICAgZWZmZWN0czogW3sga2luZDogRWZmZWN0VHlwZS5QRVJTSVNUX1NUQVRFIH0sIHsga2luZDogRWZmZWN0VHlwZS5SRU5ERVJfQ09OVEVOVCwgaXRlbXMgfV0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5TRVRfQkFER0VfU0hBUEU6IHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gbW9kZWwuaXRlbXMubWFwKChpdCkgPT4gKHtcbiAgICAgICAgICAgICAgICAuLi5pdCxcbiAgICAgICAgICAgICAgICAuLi4obW9kZWwuc2VsZWN0SXRlbXMuaW5jbHVkZXMoaXQuaWQpID8geyBzaGFwZTogYWN0aW9uLnNoYXBlIH0gOiB7fSksXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1vZGVsOiB7IC4uLm1vZGVsLCBkZWZhdWx0U2hhcGU6IGFjdGlvbi5zaGFwZSwgaXRlbXMgfSxcbiAgICAgICAgICAgICAgICBlZmZlY3RzOiBbeyBraW5kOiBFZmZlY3RUeXBlLlBFUlNJU1RfU1RBVEUgfSwgeyBraW5kOiBFZmZlY3RUeXBlLlJFTkRFUl9DT05URU5ULCBpdGVtcyB9XSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLlNFVF9CQURHRV9MQUJFTF9GT1JNQVQ6IHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gbW9kZWwuaXRlbXMubWFwKChpdCkgPT4gKHtcbiAgICAgICAgICAgICAgICAuLi5pdCxcbiAgICAgICAgICAgICAgICAuLi4obW9kZWwuc2VsZWN0SXRlbXMuaW5jbHVkZXMoaXQuaWQpID8geyBsYWJlbEZvcm1hdDogYWN0aW9uLmxhYmVsRm9ybWF0IH0gOiB7fSksXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1vZGVsOiB7IC4uLm1vZGVsLCBkZWZhdWx0TGFiZWxGb3JtYXQ6IGFjdGlvbi5sYWJlbEZvcm1hdCwgaXRlbXMgfSxcbiAgICAgICAgICAgICAgICBlZmZlY3RzOiBbeyBraW5kOiBFZmZlY3RUeXBlLlBFUlNJU1RfU1RBVEUgfSwgeyBraW5kOiBFZmZlY3RUeXBlLlJFTkRFUl9DT05URU5ULCBpdGVtcyB9XSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLlNFVF9CQURHRV9WSVNJQkxFOiB7XG4gICAgICAgICAgICBjb25zdCBpdGVtcyA9IG1vZGVsLml0ZW1zLm1hcCgoaXQpID0+ICh7XG4gICAgICAgICAgICAgICAgLi4uaXQsXG4gICAgICAgICAgICAgICAgLi4uKG1vZGVsLnNlbGVjdEl0ZW1zLmluY2x1ZGVzKGl0LmlkKSA/IHsgdmlzaWJsZTogYWN0aW9uLnZpc2libGUgfSA6IHt9KSxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbW9kZWw6IHsgLi4ubW9kZWwsIGRlZmF1bHRWaXNpYmxlOiBhY3Rpb24udmlzaWJsZSwgaXRlbXMgfSxcbiAgICAgICAgICAgICAgICBlZmZlY3RzOiBbeyBraW5kOiBFZmZlY3RUeXBlLlBFUlNJU1RfU1RBVEUgfSwgeyBraW5kOiBFZmZlY3RUeXBlLlJFTkRFUl9DT05URU5ULCBpdGVtcyB9XSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLkJBREdFX0RFTEVURToge1xuICAgICAgICAgICAgY29uc3QgaXRlbXNNYXJrZWRGb3JSZWxhYmVsID0gbW9kZWwuaXRlbXMuZmlsdGVyKChpdCkgPT4gIW1vZGVsLnNlbGVjdEl0ZW1zLmluY2x1ZGVzKGl0LmlkKSk7XG4gICAgICAgICAgICBjb25zdCBpdGVtcyA9IG5vcm1hbGl6ZUdyb3VwTGFiZWxzQW5kQ291bnRVbmdyb3VwZWQoaXRlbXNNYXJrZWRGb3JSZWxhYmVsKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbW9kZWw6IHsgLi4ubW9kZWwsIGl0ZW1zIH0sXG4gICAgICAgICAgICAgICAgZWZmZWN0czogW3sga2luZDogRWZmZWN0VHlwZS5QRVJTSVNUX1NUQVRFIH0sIHsga2luZDogRWZmZWN0VHlwZS5SRU5ERVJfQ09OVEVOVCwgaXRlbXMgfV0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5TRVRfQkFER0VfUE9TSVRJT046IHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gbW9kZWwuaXRlbXMubWFwKChpdCkgPT4gKHtcbiAgICAgICAgICAgICAgICAuLi5pdCxcbiAgICAgICAgICAgICAgICAuLi4obW9kZWwuc2VsZWN0SXRlbXMuaW5jbHVkZXMoaXQuaWQpID8geyBwb3NpdGlvbjogYWN0aW9uLnBvc2l0aW9uIH0gOiB7fSksXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1vZGVsOiB7IC4uLm1vZGVsLCBkZWZhdWx0UG9zaXRpb246IGFjdGlvbi5wb3NpdGlvbiwgaXRlbXMgfSxcbiAgICAgICAgICAgICAgICBlZmZlY3RzOiBbeyBraW5kOiBFZmZlY3RUeXBlLlBFUlNJU1RfU1RBVEUgfSwgeyBraW5kOiBFZmZlY3RUeXBlLlJFTkRFUl9DT05URU5ULCBpdGVtcyB9XSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLlNFVF9HUk9VUDoge1xuICAgICAgICAgICAgY29uc3QgaXRlbXNNYXJrZWRGb3JSZWxhYmVsID0gdXBkYXRlR3JvdXBBbmREZWZlclJlbGFiZWwobW9kZWwuaXRlbXMsIG1vZGVsLnNlbGVjdEl0ZW1zLCBhY3Rpb24uZ3JvdXApO1xuICAgICAgICAgICAgY29uc3QgaXRlbXMgPSBub3JtYWxpemVHcm91cExhYmVsc0FuZENvdW50VW5ncm91cGVkKGl0ZW1zTWFya2VkRm9yUmVsYWJlbCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1vZGVsOiB7IC4uLm1vZGVsLCBkZWZhdWx0R3JvdXA6IGFjdGlvbi5ncm91cCwgaXRlbXMgfSxcbiAgICAgICAgICAgICAgICBlZmZlY3RzOiBbeyBraW5kOiBFZmZlY3RUeXBlLlBFUlNJU1RfU1RBVEUgfSwgeyBraW5kOiBFZmZlY3RUeXBlLlJFTkRFUl9DT05URU5ULCBpdGVtcyB9XSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLlNFVF9DQVBUVVJFX0ZPUk1BVDpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbW9kZWw6IHsgLi4ubW9kZWwsIGNhcHR1cmU6IHsgLi4ubW9kZWwuY2FwdHVyZSwgZm9ybWF0OiBhY3Rpb24uZm9ybWF0IH0gfSxcbiAgICAgICAgICAgICAgICBlZmZlY3RzOiBbXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5TRVRfQ0FQVFVSRV9BUkVBOlxuICAgICAgICAgICAgcmV0dXJuIHsgbW9kZWw6IHsgLi4ubW9kZWwsIGNhcHR1cmU6IHsgLi4ubW9kZWwuY2FwdHVyZSwgYXJlYTogYWN0aW9uLmFyZWEgfSB9LCBlZmZlY3RzOiBbXSB9O1xuICAgICAgICBjYXNlIEFjdGlvblR5cGUuU0VUX0NBUFRVUkVfUVVBTElUWTpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbW9kZWw6IHsgLi4ubW9kZWwsIGNhcHR1cmU6IHsgLi4ubW9kZWwuY2FwdHVyZSwgcXVhbGl0eTogYWN0aW9uLnF1YWxpdHkgfSB9LFxuICAgICAgICAgICAgICAgIGVmZmVjdHM6IFtdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLlNFVF9DQVBUVVJFX1NDQUxFOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtb2RlbDogeyAuLi5tb2RlbCwgY2FwdHVyZTogeyAuLi5tb2RlbC5jYXB0dXJlLCBzY2FsZTogYWN0aW9uLnNjYWxlIH0gfSxcbiAgICAgICAgICAgICAgICBlZmZlY3RzOiBbXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5NRUFTVVJFX0NPTlRFTlRfU0laRTpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbW9kZWwsXG4gICAgICAgICAgICAgICAgZWZmZWN0czogW3sga2luZDogRWZmZWN0VHlwZS5NRUFTVVJFX0NPTlRFTlRfU0laRSB9XSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5DQVBUVVJFX1JFUVVFU1RFRDoge1xuICAgICAgICAgICAgaWYgKG1vZGVsLnRhYklkID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBtb2RlbCwgZWZmZWN0czogW3sga2luZDogRWZmZWN0VHlwZS5OT1RJRllfRVJST1IsIGVycm9yOiAnTm8gdGFiSWQnIH1dIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1vZGVsLFxuICAgICAgICAgICAgICAgIGVmZmVjdHM6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAga2luZDogRWZmZWN0VHlwZS5DQVBUVVJFLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYklkOiBtb2RlbC50YWJJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IG1vZGVsLmNhcHR1cmUuZm9ybWF0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZWE6IG1vZGVsLmNhcHR1cmUuYXJlYSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWFsaXR5OiBtb2RlbC5jYXB0dXJlLnF1YWxpdHksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGU6IG1vZGVsLmNhcHR1cmUuc2NhbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudFNpemU6IGFjdGlvbi5jb250ZW50U2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLkNBUFRVUkVfU1VDQ0VFREVEOlxuICAgICAgICAgICAgcmV0dXJuIHsgbW9kZWwsIGVmZmVjdHM6IFtdIH07XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5DQVBUVVJFX0ZBSUxFRDpcbiAgICAgICAgICAgIHJldHVybiB7IG1vZGVsLCBlZmZlY3RzOiBbeyBraW5kOiBFZmZlY3RUeXBlLk5PVElGWV9FUlJPUiwgZXJyb3I6IGFjdGlvbi5lcnJvciB9XSB9O1xuICAgICAgICBjYXNlIEFjdGlvblR5cGUuUkVPUkRFUl9JVEVNUzoge1xuICAgICAgICAgICAgY29uc3QgaXRlbXNNYXJrZWRGb3JSZWxhYmVsID0gcmVvcmRlckl0ZW1MYWJlbChtb2RlbC5pdGVtcywgYWN0aW9uLmZyb21JZCwgYWN0aW9uLmZyb21JbmRleCwgYWN0aW9uLnRvSW5kZXgpO1xuICAgICAgICAgICAgY29uc3QgaXRlbXMgPSBub3JtYWxpemVHcm91cExhYmVsc0FuZENvdW50VW5ncm91cGVkKGl0ZW1zTWFya2VkRm9yUmVsYWJlbCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1vZGVsOiB7IC4uLm1vZGVsLCBpdGVtcyB9LFxuICAgICAgICAgICAgICAgIGVmZmVjdHM6IFt7IGtpbmQ6IEVmZmVjdFR5cGUuUEVSU0lTVF9TVEFURSB9LCB7IGtpbmQ6IEVmZmVjdFR5cGUuUkVOREVSX0NPTlRFTlQsIGl0ZW1zIH1dLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIEFjdGlvblR5cGUuSVRFTV9TRUxFQ1RJT05fQ0hBTkdFRDoge1xuICAgICAgICAgICAgaWYgKCdpZCcgaW4gYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgLy8gU2VsZWN0L2Rlc2VsZWN0IGEgc2luZ2xlIGl0ZW1cbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RJdGVtcyA9IGFwcGx5SXRlbVNlbGVjdGlvbkNoYW5nZWRCeUlkKGFjdGlvbi5pZCwgYWN0aW9uLmlzQ2hlY2ssIG1vZGVsLnNlbGVjdEl0ZW1zKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBtb2RlbDogeyAuLi5tb2RlbCwgc2VsZWN0SXRlbXMgfSxcbiAgICAgICAgICAgICAgICAgICAgZWZmZWN0czogW10sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCdncm91cCcgaW4gYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgLy8gU2VsZWN0L2Rlc2VsZWN0IGEgZ3JvdXBcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RJdGVtcyA9IGFwcGx5SXRlbVNlbGVjdGlvbkNoYW5nZWRGb3JHcm91cChhY3Rpb24uZ3JvdXAsIGFjdGlvbi5pc0NoZWNrLCBtb2RlbC5zZWxlY3RJdGVtcywgbW9kZWwuaXRlbXMpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIG1vZGVsOiB7IC4uLm1vZGVsLCBzZWxlY3RJdGVtcyB9LFxuICAgICAgICAgICAgICAgICAgICBlZmZlY3RzOiBbXSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gU2VsZWN0IGFsbC9EZXNlbGVjdCBhbGxcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RJdGVtcyA9IGFwcGx5SXRlbVNlbGVjdGlvbkNoYW5nZWRGb3JBbGwoYWN0aW9uLmFsbENoZWNrLCBtb2RlbC5pdGVtcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHsgLi4ubW9kZWwsIHNlbGVjdEl0ZW1zIH0sXG4gICAgICAgICAgICAgICAgICAgIGVmZmVjdHM6IFtdLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLklURU1fSE9WRVJfSU46XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1vZGVsLFxuICAgICAgICAgICAgICAgIGVmZmVjdHM6IFt7IGtpbmQ6IEVmZmVjdFR5cGUuSE9WRVIsIGlkOiBhY3Rpb24uaWQgfV0sXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIEFjdGlvblR5cGUuSVRFTV9IT1ZFUl9PVVQ6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1vZGVsLFxuICAgICAgICAgICAgICAgIGVmZmVjdHM6IFt7IGtpbmQ6IEVmZmVjdFR5cGUuSE9WRVIsIGlkOiBudWxsIH1dLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLlVQREFURV9JVEVNX0NPTU1FTlQ6IHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gbW9kZWwuaXRlbXMubWFwKChpdCkgPT4gKHtcbiAgICAgICAgICAgICAgICAuLi5pdCxcbiAgICAgICAgICAgICAgICAuLi4oaXQuaWQgPT09IGFjdGlvbi5pZCA/IHsgY29tbWVudDogYWN0aW9uLmNvbW1lbnQgfSA6IHt9KSxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbW9kZWw6IHsgLi4ubW9kZWwsIGl0ZW1zIH0sXG4gICAgICAgICAgICAgICAgZWZmZWN0czogW3sga2luZDogRWZmZWN0VHlwZS5QRVJTSVNUX1NUQVRFIH0sIHsga2luZDogRWZmZWN0VHlwZS5SRU5ERVJfQ09OVEVOVCwgaXRlbXMgfV0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5QT1JUX0RJU0NPTk5FQ1RFRDpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbW9kZWw6IHsgLi4ubW9kZWwsIHN0YXR1czogU1RBVFVTLkRJU0NPTk5FQ1RFRCwgc2VsZWN0aW9uRW5hYmxlZDogZmFsc2UgfSxcbiAgICAgICAgICAgICAgICBlZmZlY3RzOiBbeyBraW5kOiBFZmZlY3RUeXBlLlRPR0dMRV9TRUxFQ1RfT05fQ09OVEVOVCwgZW5hYmxlZDogZmFsc2UgfV0sXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIEFjdGlvblR5cGUuU0VUX1RIRU1FOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtb2RlbDogeyAuLi5tb2RlbCwgdGhlbWU6IGFjdGlvbi50aGVtZSB9LFxuICAgICAgICAgICAgICAgIGVmZmVjdHM6IFtdLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLlVQREFURV9USEVNRTpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbW9kZWw6IHsgLi4ubW9kZWwsIHRoZW1lOiBhY3Rpb24udGhlbWUgfSxcbiAgICAgICAgICAgICAgICBlZmZlY3RzOiBbeyBraW5kOiBFZmZlY3RUeXBlLlVQREFURV9USEVNRSwgdGhlbWU6IGFjdGlvbi50aGVtZSB9XSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5TVE9SRV9SRUxPQURfUkVRVUVTVEVEOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtb2RlbCxcbiAgICAgICAgICAgICAgICBlZmZlY3RzOiBbeyBraW5kOiBFZmZlY3RUeXBlLlJFQURfU0NSRUVOX1NUQVRFX1NUT1JFIH1dLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSBBY3Rpb25UeXBlLlNUT1JFX1JFTE9BRF9TVUNDRUVERUQ6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1vZGVsOiB7IC4uLm1vZGVsLCBwYWdlS2V5czogYWN0aW9uLnBhZ2VLZXlzIH0sXG4gICAgICAgICAgICAgICAgZWZmZWN0czogW10sXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIEFjdGlvblR5cGUuSU1QT1JUX1NDUkVBTl9TVEFURV9GSUxFOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtb2RlbCxcbiAgICAgICAgICAgICAgICBlZmZlY3RzOiBbeyBraW5kOiBFZmZlY3RUeXBlLklNUE9SVF9TQ1JFQU5fU1RBVEVfRklMRSwgZmlsZTogYWN0aW9uLmZpbGUgfV0sXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIEFjdGlvblR5cGUuSU1QT1JUX1NVQ0NFRURFRDpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbW9kZWw6IHsgLi4ubW9kZWwsIHRvYXN0TWVzc2FnZXM6IGFjdGlvbi50b2FzdE1lc3NhZ2VzIH0sXG4gICAgICAgICAgICAgICAgZWZmZWN0czogW10sXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIEFjdGlvblR5cGUuSU1QT1JUX0ZBSUxFRDpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbW9kZWw6IHsgLi4ubW9kZWwsIHRvYXN0TWVzc2FnZXM6IGFjdGlvbi50b2FzdE1lc3NhZ2VzIH0sXG4gICAgICAgICAgICAgICAgZWZmZWN0czogW10sXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIEFjdGlvblR5cGUuVE9BU1RfRElTTUlTU19SRVFVRVNURUQ6IHtcbiAgICAgICAgICAgIGNvbnN0IHRvYXN0TWVzc2FnZXMgPSBtb2RlbC50b2FzdE1lc3NhZ2VzLmZpbHRlcigodCkgPT4gdC51dWlkICE9PSBhY3Rpb24udXVpZCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1vZGVsOiB7IC4uLm1vZGVsLCB0b2FzdE1lc3NhZ2VzIH0sXG4gICAgICAgICAgICAgICAgZWZmZWN0czogW10sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5SRU1PVkVfU0NSRUVOX1NUQVRFX0JZX1BBR0U6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1vZGVsLFxuICAgICAgICAgICAgICAgIGVmZmVjdHM6IFtcbiAgICAgICAgICAgICAgICAgICAgeyBraW5kOiBFZmZlY3RUeXBlLlJFTU9WRV9TQ1JFRU5fU1RBVEVfU1RPUkVfQllfUEFHRV9LRVksIHBhZ2VLZXk6IGFjdGlvbi5wYWdlS2V5IH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgQWN0aW9uVHlwZS5FWFBPUlRfU0NSRUVOX1NUQVRFX0JZX1BBR0U6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1vZGVsLFxuICAgICAgICAgICAgICAgIGVmZmVjdHM6IFt7IGtpbmQ6IEVmZmVjdFR5cGUuRVhQT1JUX1NDUkVFTl9TVEFURV9CWV9QQUdFX0tFWSwgcGFnZUtleTogYWN0aW9uLnBhZ2VLZXkgfV0sXG4gICAgICAgICAgICB9O1xuICAgICAgICBjYXNlIEFjdGlvblR5cGUuRVhQT1JUX0ZBSUxFRDpcbiAgICAgICAgICAgIHJldHVybiB7IG1vZGVsLCBlZmZlY3RzOiBbeyBraW5kOiBFZmZlY3RUeXBlLk5PVElGWV9FUlJPUiwgZXJyb3I6IGFjdGlvbi5lcnJvciB9XSB9O1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHsgbW9kZWwsIGVmZmVjdHM6IFtdIH07XG4gICAgfVxufVxuLyoqXG4gKiBSZWxhYmVsIGl0ZW1zIGFzIGlmIHRoZSBpdGVtIHdpdGggYGZyb21JZGAgd2FzIG1vdmVkIHRvIHRoZSBwb3NpdGlvblxuICogd2hvc2UgbGFiZWwgZXF1YWxzIGBpdGVtc1t0b0luZGV4XS5sYWJlbGAuIExhYmVscyBvZiB0aGUgaXRlbXMgaW4gYmV0d2VlblxuICogYXJlIHNoaWZ0ZWQgYnkgwrExIHRvIGtlZXAgbGFiZWxzIHVuaXF1ZSBhbmQgY29udGlndW91cyAoaWYgdGhleSB3ZXJlKS5cbiAqXG4gKiBAcGFyYW0gaXRlbXMgICAtIFNvdXJjZSBpdGVtcyAobm90IG11dGF0ZWQpLlxuICogQHBhcmFtIGZyb21JZCAgLSBJRCBvZiB0aGUgaXRlbSB0byBtb3ZlLlxuICogQHBhcmFtIGZyb21JbmRleCAgLSBUaGUgY3VycmVudCBpbmRleCBvZiB0aGUgaXRlbSB0byBiZSBtb3ZlZC5cbiAqIEBwYXJhbSB0b0luZGV4IC0gVGFyZ2V0IGluZGV4IGluIGBpdGVtc2Agd2hvc2UgbGFiZWwgYmVjb21lcyB0aGUgbmV3IGxhYmVsLlxuICogQHJldHVybnMgQSBuZXcgYXJyYXkgd2l0aCB1cGRhdGVkIGxhYmVscy5cbiAqIEB0aHJvd3MgUmFuZ2VFcnJvciBpZiBgdG9JbmRleGAgaXMgb3V0IG9mIGJvdW5kcyBvciBFcnJvciBpZiBgZnJvbUlkYCBub3QgZm91bmQuXG4gKi9cbmZ1bmN0aW9uIHJlb3JkZXJJdGVtTGFiZWwoaXRlbXMsIGZyb21JZCwgZnJvbUluZGV4LCB0b0luZGV4KSB7XG4gICAgaWYgKHRvSW5kZXggPCAwIHx8IHRvSW5kZXggPj0gaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGB0b0luZGV4IG91dCBvZiByYW5nZTogJHt0b0luZGV4fWApO1xuICAgIH1cbiAgICBjb25zdCBmcm9tSWR4ID0gaXRlbXMuZmluZEluZGV4KChpKSA9PiBpLmlkID09PSBmcm9tSWQpO1xuICAgIGlmIChmcm9tSWR4ID09PSAtMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEl0ZW0gbm90IGZvdW5kIGZvciBpZD0ke2Zyb21JZH1gKTtcbiAgICB9XG4gICAgaWYgKHRvSW5kZXggPCAwIHx8IHRvSW5kZXggPj0gaXRlbXMuZmlsdGVyKChpdCkgPT4gaXQuZ3JvdXAgPT09IGl0ZW1zW2Zyb21JZHhdLmdyb3VwKS5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYHRvSW5kZXggb3V0IG9mIHJhbmdlOiAke3RvSW5kZXh9YCk7XG4gICAgfVxuICAgIGNvbnN0IE9GRlNFVF9BRlRFUiA9IDEuMTtcbiAgICBjb25zdCBPRkZTRVRfQkVGT1JFID0gMC4xO1xuICAgIGNvbnN0IG9mZnNldCA9IGZyb21JbmRleCA8IHRvSW5kZXggPyBPRkZTRVRfQUZURVIgOiBPRkZTRVRfQkVGT1JFO1xuICAgIGNvbnN0IGxhYmVsID0gdG9JbmRleCArIG9mZnNldDtcbiAgICByZXR1cm4gaXRlbXMubWFwKChpdCkgPT4gKGl0LmlkID09PSBmcm9tSWQgPyB7IC4uLml0LCBsYWJlbCB9IDogaXQpKTtcbn1cbi8qKlxuICogQnVtcHMgdGhlIGxhYmVsIG9mIHNlbGVjdGVkIGl0ZW1zIHRoYXQgYWxyZWFkeSBiZWxvbmcgdG8gdGhlIHRyaW1tZWQgdGFyZ2V0IGdyb3VwLCB3aGlsZSBkZWZlcnJpbmcgbGFiZWwgbm9ybWFsaXphdGlvbi5cbiAqXG4gKiBOb3Rlc1xuICogLSBUaGUgZnVuY3Rpb24gb25seSB0b3VjaGVzIGl0ZW1zIHdob3NlIGBpZGAgaXMgaW4gYHNlbGVjdEl0ZW1zYCBhbmQgd2hvc2UgY3VycmVudCBgZ3JvdXBgIG1hdGNoZXMgYG5leHRHcm91cFJhd2AgKGFmdGVyIHRyaW1taW5nKS5cbiAqIC0gTGFiZWxzIGFyZSByZWFzc2lnbmVkIHRvIGxhcmdlIGRlc2NlbmRpbmcgbnVtYmVycyBzbyB0aGF0IGByZWxhYmVsQ29uc2VjdXRpdmVQZXJHcm91cCgpYCBjYW4gbGF0ZXIgY29tcGFjdCB0aGVtLlxuICpcbiAqIEBwYXJhbSBpdGVtcyAtIEZ1bGwgbGlzdCBvZiBzY3JlZW4gaXRlbXMuXG4gKiBAcGFyYW0gc2VsZWN0SXRlbXMgLSBJRHMgb2YgdGhlIGl0ZW1zIHRoYXQgc2hvdWxkIHJlY2VpdmUgYSB0ZW1wb3JhcnkgbGFiZWwgYnVtcC5cbiAqIEBwYXJhbSBuZXh0R3JvdXBSYXcgLSBUYXJnZXQgZ3JvdXAgbmFtZTsgdHJpbW1lZCBiZWZvcmUgY29tcGFyaXNvbi5cbiAqIEByZXR1cm5zIEEgbmV3IGFycmF5IHdoZXJlIHRoZSBtYXRjaGluZyBpdGVtcyBnYWluIGEgdGVtcG9yYXJ5IGhpZ2gtcHJpb3JpdHkgbGFiZWw7IG90aGVyIGl0ZW1zIGFyZSB1bnRvdWNoZWQuXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZUdyb3VwQW5kRGVmZXJSZWxhYmVsKGl0ZW1zLCBzZWxlY3RJdGVtcywgbmV4dEdyb3VwUmF3KSB7XG4gICAgY29uc3Qgbm9ybWFsaXplID0gKGcpID0+IChnID8/ICcnKS50cmltKCk7XG4gICAgY29uc3QgbmV4dEdyb3VwID0gbm9ybWFsaXplKG5leHRHcm91cFJhdyk7XG4gICAgbGV0IHVwZGF0ZUl0ZW1DbnQgPSAwO1xuICAgIHJldHVybiBpdGVtc1xuICAgICAgICAuc29ydCgoYSwgYikgPT4gYi5pZCAtIGEuaWQpXG4gICAgICAgIC5tYXAoKGl0ZW0pID0+IHtcbiAgICAgICAgaWYgKHNlbGVjdEl0ZW1zLmluY2x1ZGVzKGl0ZW0uaWQpICYmIGl0ZW0uZ3JvdXAgIT09IG5leHRHcm91cCkge1xuICAgICAgICAgICAgY29uc3QgbGFiZWwgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiAtIHVwZGF0ZUl0ZW1DbnQrKztcbiAgICAgICAgICAgIHJldHVybiB7IC4uLml0ZW0sIGdyb3VwOiBuZXh0R3JvdXAsIGxhYmVsIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfSk7XG59XG5mdW5jdGlvbiBhcHBseUl0ZW1TZWxlY3Rpb25DaGFuZ2VkQnlJZChpZCwgaXNDaGVjaywgc2VsZWN0SXRlbXMpIHtcbiAgICBpZiAoaXNDaGVjaykge1xuICAgICAgICBpZiAoIXNlbGVjdEl0ZW1zLmluY2x1ZGVzKGlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIFsuLi5zZWxlY3RJdGVtcywgaWRdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzZWxlY3RJdGVtcy5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0gIT09IGlkKTtcbn1cbmZ1bmN0aW9uIGFwcGx5SXRlbVNlbGVjdGlvbkNoYW5nZWRGb3JHcm91cChncm91cCwgaXNDaGVjaywgc2VsZWN0SXRlbXMsIGl0ZW1zKSB7XG4gICAgY29uc3QgZyA9IGdyb3VwLnRyaW0oKTtcbiAgICBjb25zdCBncm91cElkcyA9IGl0ZW1zXG4gICAgICAgIC5maWx0ZXIoKGl0KSA9PiAoaXQuZ3JvdXAgPz8gVU5HUk9VUEVEX1ZBTFVFKS50cmltKCkgPT09IGcpXG4gICAgICAgIC5tYXAoKGl0KSA9PiBpdC5pZCk7XG4gICAgaWYgKGdyb3VwSWRzLmxlbmd0aCA9PT0gMClcbiAgICAgICAgcmV0dXJuIHNlbGVjdEl0ZW1zO1xuICAgIGlmIChpc0NoZWNrKSB7XG4gICAgICAgIGNvbnN0IHNldCA9IG5ldyBTZXQoc2VsZWN0SXRlbXMpO1xuICAgICAgICBmb3IgKGNvbnN0IGlkIG9mIGdyb3VwSWRzKVxuICAgICAgICAgICAgc2V0LmFkZChpZCk7XG4gICAgICAgIHJldHVybiBbLi4uc2V0XTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGdyb3VwU2V0ID0gbmV3IFNldChncm91cElkcyk7XG4gICAgICAgIHJldHVybiBzZWxlY3RJdGVtcy5maWx0ZXIoKGlkKSA9PiAhZ3JvdXBTZXQuaGFzKGlkKSk7XG4gICAgfVxufVxuZnVuY3Rpb24gYXBwbHlJdGVtU2VsZWN0aW9uQ2hhbmdlZEZvckFsbChhbGxDaGVjaywgaXRlbXMpIHtcbiAgICBpZiAoYWxsQ2hlY2spIHtcbiAgICAgICAgcmV0dXJuIGl0ZW1zLm1hcCgoaXQpID0+IGl0LmlkKTtcbiAgICB9XG4gICAgcmV0dXJuIFtdO1xufVxuIiwiaW1wb3J0IHsgTVNHX1RZUEUgfSBmcm9tICdAY29tbW9uL21lc3NhZ2VzJztcbmltcG9ydCB7IHBhZ2VLZXkgfSBmcm9tICdAY29tbW9uL3VybCc7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWN0aXZlVGFiKCkge1xuICAgIGNvbnN0IHRhYnMgPSBhd2FpdCBjaHJvbWUudGFicy5xdWVyeSh7IGFjdGl2ZTogdHJ1ZSwgY3VycmVudFdpbmRvdzogdHJ1ZSB9KTtcbiAgICByZXR1cm4gdGFic1swXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckFjdGl2ZVRhYkJyb2FkY2FzdCgpIHtcbiAgICAvLyBUYWIgc3dpdGNoaW5nXG4gICAgY29uc3Qgb25BY3RpdmF0ZWQgPSBhc3luYyAoeyB0YWJJZCwgd2luZG93SWQgfSkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgW3RhYl0gPSBhd2FpdCBjaHJvbWUudGFicy5xdWVyeSh7IGFjdGl2ZTogdHJ1ZSwgd2luZG93SWQgfSk7XG4gICAgICAgICAgICBjb25zdCB1cmwgPSB0YWI/LnVybDtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IHVybCA/IHBhZ2VLZXkodXJsKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGF3YWl0IGNocm9tZS5ydW50aW1lLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICB0eXBlOiBNU0dfVFlQRS5BQ1RJVkVfVEFCX0NIQU5HRUQsXG4gICAgICAgICAgICAgICAgcGF5bG9hZDogeyB0YWJJZCwgd2luZG93SWQsIHVybCwgcGFnZUtleToga2V5IH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICAvKiBuby1vcCAqL1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBSZWxvYWQvdHJhbnNpdGlvbiBkZXRlY3Rpb24gd2l0aGluIHRoZSBzYW1lIHRhYlxuICAgIGNvbnN0IG9uVXBkYXRlZCA9IGFzeW5jICh0YWJJZCwgaW5mbywgdGFiKSA9PiB7XG4gICAgICAgIGlmICghdGFiPy5hY3RpdmUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChpbmZvLnN0YXR1cyA9PT0gJ2xvYWRpbmcnIHx8IHR5cGVvZiBpbmZvLnVybCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdXJsID0gdGFiLnVybDtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSB1cmwgPyBwYWdlS2V5KHVybCkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgYXdhaXQgY2hyb21lLnJ1bnRpbWUuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBNU0dfVFlQRS5BQ1RJVkVfVEFCX0NIQU5HRUQsXG4gICAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IHsgdGFiSWQsIHdpbmRvd0lkOiB0YWIud2luZG93SWQsIHVybCwgcGFnZUtleToga2V5IH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICAgICAgLyogbm8tb3AgKi9cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgY2hyb21lLnRhYnMub25BY3RpdmF0ZWQuYWRkTGlzdGVuZXIob25BY3RpdmF0ZWQpO1xuICAgIGNocm9tZS50YWJzLm9uVXBkYXRlZC5hZGRMaXN0ZW5lcihvblVwZGF0ZWQpO1xufVxuIiwiaW1wb3J0IHsgQ0hBTk5FTCB9IGZyb20gJ0Bjb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IFBhbmVsQXBpIH0gZnJvbSAnLi9hcGknO1xuaW1wb3J0IHsgUG9ydFJwYyB9IGZyb20gJy4vcG9ydF9ycGMnO1xuLyoqXG4gKiBJbmplY3RzIHRoZSBjb250ZW50IHNjcmlwdCBpbnRvIHRoZSB0YWIgaWYgbmVlZGVkLCBhbmRcbiAqIGluaXRpYWxpemVzIHRoZSBQb3J0IGNvbm5lY3Rpb24gYW5kIFJQQyBmb3IgUGFuZWwg4oaUIENvbnRlbnQuXG4gKlxuICogQHBhcmFtIHRhYklkIC0gVGFyZ2V0IHRhYiBpZFxuICogQHJldHVybnMgQSBjb25uZWN0aW9uIG9iamVjdCBidW5kbGluZyBBUEksIFBvcnQsIGFuZCBSUENcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbm5lY3RUb1RhYih0YWJJZCkge1xuICAgIGF3YWl0IGNocm9tZS5zY3JpcHRpbmdcbiAgICAgICAgLmV4ZWN1dGVTY3JpcHQoe1xuICAgICAgICB0YXJnZXQ6IHsgdGFiSWQgfSxcbiAgICAgICAgZmlsZXM6IFsnY29udGVudC9tYWluLmpzJ10sXG4gICAgfSlcbiAgICAgICAgLmNhdGNoKCgpID0+IHtcbiAgICAgICAgLyogSWdub3JlIGlmIGFscmVhZHkgaW5qZWN0ZWQgKi9cbiAgICB9KTtcbiAgICBjb25zdCBwb3J0ID0gY2hyb21lLnRhYnMuY29ubmVjdCh0YWJJZCwgeyBuYW1lOiBDSEFOTkVMLlBBTkVMX0NPTlRFTlQgfSk7XG4gICAgY29uc3QgcnBjID0gbmV3IFBvcnRScGMocG9ydCk7XG4gICAgY29uc3QgYXBpID0gbmV3IFBhbmVsQXBpKHJwYyk7XG4gICAgY29uc3QgbGlzdGVuZXJzID0gW107XG4gICAgcG9ydC5vbkRpc2Nvbm5lY3QuYWRkTGlzdGVuZXIoKCkgPT4gbGlzdGVuZXJzLmZvckVhY2goKGZuKSA9PiBmbigpKSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYXBpLFxuICAgICAgICBwb3J0LFxuICAgICAgICBycGMsXG4gICAgICAgIG9uRGlzY29ubmVjdDogKGNiKSA9PiBsaXN0ZW5lcnMucHVzaChjYiksXG4gICAgICAgIGRpc3Bvc2U6ICgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcG9ydC5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICAgICAgLyogbm8tb3AgKi9cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9O1xufVxuIiwiZXhwb3J0IGNvbnN0IElDT05TID0ge1xuICAgIGNhcmV0RG93bjoge1xuICAgICAgICBkOiAnTTUuMjMgNy4yMWEuNzUuNzUgMCAwMTEuMDYuMDJMMTAgMTAuOTM5bDMuNzEtMy43MWEuNzUuNzUgMCAxMTEuMDYgMS4wNjJMMTAuNTMgMTIuNTNhLjc1Ljc1IDAgMDEtMS4wNiAwTDUuMjMgOC4yN2EuNzUuNzUgMCAwMS4wMi0xLjA2eicsXG4gICAgICAgIHZpZXdCb3g6ICcwIDAgMjAgMjAnLFxuICAgIH0sXG4gICAgY2FyZXREb3duRmlsbDoge1xuICAgICAgICBkOiAnTTcuMjQ3IDExLjE0IDIuNDUxIDUuNjU4QzEuODg1IDUuMDEzIDIuMzQ1IDQgMy4yMDQgNGg5LjU5MmExIDEgMCAwIDEgLjc1MyAxLjY1OWwtNC43OTYgNS40OGExIDEgMCAwIDEtMS41MDYgMHonLFxuICAgICAgICB2aWV3Qm94OiAnMCAwIDE2IDE2JyxcbiAgICB9LFxuICAgIGNhcmV0UmlnaHQ6IHtcbiAgICAgICAgZDogJ003LjI5MyAxNC43MDdhMSAxIDAgMDEtMS40MTQtMS40MTRMMTAuMTcyIDkgNS44NzkgNC43MDdhMSAxIDAgMDExLjQxNC0xLjQxNGw1IDVhMSAxIDAgMDEwIDEuNDE0bC01IDV6JyxcbiAgICAgICAgdmlld0JveDogJzAgMCAyMCAyMCcsXG4gICAgfSxcbiAgICBjYXJldFJpZ2h0RmlsbDoge1xuICAgICAgICBkOiAnbTEyLjE0IDguNzUzLTUuNDgyIDQuNzk2Yy0uNjQ2LjU2Ni0xLjY1OC4xMDYtMS42NTgtLjc1M1YzLjIwNGExIDEgMCAwIDEgMS42NTktLjc1M2w1LjQ4IDQuNzk2YTEgMSAwIDAgMSAwIDEuNTA2eicsXG4gICAgICAgIHZpZXdCb3g6ICcwIDAgMTYgMTYnLFxuICAgIH0sXG4gICAgc3VjY2Vzczoge1xuICAgICAgICBkOiAnTTE2IDhBOCA4IDAgMSAxIDAgOGE4IDggMCAwIDEgMTYgMG0tMy45Ny0zLjAzYS43NS43NSAwIDAgMC0xLjA4LjAyMkw3LjQ3NyA5LjQxNyA1LjM4NCA3LjMyM2EuNzUuNzUgMCAwIDAtMS4wNiAxLjA2TDYuOTcgMTEuMDNhLjc1Ljc1IDAgMCAwIDEuMDc5LS4wMmwzLjk5Mi00Ljk5YS43NS43NSAwIDAgMC0uMDEtMS4wNXonLFxuICAgICAgICB2aWV3Qm94OiAnMCAwIDE2IDE2JyxcbiAgICB9LFxuICAgIGVycm9yOiB7XG4gICAgICAgIGQ6ICdNMTYgOEE4IDggMCAxIDEgMCA4YTggOCAwIDAgMSAxNiAwTTggNGEuOTA1LjkwNSAwIDAgMC0uOS45OTVsLjM1IDMuNTA3YS41NTIuNTUyIDAgMCAwIDEuMSAwbC4zNS0zLjUwN0EuOTA1LjkwNSAwIDAgMCA4IDRtLjAwMiA2YTEgMSAwIDEgMCAwIDIgMSAxIDAgMCAwIDAtMicsXG4gICAgICAgIHZpZXdCb3g6ICcwIDAgMTYgMTYnLFxuICAgIH0sXG4gICAgd2Fybjoge1xuICAgICAgICBkOiAnTTkuMDQ5IDIuOTI3YTEuNSAxLjUgMCAwMTIuOTAyIDBsNi40MSAxMS45NEExLjUgMS41IDAgMDExNy4wMSAxN0gyLjk5YTEuNSAxLjUgMCAwMS0xLjM1MS0yLjEzM2w2LjQxLTExLjk0ek0xMSAxM2ExIDEgMCAxMC0yIDAgMSAxIDAgMDAyIDB6bS0xLTJhMSAxIDAgMDAxLTFWN2ExIDEgMCAxMC0yIDB2M2ExIDEgMCAwMDEgMXonLFxuICAgICAgICB2aWV3Qm94OiAnMCAwIDIwIDIwJyxcbiAgICB9LFxuICAgIGNvbW1lbnQ6IHtcbiAgICAgICAgZDogJ00wIDJhMiAyIDAgMCAxIDItMmgxMmEyIDIgMCAwIDEgMiAydjhhMiAyIDAgMCAxLTIgMkg0LjQxNGExIDEgMCAwIDAtLjcwNy4yOTNMLjg1NCAxNS4xNDZBLjUuNSAwIDAgMSAwIDE0Ljc5M3ptNSA0YTEgMSAwIDEgMC0yIDAgMSAxIDAgMCAwIDIgMG00IDBhMSAxIDAgMSAwLTIgMCAxIDEgMCAwIDAgMiAwbTMgMWExIDEgMCAxIDAgMC0yIDEgMSAwIDAgMCAwIDInLFxuICAgICAgICB2aWV3Qm94OiAnMCAwIDE2IDE2JyxcbiAgICB9LFxuICAgIHJlbW92ZToge1xuICAgICAgICBkOiAnTTcgM2ExIDEgMCAwIDEgMS0xaDRhMSAxIDAgMCAxIDEgMXYxaDNhMSAxIDAgMSAxIDAgMmgtMWwtMSAxMGEyIDIgMCAwIDEtMiAySDhhMiAyIDAgMCAxLTItMkw1IDZINGExIDEgMCAxIDEgMC0yaDNWM1ptMSAzYTEgMSAwIDAgMC0xIDF2OGExIDEgMCAxIDAgMiAwVjdhMSAxIDAgMCAwLTEtMVptNCAwYTEgMSAwIDAgMC0xIDF2OGExIDEgMCAxIDAgMiAwVjdhMSAxIDAgMCAwLTEtMVonLFxuICAgICAgICB2aWV3Qm94OiAnMCAwIDIwIDIwJyxcbiAgICB9LFxuICAgIGV4cG9ydDoge1xuICAgICAgICBkOiAnTTMgMTYuMjVhLjc1Ljc1IDAgMCAxIC43NS0uNzVoMTIuNWEuNzUuNzUgMCAwIDEgMCAxLjVIMy43NWEuNzUuNzUgMCAwIDEtLjc1LS43NVptNy41My0yLjAzYS43NS43NSAwIDAgMS0xLjA2IDBsLTMtM2EuNzUuNzUgMCAxIDEgMS4wNi0xLjA2bDEuNzIgMS43MlYzLjc1YS43NS43NSAwIDAgMSAxLjUgMHY4LjEzbDEuNzItMS43MmEuNzUuNzUgMCAxIDEgMS4wNiAxLjA2bC0zIDNaJyxcbiAgICAgICAgdmlld0JveDogJzAgMCAyMCAyMCcsXG4gICAgfSxcbiAgICBjbG9zZToge1xuICAgICAgICBkOiAnTTUuMjMgNS4yM2EuNzUuNzUgMCAwIDEgMS4wNiAwTDEwIDguOTRsMy43MS0zLjcxYS43NS43NSAwIDEgMSAxLjA2IDEuMDZMMTEuMDYgMTBsMy43MSAzLjcxYS43NS43NSAwIDEgMS0xLjA2IDEuMDZMMTAgMTEuMDZsLTMuNzEgMy43MWEuNzUuNzUgMCAxIDEtMS4wNi0xLjA2TDguOTQgMTAgNS4yMyA2LjI5YS43NS43NSAwIDAgMSAwLTEuMDZaJyxcbiAgICAgICAgdmlld0JveDogJzAgMCAyMCAyMCcsXG4gICAgfSxcbn07XG5leHBvcnQgZnVuY3Rpb24gZ2V0SWNvbihuYW1lKSB7XG4gICAgY29uc3QgeyBkLCB2aWV3Qm94ID0gJzAgMCAyMCAyMCcgfSA9IElDT05TW25hbWVdO1xuICAgIHJldHVybiB7IGQsIHZpZXdCb3ggfTtcbn1cbiIsImltcG9ydCBpMThuIGZyb20gJ0Bjb21tb24vaTE4bic7XG5pbXBvcnQgeyBnZXRJY29uIH0gZnJvbSAnQGNvbW1vbi9pY29ucyc7XG5pbXBvcnQgeyBpc0l0ZW1Db2xvciwgaXNJdGVtUG9zaXRpb24sIGlzSXRlbVNoYXBlLCBpc0xhYmVsRm9ybWF0LCBVTkdST1VQRUQsIFVOR1JPVVBFRF9WQUxVRSwgfSBmcm9tICdAY29tbW9uL3R5cGVzJztcbmltcG9ydCB7IGdldFN0YXR1c01lc3NhZ2UsIFNUQVRVUywgU1RBVFVTX0NMQVNTX0JZX0tFWSB9IGZyb20gJ0BwYW5lbC90eXBlcy9zdGF0dXMnO1xuaW1wb3J0IHsgVUlFdmVudFR5cGUgfSBmcm9tICcuLi90eXBlcy91aV9ldmVudF90eXBlcyc7XG5mdW5jdGlvbiBieUxhYmVsVGhlbklkKGEsIGIpIHtcbiAgICBpZiAoYS5sYWJlbCAhPT0gYi5sYWJlbClcbiAgICAgICAgcmV0dXJuIGEubGFiZWwgLSBiLmxhYmVsO1xuICAgIHJldHVybiBhLmlkIC0gYi5pZDtcbn1cbmV4cG9ydCBjbGFzcyBQYW5lbFZpZXcge1xuICAgIGRvYztcbiAgICBsaXN0ZW5lcnMgPSB7fTtcbiAgICBlbHM7XG4gICAgTkVXX0dST1VQID0gJ19fbmV3Z3JvdXBfXyc7XG4gICAgSE9WRVJfT1VUX0RFTEFZID0gMTAwMDtcbiAgICBkcmFnRWwgPSBudWxsO1xuICAgIGRyYWdTdGFydFBhcmVudCA9IG51bGw7XG4gICAgZHJhZ1N0YXJ0SW5kZXggPSAtMTtcbiAgICBob3Zlck91dFRpbWVyID0gbnVsbDtcbiAgICBjb2xsYXBzZWRHcm91cHMgPSBuZXcgU2V0KCk7XG4gICAgVE9BU1RfQVVUT19ESVNNSVNTID0gMTAwMDA7XG4gICAgY29uc3RydWN0b3IoZG9jKSB7XG4gICAgICAgIHRoaXMuZG9jID0gZG9jO1xuICAgICAgICBpMThuLmxvY2FsaXplKGRvYyk7XG4gICAgICAgIHRoaXMuZWxzID0ge1xuICAgICAgICAgICAgc3RhdHVzOiB0aGlzLiQoJyNzdGF0dXMnKSxcbiAgICAgICAgICAgIHRvZ2dsZUJ0bjogdGhpcy4kKCcjdG9nZ2xlLXNlbGVjdCcpLFxuICAgICAgICAgICAgdG9nZ2xlSWNvbjogdGhpcy4kKCcjdG9nZ2xlLXNlbGVjdC1pY29uJyksXG4gICAgICAgICAgICB0b2dnbGVMYWJlbDogdGhpcy4kKCcjdG9nZ2xlLXNlbGVjdC1sYWJlbCcpLFxuICAgICAgICAgICAgY2xlYXJCdG46IHRoaXMuJCgnI2NsZWFyJyksXG4gICAgICAgICAgICBjYXB0dXJlQnRuOiB0aGlzLiQoJyNjYXB0dXJlJyksXG4gICAgICAgICAgICBsaXN0OiB0aGlzLiQoJyNzZWxlY3QtbGlzdCcpLFxuICAgICAgICAgICAgZW1wdHk6IHRoaXMuJCgnI3NlbGVjdC1lbXB0eScpLFxuICAgICAgICAgICAgY291bnQ6IHRoaXMuJCgnI3NlbGVjdC1jb3VudCcpLFxuICAgICAgICAgICAgY2FwdHVyZU9wdGlvbnNUb2dnbGU6IHRoaXMuJCgnI2NhcHR1cmUtb3B0aW9ucy10b2dnbGUnKSxcbiAgICAgICAgICAgIGNhcHR1cmVPcHRpb25zUGFuZWw6IHRoaXMuJCgnI2NhcHR1cmUtb3B0aW9ucycpLFxuICAgICAgICAgICAgY2FwdHVyZUZtdFJhZGlvczogdGhpcy4kYWxsKCdpbnB1dFtuYW1lPVwiY2FwdHVyZS1mb3JtYXRcIl0nKSxcbiAgICAgICAgICAgIGNhcHR1cmVBcmVhUmFkaW9zOiB0aGlzLiRhbGwoJ2lucHV0W25hbWU9XCJjYXB0dXJlLWFyZWFcIl0nKSxcbiAgICAgICAgICAgIGpwZWdPbmx5RWxzOiB0aGlzLiRhbGwoJy5qcGVnLW9ubHknKSxcbiAgICAgICAgICAgIGpwZWdRdWFsaXR5UmFuZ2U6IHRoaXMuJCgnI2pwZWctcXVhbGl0eS1yYW5nZScpLFxuICAgICAgICAgICAganBlZ1F1YWxpdHlOdW1iZXI6IHRoaXMuJCgnI2pwZWctcXVhbGl0eS1udW1iZXInKSxcbiAgICAgICAgICAgIGNhcHR1cmVTY2FsZVJhbmdlOiB0aGlzLiQoJyNjYXB0dXJlLXNjYWxlLXJhbmdlJyksXG4gICAgICAgICAgICBjYXB0dXJlU2NhbGVOdW1iZXI6IHRoaXMuJCgnI2NhcHR1cmUtc2NhbGUtbnVtYmVyJyksXG4gICAgICAgICAgICBiYWRnZVNpemVSYW5nZTogdGhpcy4kKCcjYmFkZ2Utc2l6ZS1yYW5nZScpLFxuICAgICAgICAgICAgYmFkZ2VTaXplTnVtYmVyOiB0aGlzLiQoJyNiYWRnZS1zaXplLW51bWJlcicpLFxuICAgICAgICAgICAgYmFkZ2VDb2xvckJ1dHRvbnM6IHRoaXMuJGFsbCgnI2JhZGdlLWNvbG9yLXBvcCBidXR0b24nKSxcbiAgICAgICAgICAgIGJhZGdlQ29sb3JMYWJlbDogdGhpcy4kKCcjYmFkZ2UtY29sb3ItbGFiZWwnKSxcbiAgICAgICAgICAgIGJhZGdlQ29sb3JEb3Q6IHRoaXMuJCgnI2JhZGdlLWNvbG9yLWRvdCcpLFxuICAgICAgICAgICAgYmFkZ2VTaGFwZVNlbGVjdDogdGhpcy4kKCcjYmFkZ2Utc2hhcGUtc2VsZWN0JyksXG4gICAgICAgICAgICBiYWRnZUxhYmVsRm9ybWF0U2VsZWN0OiB0aGlzLiQoJyNiYWRnZS1sYWJlbC1mb3JtYXQtc2VsZWN0JyksXG4gICAgICAgICAgICBiYWRnZVZpc2libGVTZWxlY3Q6IHRoaXMuJCgnI2JhZGdlLXZpc2libGUtc2VsZWN0JyksXG4gICAgICAgICAgICBiYWRnZURlbGV0ZUJ1dHRvbjogdGhpcy4kKCcjYmFkZ2UtZGVsZXRlLWJ1dHRvbicpLFxuICAgICAgICAgICAgYmFkZ2VQb3NpdGlvbkJ1dHRvbnM6IHRoaXMuJGFsbCgnI2JhZGdlLXBvc2l0aW9uLXBvcCBidXR0b24nKSxcbiAgICAgICAgICAgIGJhZGdlUG9zaXRpb25MYWJlbDogdGhpcy4kKCcjYmFkZ2UtcG9zaXRpb24tbGFiZWwnKSxcbiAgICAgICAgICAgIGJhZGdlR3JvdXBTZWxlY3Q6IHRoaXMuJCgnI2JhZGdlLWdyb3VwLXNlbGVjdCcpLFxuICAgICAgICAgICAgZ3JvdXBOYW1lTW9kYWw6IHRoaXMuJCgnI2dyb3VwLW5hbWUtbW9kYWwnKSxcbiAgICAgICAgICAgIGdyb3VwTmFtZUlucHV0OiB0aGlzLiQoJyNncm91cC1uYW1lLWlucHV0JyksXG4gICAgICAgICAgICBncm91cE5hbWVDYW5jZWxCdG46IHRoaXMuJCgnI2dyb3VwLW5hbWUtY2FuY2VsLWJ0bicpLFxuICAgICAgICAgICAgZ3JvdXBOYW1lQ3JlYXRlbEJ0bjogdGhpcy4kKCcjZ3JvdXAtbmFtZS1jcmVhdGUtYnRuJyksXG4gICAgICAgICAgICBpdGVtQ29tbWVudE1vZGFsOiB0aGlzLiQoJyNpdGVtLWNvbW1lbnQtbW9kYWwnKSxcbiAgICAgICAgICAgIGl0ZW1Db21tZW50SW5wdXQ6IHRoaXMuJCgnI2l0ZW0tY29tbWVudC1pbnB1dCcpLFxuICAgICAgICAgICAgaXRlbUNvbW1lbnRJZElucHV0OiB0aGlzLiQoJyNpdGVtLWNvbW1lbnQtaWQtaW5wdXQnKSxcbiAgICAgICAgICAgIGl0ZW1Db21tZW50Q2FuY2VsQnRuOiB0aGlzLiQoJyNpdGVtLWNvbW1lbnQtY2FuY2VsLWJ0bicpLFxuICAgICAgICAgICAgaXRlbUNvbW1lbnRBcHBseUJ0bjogdGhpcy4kKCcjaXRlbS1jb21tZW50LWFwcGx5LWJ0bicpLFxuICAgICAgICAgICAgc2VsZWN0SXRlbUFsbENoZWNrYm94OiB0aGlzLiQoJ2lucHV0W3R5cGU9XCJjaGVja2JveFwiXVtuYW1lPVwiaXRlbS1zZWxlY3RcIl1bdmFsdWU9XCJhbGxcIl0nKSxcbiAgICAgICAgICAgIHNldHRpbmdNb2RhbDogdGhpcy4kKCcjc2V0dGluZy1tb2RhbCcpLFxuICAgICAgICAgICAgc2V0dGluZ0J1dHRvbjogdGhpcy4kKCcjc2V0dGluZy1idXR0b24nKSxcbiAgICAgICAgICAgIHNldHRpbmdDbG9zZUJ1dHRvbjogdGhpcy4kKCcjc2V0dGluZy1jbG9zZS1idG4nKSxcbiAgICAgICAgICAgIHRoZW1lTGlnaHRCdG46IHRoaXMuJCgnI3RoZW1lLWxpZ2h0LWJ0bicpLFxuICAgICAgICAgICAgdGhlbWVEYXJrQnRuOiB0aGlzLiQoJyN0aGVtZS1kYXJrLWJ0bicpLFxuICAgICAgICAgICAgdGhlbWVEZXZpY2VCdG46IHRoaXMuJCgnI3RoZW1lLWRldmljZS1idG4nKSxcbiAgICAgICAgICAgIGltcG9ydEZpbGVJbnB1dDogdGhpcy4kKCcjaW1wb3J0LWZpbGUtaW5wdXQnKSxcbiAgICAgICAgICAgIGltcG9ydEJ0bjogdGhpcy4kKCcjaW1wb3J0LWJ0bicpLFxuICAgICAgICAgICAgc3RvcmVDb3VudDogdGhpcy4kKCcjc3RvcmUtY291bnQnKSxcbiAgICAgICAgICAgIHN0b3JlTGlzdDogdGhpcy4kKCcjc3RvcmUtbGlzdCcpLFxuICAgICAgICAgICAgc3RvcmVFbXB0eTogdGhpcy4kKCcjc3RvcmUtZW1wdHknKSxcbiAgICAgICAgICAgIHRvYXN0UGFyZW50OiB0aGlzLiQoJyN0b2FzdC1wYXJlbnQnKSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5lbHMudG9nZ2xlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5lbWl0KFVJRXZlbnRUeXBlLlRPR0dMRV9TRUxFQ1QsIHVuZGVmaW5lZCkpO1xuICAgICAgICB0aGlzLmVscy5jbGVhckJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHRoaXMuZW1pdChVSUV2ZW50VHlwZS5DTEVBUiwgdW5kZWZpbmVkKSk7XG4gICAgICAgIHRoaXMuZWxzLmNhcHR1cmVCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLmVtaXQoVUlFdmVudFR5cGUuQ0FQVFVSRSwgdW5kZWZpbmVkKSk7XG4gICAgICAgIC8vID09PSBDYXB0dXJlIG9wdGlvbnMgPT09XG4gICAgICAgIHRoaXMuZWxzLmNhcHR1cmVPcHRpb25zVG9nZ2xlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5lbWl0KFVJRXZlbnRUeXBlLlRPR0dMRV9DQVBUVVJFX1BBTkVMLCB1bmRlZmluZWQpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lbHMuY2FwdHVyZUZtdFJhZGlvcy5mb3JFYWNoKChyKSA9PiByLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUXVhbGl0eVZpc2liaWxpdHkoKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdChVSUV2ZW50VHlwZS5DQVBUVVJFX0ZPUk1BVF9DSEFOR0UsIHsgZm9ybWF0OiB0aGlzLmdldFNlbGVjdGVkQ2FwdHVyZUZvcm1hdCgpIH0pO1xuICAgICAgICB9KSk7XG4gICAgICAgIHRoaXMuZWxzLmNhcHR1cmVBcmVhUmFkaW9zLmZvckVhY2goKHIpID0+IHIuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5lbWl0KFVJRXZlbnRUeXBlLkNBUFRVUkVfQVJFQV9DSEFOR0UsIHsgYXJlYTogdGhpcy5nZXRTZWxlY3RlZENhcHR1cmVBcmVhKCkgfSk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5iaW5kU3luYyh0aGlzLmVscy5qcGVnUXVhbGl0eVJhbmdlLCB0aGlzLmVscy5qcGVnUXVhbGl0eU51bWJlciwgKHYpID0+IHRoaXMuZW1pdChVSUV2ZW50VHlwZS5DQVBUVVJFX1FVQUxJVFlfQ0hBTkdFLCB7IHF1YWxpdHk6IHYgfSkpO1xuICAgICAgICB0aGlzLmJpbmRTeW5jKHRoaXMuZWxzLmNhcHR1cmVTY2FsZVJhbmdlLCB0aGlzLmVscy5jYXB0dXJlU2NhbGVOdW1iZXIsICh2KSA9PiB0aGlzLmVtaXQoVUlFdmVudFR5cGUuQ0FQVFVSRV9TQ0FMRV9DSEFOR0UsIHsgc2NhbGU6IHYgfSkpO1xuICAgICAgICAvLyA9PT0gQmFkZ2UgPT09XG4gICAgICAgIHRoaXMuYmluZFN5bmModGhpcy5lbHMuYmFkZ2VTaXplUmFuZ2UsIHRoaXMuZWxzLmJhZGdlU2l6ZU51bWJlcik7XG4gICAgICAgIGNvbnN0IGZpcmVTaXplID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdiA9IE51bWJlcih0aGlzLmVscy5iYWRnZVNpemVOdW1iZXIudmFsdWUpO1xuICAgICAgICAgICAgaWYgKE51bWJlci5pc0Zpbml0ZSh2KSlcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoVUlFdmVudFR5cGUuQkFER0VfU0laRV9DSEFOR0UsIHsgc2l6ZTogdiB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5lbHMuYmFkZ2VTaXplUmFuZ2UuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZmlyZVNpemUpO1xuICAgICAgICB0aGlzLmVscy5iYWRnZVNpemVOdW1iZXIuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZmlyZVNpemUpO1xuICAgICAgICB0aGlzLmVscy5iYWRnZUNvbG9yQnV0dG9ucy5mb3JFYWNoKChidG4pID0+IHtcbiAgICAgICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByYXcgPSBidG4uZGF0YXNldC5jb2xvck5hbWUgPz8gJyc7XG4gICAgICAgICAgICAgICAgY29uc3QgY29sb3IgPSBpc0l0ZW1Db2xvcihyYXcpID8gcmF3IDogJ0JsdWUnO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChVSUV2ZW50VHlwZS5CQURHRV9DT0xPUl9TRUxFQ1QsIHsgY29sb3IgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZWxzLmJhZGdlU2hhcGVTZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdiA9IHRoaXMuZWxzLmJhZGdlU2hhcGVTZWxlY3QudmFsdWUgPz8gbnVsbDtcbiAgICAgICAgICAgIGNvbnN0IHNoYXBlID0gaXNJdGVtU2hhcGUodikgPyB2IDogJ2NpcmNsZSc7XG4gICAgICAgICAgICB0aGlzLmVtaXQoVUlFdmVudFR5cGUuQkFER0VfU0hBUEVfQ0hBTkdFLCB7IHNoYXBlIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lbHMuYmFkZ2VMYWJlbEZvcm1hdFNlbGVjdC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2ID0gdGhpcy5lbHMuYmFkZ2VMYWJlbEZvcm1hdFNlbGVjdC52YWx1ZSA/PyBudWxsO1xuICAgICAgICAgICAgY29uc3QgbGFiZWxGb3JtYXQgPSBpc0xhYmVsRm9ybWF0KHYpID8gdiA6ICdOdW1iZXJzJztcbiAgICAgICAgICAgIHRoaXMuZW1pdChVSUV2ZW50VHlwZS5CQURHRV9MQUJFTF9GT1JNQVRfQ0hBTkdFLCB7IGxhYmVsRm9ybWF0IH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lbHMuYmFkZ2VWaXNpYmxlU2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZpc2libGUgPSB0aGlzLmVscy5iYWRnZVZpc2libGVTZWxlY3QudmFsdWUgPT09ICd0cnVlJztcbiAgICAgICAgICAgIHRoaXMuZW1pdChVSUV2ZW50VHlwZS5CQURHRV9WSVNJQkxFX0NIQU5HRSwgeyB2aXNpYmxlIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lbHMuYmFkZ2VEZWxldGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoVUlFdmVudFR5cGUuQkFER0VfREVMRVRFLCB1bmRlZmluZWQpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lbHMuYmFkZ2VQb3NpdGlvbkJ1dHRvbnMuZm9yRWFjaCgoYnRuKSA9PiB7XG4gICAgICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmF3ID0gYnRuLmRhdGFzZXQucG9zaXRpb25OYW1lID8/ICcnO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gaXNJdGVtUG9zaXRpb24ocmF3KSA/IHJhdyA6ICdsZWZ0LXRvcC1vdXRzaWRlJztcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoVUlFdmVudFR5cGUuQkFER0VfUE9TSVRJT05fU0VMRUNULCB7IHBvc2l0aW9uIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVscy5iYWRnZUdyb3VwU2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5lbHMuYmFkZ2VHcm91cFNlbGVjdC52YWx1ZSA/PyBVTkdST1VQRUQ7XG4gICAgICAgICAgICBjb25zdCBncm91cCA9IHZhbHVlID09PSBVTkdST1VQRUQgPyBVTkdST1VQRURfVkFMVUUgOiB2YWx1ZTtcbiAgICAgICAgICAgIGlmIChncm91cCA9PT0gdGhpcy5ORVdfR1JPVVApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVscy5ncm91cE5hbWVNb2RhbC5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZW1pdChVSUV2ZW50VHlwZS5TRVRfR1JPVVAsIHsgZ3JvdXAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVscy5ncm91cE5hbWVDYW5jZWxCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVscy5ncm91cE5hbWVNb2RhbC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZWxzLmdyb3VwTmFtZUNyZWF0ZWxCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZWxzLmdyb3VwTmFtZUlucHV0LnZhbHVlID8/IFVOR1JPVVBFRDtcbiAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gdmFsdWUgPT09IFVOR1JPVVBFRCB8fCB2YWx1ZSA9PT0gdGhpcy5ORVdfR1JPVVAgPyBVTkdST1VQRURfVkFMVUUgOiB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuZW1pdChVSUV2ZW50VHlwZS5TRVRfR1JPVVAsIHsgZ3JvdXAgfSk7XG4gICAgICAgICAgICB0aGlzLmVscy5ncm91cE5hbWVNb2RhbC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgICAgIHRoaXMuZWxzLmdyb3VwTmFtZUlucHV0LnZhbHVlID0gJyc7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVscy5pdGVtQ29tbWVudENhbmNlbEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZWxzLml0ZW1Db21tZW50TW9kYWwuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVscy5pdGVtQ29tbWVudEFwcGx5QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29tbWVudCA9IHRoaXMuZWxzLml0ZW1Db21tZW50SW5wdXQudmFsdWU7XG4gICAgICAgICAgICBjb25zdCBpZCA9IE51bWJlcih0aGlzLmVscy5pdGVtQ29tbWVudElkSW5wdXQudmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5lbWl0KFVJRXZlbnRUeXBlLklURU1fQ09NTUVOVF9BUFBMWSwgeyBpZCwgY29tbWVudCB9KTtcbiAgICAgICAgICAgIHRoaXMuZWxzLml0ZW1Db21tZW50TW9kYWwuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVscy5zZXR0aW5nQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5lbHMuc2V0dGluZ01vZGFsLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICAgICAgICAgICAgdGhpcy5lbWl0KFVJRXZlbnRUeXBlLlNFVFRJTkdfTU9EQUxfU0hPVywgdW5kZWZpbmVkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZWxzLnNldHRpbmdDbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZWxzLnNldHRpbmdNb2RhbC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZWxzLnRoZW1lTGlnaHRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFwcGx5VGhlbWUoJ2xpZ2h0Jyk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoVUlFdmVudFR5cGUuVVBEQVRFX1RIRU1FLCB7IHRoZW1lOiAnbGlnaHQnIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lbHMudGhlbWVEYXJrQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hcHBseVRoZW1lKCdkYXJrJyk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoVUlFdmVudFR5cGUuVVBEQVRFX1RIRU1FLCB7IHRoZW1lOiAnZGFyaycgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVscy50aGVtZURldmljZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYXBwbHlUaGVtZSgnZGV2aWNlJyk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoVUlFdmVudFR5cGUuVVBEQVRFX1RIRU1FLCB7IHRoZW1lOiAnZGV2aWNlJyB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZWxzLmltcG9ydEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIC8vIElmIG5vIGZpbGUgaXMgc2VsZWN0ZWQsIG9wZW4gdGhlIGRpYWxvZ1xuICAgICAgICAgICAgaWYgKCF0aGlzLmVscy5pbXBvcnRGaWxlSW5wdXQuZmlsZXMgfHwgdGhpcy5lbHMuaW1wb3J0RmlsZUlucHV0LmZpbGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZWxzLmltcG9ydEZpbGVJbnB1dC5jbGljaygpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLmVscy5pbXBvcnRGaWxlSW5wdXQuZmlsZXNbMF07XG4gICAgICAgICAgICB0aGlzLmVtaXQoVUlFdmVudFR5cGUuSU1QT1JUX1NDUkVBTl9TVEFURV9GSUxFLCB7IGZpbGUgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnVwZGF0ZVF1YWxpdHlWaXNpYmlsaXR5KCk7XG4gICAgICAgIHRoaXMuZWxzLnNlbGVjdEl0ZW1BbGxDaGVja2JveC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSBlLnRhcmdldC5jaGVja2VkO1xuICAgICAgICAgICAgdGhpcy5lbWl0KFVJRXZlbnRUeXBlLklURU1fU0VMRUNUSU9OX0NIQU5HRUQsIHsgYWxsQ2hlY2s6IHNlbGVjdGVkIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lbHMubGlzdC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZW50ZXInLCAoKSA9PiB0aGlzLmNhbmNlbEhvdmVyT3V0KCkpO1xuICAgICAgICB0aGlzLmVscy5saXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJsZWF2ZScsICgpID0+IHRoaXMuc2NoZWR1bGVIb3Zlck91dCgpKTtcbiAgICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJsZWF2ZScsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2FuY2VsSG92ZXJPdXQoKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdChVSUV2ZW50VHlwZS5JVEVNX0hPVkVSX09VVCwgdW5kZWZpbmVkKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG9uKHR5cGUsIGhhbmRsZXIpIHtcbiAgICAgICAgY29uc3QgYXJyID0gKHRoaXMubGlzdGVuZXJzW3R5cGVdID8/PSBbXSk7XG4gICAgICAgIGFyci5wdXNoKGhhbmRsZXIpO1xuICAgIH1cbiAgICBlbWl0KHR5cGUsIGUpIHtcbiAgICAgICAgY29uc3QgYXJyID0gdGhpcy5saXN0ZW5lcnNbdHlwZV07XG4gICAgICAgIGFycj8uZm9yRWFjaCgoaCkgPT4gaChlKSk7XG4gICAgfVxuICAgIHJlbmRlcihtb2RlbCkge1xuICAgICAgICB0aGlzLmFwcGx5VG9hc3RNZXNzYWdlcyhtb2RlbC50b2FzdE1lc3NhZ2VzKTtcbiAgICAgICAgdGhpcy5hcHBseVRoZW1lKG1vZGVsLnRoZW1lKTtcbiAgICAgICAgdGhpcy5hcHBseVN0b3JlKG1vZGVsLnBhZ2VLZXlzKTtcbiAgICAgICAgdGhpcy5yZW5kZXJTdGF0dXMobW9kZWwuc3RhdHVzKTtcbiAgICAgICAgdGhpcy5yZW5kZXJUb2dnbGUobW9kZWwuc2VsZWN0aW9uRW5hYmxlZCk7XG4gICAgICAgIHRoaXMucmVuZGVyTGlzdChtb2RlbC5pdGVtcywgbW9kZWwuc2VsZWN0SXRlbXMsIG1vZGVsLm1pc3NpbmdJZHMpO1xuICAgICAgICB0aGlzLnNlbGVjdFJhZGlvQnlWYWx1ZSh0aGlzLmVscy5jYXB0dXJlRm10UmFkaW9zLCBtb2RlbC5jYXB0dXJlLmZvcm1hdCk7XG4gICAgICAgIHRoaXMuc2VsZWN0UmFkaW9CeVZhbHVlKHRoaXMuZWxzLmNhcHR1cmVBcmVhUmFkaW9zLCBtb2RlbC5jYXB0dXJlLmFyZWEpO1xuICAgICAgICB0aGlzLmVscy5qcGVnUXVhbGl0eU51bWJlci52YWx1ZSA9IFN0cmluZyhtb2RlbC5jYXB0dXJlLnF1YWxpdHkpO1xuICAgICAgICB0aGlzLmVscy5qcGVnUXVhbGl0eVJhbmdlLnZhbHVlID0gU3RyaW5nKG1vZGVsLmNhcHR1cmUucXVhbGl0eSk7XG4gICAgICAgIHRoaXMuZWxzLmNhcHR1cmVTY2FsZU51bWJlci52YWx1ZSA9IFN0cmluZyhtb2RlbC5jYXB0dXJlLnNjYWxlKTtcbiAgICAgICAgdGhpcy5lbHMuY2FwdHVyZVNjYWxlUmFuZ2UudmFsdWUgPSBTdHJpbmcobW9kZWwuY2FwdHVyZS5zY2FsZSk7XG4gICAgICAgIHRoaXMudXBkYXRlUXVhbGl0eVZpc2liaWxpdHkobW9kZWwuY2FwdHVyZS5mb3JtYXQpO1xuICAgICAgICB0aGlzLmFwcGx5Q2FwdHVyZU9wdGlvbnNUb2dnbGVVSShtb2RlbC5jYXB0dXJlLnBhbmVsRXhwYW5kZWQpO1xuICAgICAgICB0aGlzLmVscy5iYWRnZVNpemVOdW1iZXIudmFsdWUgPSBTdHJpbmcobW9kZWwuZGVmYXVsdFNpemUpO1xuICAgICAgICB0aGlzLmVscy5iYWRnZVNpemVSYW5nZS52YWx1ZSA9IFN0cmluZyhtb2RlbC5kZWZhdWx0U2l6ZSk7XG4gICAgICAgIHRoaXMuYXBwbHlCYWRnZUNvbG9yVUkobW9kZWwuZGVmYXVsdENvbG9yKTtcbiAgICAgICAgdGhpcy5lbHMuYmFkZ2VTaGFwZVNlbGVjdC52YWx1ZSA9IG1vZGVsLmRlZmF1bHRTaGFwZTtcbiAgICAgICAgdGhpcy5lbHMuYmFkZ2VMYWJlbEZvcm1hdFNlbGVjdC52YWx1ZSA9IG1vZGVsLmRlZmF1bHRMYWJlbEZvcm1hdCA/PyAnTnVtYmVycyc7XG4gICAgICAgIHRoaXMuZWxzLmJhZGdlVmlzaWJsZVNlbGVjdC52YWx1ZSA9IFN0cmluZyhtb2RlbC5kZWZhdWx0VmlzaWJsZSA/PyAndHJ1ZScpO1xuICAgICAgICB0aGlzLmFwcGx5QmFkZ2VQb3NpdG9uVUkobW9kZWwuZGVmYXVsdFBvc2l0aW9uKTtcbiAgICAgICAgdGhpcy5hcHBseUJhZGdlR3JvdXBTZWxlY3RVSSh0aGlzLmdldEV4aXN0aW5nR3JvdXBzKG1vZGVsLml0ZW1zKSwgbW9kZWwuZGVmYXVsdEdyb3VwKTtcbiAgICB9XG4gICAgcmVuZGVyU3RhdHVzKGtleSkge1xuICAgICAgICBjb25zdCBzdHlsZSA9IFNUQVRVU19DTEFTU19CWV9LRVlba2V5XTtcbiAgICAgICAgY29uc3QgZWwgPSB0aGlzLmVscy5zdGF0dXM7XG4gICAgICAgIGVsLmNsYXNzTmFtZSA9ICcnO1xuICAgICAgICBlbC5jbGFzc05hbWUgPSBgY29ubmVjdC1zdGF0dXMgJHtzdHlsZX1gO1xuICAgICAgICBjb25zdCBkb3QgPSB0aGlzLmRvYy5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgIGRvdC5jbGFzc0xpc3QuYWRkKCdjb25uZWN0LXN0YXR1cy1kb3QnKTtcbiAgICAgICAgY29uc3QgdGV4dCA9IHRoaXMuZG9jLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgdGV4dC50ZXh0Q29udGVudCA9IGdldFN0YXR1c01lc3NhZ2Uoa2V5KTtcbiAgICAgICAgZWwucmVwbGFjZUNoaWxkcmVuKGRvdCwgdGV4dCk7XG4gICAgICAgIHRoaXMuZGlzYWJsZUZvcm1Db250cm9scyhrZXkpO1xuICAgIH1cbiAgICByZW5kZXJUb2dnbGUoZW5hYmxlZCkge1xuICAgICAgICBjb25zdCBpY29uID0gdGhpcy5lbHMudG9nZ2xlSWNvbjtcbiAgICAgICAgaWNvbi5jbGFzc05hbWUgPSAnJztcbiAgICAgICAgaWNvbi5jbGFzc0xpc3QuYWRkKCdzZWxlY3QtdG9nZ2xlLWljb24nLCBlbmFibGVkID8gJ2JnLWluZGlnby01MDAnIDogJ2JnLXNsYXRlLTMwMCcpO1xuICAgICAgICB0aGlzLmVscy50b2dnbGVMYWJlbC50ZXh0Q29udGVudCA9IGkxOG4uZ2V0KGVuYWJsZWQgPyAndG9nZ2xlX29uJyA6ICd0b2dnbGVfb2ZmJyk7XG4gICAgfVxuICAgIHJlbmRlckxpc3QoaXRlbXMsIHNlbGVjdEl0ZW1zLCBtaXNzaW5nSWRzKSB7XG4gICAgICAgIHRoaXMuZWxzLmNvdW50LnRleHRDb250ZW50ID0gU3RyaW5nKGl0ZW1zLmxlbmd0aCk7XG4gICAgICAgIGNvbnN0IGFsbENoZWNrZWQgPSBpdGVtcy5sZW5ndGggPT09IDAgPyBmYWxzZSA6IGl0ZW1zLmV2ZXJ5KChpdCkgPT4gc2VsZWN0SXRlbXMuaW5jbHVkZXMoaXQuaWQpKTtcbiAgICAgICAgdGhpcy5lbHMuc2VsZWN0SXRlbUFsbENoZWNrYm94LmNoZWNrZWQgPSBhbGxDaGVja2VkO1xuICAgICAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5lbHMuZW1wdHkuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgICAgICAgICB0aGlzLmVscy5saXN0LnJlcGxhY2VDaGlsZHJlbigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZWxzLmVtcHR5LmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgICAgICBjb25zdCBncm91cHMgPSB0aGlzLmdyb3VwQnlHcm91cChpdGVtcyk7XG4gICAgICAgIGNvbnN0IGdyb3VwS2V5cyA9IEFycmF5LmZyb20oZ3JvdXBzLmtleXMoKSkuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgaWYgKGEgPT09IFVOR1JPVVBFRClcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICBpZiAoYiA9PT0gVU5HUk9VUEVEKVxuICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgcmV0dXJuIGEubG9jYWxlQ29tcGFyZShiKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGZyYWcgPSB0aGlzLmRvYy5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICAgIGZvciAoY29uc3QgZ0tleSBvZiBncm91cEtleXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlY3Rpb24gPSB0aGlzLnJlbmRlckdyb3VwU2VjdGlvbihnS2V5LCBncm91cHMuZ2V0KGdLZXkpLCBzZWxlY3RJdGVtcywgbWlzc2luZ0lkcyk7XG4gICAgICAgICAgICBmcmFnLmFwcGVuZENoaWxkKHNlY3Rpb24pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZWxzLmxpc3QucmVwbGFjZUNoaWxkcmVuKGZyYWcpO1xuICAgIH1cbiAgICByZW5kZXJHcm91cFNlY3Rpb24oZ0tleSwgZ0l0ZW1zLCBzZWxlY3RJdGVtcywgbWlzc2luZ0lkcykge1xuICAgICAgICBjb25zdCBpc0NvbGxhcHNlZCA9IHRoaXMuY29sbGFwc2VkR3JvdXBzLmhhcyhnS2V5KTtcbiAgICAgICAgY29uc3Qgc2VjdGlvbiA9IHRoaXMuZWwoJ3NlY3Rpb24nLCAnc2VsZWN0LWl0ZW0tc2VjdGlvbicpO1xuICAgICAgICAvLyBoZWFkZXJcbiAgICAgICAgY29uc3QgaGVhZGVyID0gdGhpcy5lbCgnZGl2JywgJ3NlbGVjdC1pdGVtLWhlYWRlcicpO1xuICAgICAgICAvLyBjaGVja2JveFxuICAgICAgICBjb25zdCBjaGVja2JveFdyYXAgPSB0aGlzLmVsKCdkaXYnLCAnc3Bzay1jaGVja3dyYXAnKTtcbiAgICAgICAgY29uc3QgY2hlY2tib3ggPSB0aGlzLmVsKCdpbnB1dCcsICdzcHNrLWNoZWNrYm94IHNwc2stY2hlY2tib3gtLW5vcm1hbCcpO1xuICAgICAgICBjaGVja2JveC50eXBlID0gJ2NoZWNrYm94JztcbiAgICAgICAgY2hlY2tib3gubmFtZSA9ICdpdGVtLXNlbGVjdCc7XG4gICAgICAgIGNoZWNrYm94LnZhbHVlID0gZ0tleSA9PT0gVU5HUk9VUEVEID8gaTE4bi5nZXQoJ2dyb3VwX3VuZ3JvdXBlZCcpIDogZ0tleTtcbiAgICAgICAgY2hlY2tib3guY2hlY2tlZCA9IGdJdGVtcy5ldmVyeSgoaXQpID0+IHNlbGVjdEl0ZW1zLmluY2x1ZGVzKGl0LmlkKSk7XG4gICAgICAgIGNoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZCA9IGUudGFyZ2V0LmNoZWNrZWQ7XG4gICAgICAgICAgICB0aGlzLmVtaXQoVUlFdmVudFR5cGUuSVRFTV9TRUxFQ1RJT05fQ0hBTkdFRCwge1xuICAgICAgICAgICAgICAgIGdyb3VwOiBnS2V5ID09PSBVTkdST1VQRUQgPyBVTkdST1VQRURfVkFMVUUgOiBnS2V5LFxuICAgICAgICAgICAgICAgIGlzQ2hlY2s6IHNlbGVjdGVkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjaGVja2JveFdyYXAuYXBwZW5kKGNoZWNrYm94KTtcbiAgICAgICAgY29uc3QgdGl0bGUgPSB0aGlzLmVsKCdzcGFuJywgJ3NlbGVjdC1pdGVtLWdoLXRpdGxlJywgZ0tleSA9PT0gVU5HUk9VUEVEID8gaTE4bi5nZXQoJ2dyb3VwX3VuZ3JvdXBlZCcpIDogZ0tleSk7XG4gICAgICAgIGNvbnN0IGxlZnQgPSB0aGlzLmVsKCdkaXYnLCAnc2VsZWN0LWl0ZW0tZ2gtbGVmdCcpO1xuICAgICAgICBsZWZ0LmFwcGVuZChjaGVja2JveFdyYXAsIHRpdGxlKTtcbiAgICAgICAgY29uc3QgY291bnQgPSB0aGlzLmVsKCdzcGFuJywgJ3NlbGVjdC1pdGVtLWdoLWNvdW50JywgU3RyaW5nKGdJdGVtcy5sZW5ndGgpKTtcbiAgICAgICAgY29uc3QgdG9nZ2xlQnRuID0gdGhpcy5lbCgnYnV0dG9uJywgJ3NlbGVjdC1pdGVtLWdoLXRvZ2dsZScpO1xuICAgICAgICB0b2dnbGVCdG4udHlwZSA9ICdidXR0b24nO1xuICAgICAgICB0b2dnbGVCdG4uc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgU3RyaW5nKCFpc0NvbGxhcHNlZCkpO1xuICAgICAgICBjb25zdCB7IGQsIHZpZXdCb3ggfSA9IGlzQ29sbGFwc2VkID8gZ2V0SWNvbignY2FyZXRSaWdodCcpIDogZ2V0SWNvbignY2FyZXREb3duJyk7XG4gICAgICAgIGNvbnN0IHRvZ2dsZUljb24gPSB0aGlzLmNyZWF0ZVN2Z0ljb24oZCwgeyBjbGFzc05hbWU6ICdpY29uLXNtJywgdmlld0JveCB9KTtcbiAgICAgICAgY29uc3QgdG9nZ2xlUGF0aCA9IHRvZ2dsZUljb24ucXVlcnlTZWxlY3RvcigncGF0aCcpO1xuICAgICAgICB0b2dnbGVCdG4uYXBwZW5kKHRvZ2dsZUljb24pO1xuICAgICAgICBoZWFkZXIuYXBwZW5kKGxlZnQsIGNvdW50LCB0b2dnbGVCdG4pO1xuICAgICAgICAvLyB1bFxuICAgICAgICBjb25zdCB1bCA9IHRoaXMuZWwoJ3VsJywgJ3NlbGVjdC1pdGVtLWxpc3QnKTtcbiAgICAgICAgaWYgKGlzQ29sbGFwc2VkKVxuICAgICAgICAgICAgdWwuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICAgIHRoaXMuYXR0YWNoVWxEbkRIYW5kbGVycyh1bCk7XG4gICAgICAgIGZvciAoY29uc3QgaXQgb2YgZ0l0ZW1zLnNvcnQoYnlMYWJlbFRoZW5JZCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdENoZWNrZWQgPSBzZWxlY3RJdGVtcy5pbmNsdWRlcyhpdC5pZCk7XG4gICAgICAgICAgICB1bC5hcHBlbmRDaGlsZCh0aGlzLnJlbmRlckl0ZW0oaXQsIHNlbGVjdENoZWNrZWQsIG1pc3NpbmdJZHMpKTtcbiAgICAgICAgfVxuICAgICAgICB0b2dnbGVCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50bHlDb2xsYXBzZWQgPSB0aGlzLmNvbGxhcHNlZEdyb3Vwcy5oYXMoZ0tleSk7XG4gICAgICAgICAgICBpZiAoY3VycmVudGx5Q29sbGFwc2VkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb2xsYXBzZWRHcm91cHMuZGVsZXRlKGdLZXkpO1xuICAgICAgICAgICAgICAgIHVsLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICAgICAgICAgICAgICAgIHRvZ2dsZVBhdGguc2V0QXR0cmlidXRlKCdkJywgZ2V0SWNvbignY2FyZXREb3duJykuZCk7XG4gICAgICAgICAgICAgICAgdG9nZ2xlQnRuLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICd0cnVlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbGxhcHNlZEdyb3Vwcy5hZGQoZ0tleSk7XG4gICAgICAgICAgICAgICAgdWwuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgdG9nZ2xlUGF0aC5zZXRBdHRyaWJ1dGUoJ2QnLCBnZXRJY29uKCdjYXJldFJpZ2h0JykuZCk7XG4gICAgICAgICAgICAgICAgdG9nZ2xlQnRuLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgc2VjdGlvbi5hcHBlbmQoaGVhZGVyLCB1bCk7XG4gICAgICAgIHJldHVybiBzZWN0aW9uO1xuICAgIH1cbiAgICByZW5kZXJJdGVtKGl0LCBzZWxlY3RDaGVja2VkLCBtaXNzaW5nSWRzKSB7XG4gICAgICAgIGNvbnN0IGlzTWlzc2luZyA9IG1pc3NpbmdJZHMuaW5jbHVkZXMoaXQuaWQpO1xuICAgICAgICBjb25zdCBsaUJhc2UgPSAnc2VsZWN0LWl0ZW0nO1xuICAgICAgICBjb25zdCBsaSA9IHRoaXMuZWwoJ2xpJywgaXNNaXNzaW5nID8gYGdyb3VwICR7bGlCYXNlfSBzZWxlY3QtaXRlbS0td2FybmAgOiBsaUJhc2UpO1xuICAgICAgICBsaS5kYXRhc2V0LmlkID0gU3RyaW5nKGl0LmlkKTtcbiAgICAgICAgbGkuZHJhZ2dhYmxlID0gdHJ1ZTtcbiAgICAgICAgLy8gT25seSBzb3J0aW5nIHdpdGhpbiB0aGUgc2FtZSBVTCBpcyBhbGxvd2VkXG4gICAgICAgIGxpLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdzdGFydCcsIChlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRyYWdFbCA9IGxpO1xuICAgICAgICAgICAgdGhpcy5kcmFnU3RhcnRQYXJlbnQgPSBsaS5wYXJlbnRFbGVtZW50O1xuICAgICAgICAgICAgdGhpcy5kcmFnU3RhcnRJbmRleCA9IEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwobGkucGFyZW50RWxlbWVudD8uY2hpbGRyZW4gPz8gW10sIGxpKTtcbiAgICAgICAgICAgIGlmIChlLmRhdGFUcmFuc2ZlcilcbiAgICAgICAgICAgICAgICBlLmRhdGFUcmFuc2Zlci5lZmZlY3RBbGxvd2VkID0gJ21vdmUnO1xuICAgICAgICAgICAgbGkuY2xhc3NMaXN0LmFkZCgnb3BhY2l0eS02MCcpO1xuICAgICAgICB9KTtcbiAgICAgICAgbGkuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2VuZCcsICgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5kcmFnRWwpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gdGhpcy5kcmFnRWwucGFyZW50RWxlbWVudDtcbiAgICAgICAgICAgIGNvbnN0IGVuZEluZGV4ID0gcGFyZW50ID8gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChwYXJlbnQuY2hpbGRyZW4sIHRoaXMuZHJhZ0VsKSA6IC0xO1xuICAgICAgICAgICAgdGhpcy5kcmFnRWwuY2xhc3NMaXN0LnJlbW92ZSgnb3BhY2l0eS02MCcpO1xuICAgICAgICAgICAgY29uc3QgZnJvbUlkID0gdGhpcy5kcmFnRWwuZGF0YXNldC5pZCA/PyAnJztcbiAgICAgICAgICAgIHRoaXMuZHJhZ0VsID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChmcm9tSWQgJiYgdGhpcy5kcmFnU3RhcnRJbmRleCA+PSAwICYmIGVuZEluZGV4ID49IDAgJiYgZW5kSW5kZXggIT09IHRoaXMuZHJhZ1N0YXJ0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoVUlFdmVudFR5cGUuUkVPUkRFUl9JVEVNUywge1xuICAgICAgICAgICAgICAgICAgICBmcm9tSWQ6IE51bWJlcihmcm9tSWQpLFxuICAgICAgICAgICAgICAgICAgICBmcm9tSW5kZXg6IHRoaXMuZHJhZ1N0YXJ0SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIHRvSW5kZXg6IGVuZEluZGV4LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kcmFnU3RhcnRJbmRleCA9IC0xO1xuICAgICAgICAgICAgdGhpcy5kcmFnU3RhcnRQYXJlbnQgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gY2hlY2tib3hcbiAgICAgICAgY29uc3QgY2hlY2tib3hXcmFwID0gdGhpcy5lbCgnZGl2JywgJ3Nwc2stY2hlY2t3cmFwJyk7XG4gICAgICAgIGNvbnN0IGNoZWNrYm94U3R5bGUgPSBpc01pc3NpbmdcbiAgICAgICAgICAgID8gJ3Nwc2stY2hlY2tib3ggc3Bzay1jaGVja2JveC0td2FybidcbiAgICAgICAgICAgIDogJ3Nwc2stY2hlY2tib3ggc3Bzay1jaGVja2JveC0tbm9ybWFsJztcbiAgICAgICAgY29uc3QgY2hlY2tib3ggPSB0aGlzLmVsKCdpbnB1dCcsIGNoZWNrYm94U3R5bGUpO1xuICAgICAgICBjaGVja2JveC50eXBlID0gJ2NoZWNrYm94JztcbiAgICAgICAgY2hlY2tib3gubmFtZSA9ICdpdGVtLXNlbGVjdCc7XG4gICAgICAgIGNoZWNrYm94LnZhbHVlID0gU3RyaW5nKGl0LmlkKTtcbiAgICAgICAgY2hlY2tib3guY2hlY2tlZCA9IHNlbGVjdENoZWNrZWQ7XG4gICAgICAgIGNoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZCA9IGUudGFyZ2V0LmNoZWNrZWQ7XG4gICAgICAgICAgICB0aGlzLmVtaXQoVUlFdmVudFR5cGUuSVRFTV9TRUxFQ1RJT05fQ0hBTkdFRCwgeyBpZDogaXQuaWQsIGlzQ2hlY2s6IHNlbGVjdGVkIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tib3hXcmFwLmFwcGVuZChjaGVja2JveCk7XG4gICAgICAgIC8vIGJhZGdlXG4gICAgICAgIGNvbnN0IGJhZGdlU3R5bGUgPSBpc01pc3NpbmcgPyAnc3Bzay1iYWRnZSBzcHNrLWJhZGdlLS13YXJuJyA6ICdzcHNrLWJhZGdlIHNwc2stYmFkZ2UtLW5vcm0nO1xuICAgICAgICBjb25zdCBiYWRnZSA9IHRoaXMuZWwoJ3NwYW4nLCBiYWRnZVN0eWxlLCBTdHJpbmcoaXQubGFiZWwpKTtcbiAgICAgICAgLy8gbWFpbiAobWlzc2luZ0ljb24sIGFuY2hvcilcbiAgICAgICAgY29uc3QgbWFpbiA9IHRoaXMuZWwoJ2RpdicsICdtaW4tdy0wIGZsZXgtMScpO1xuICAgICAgICBtYWluLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJlbnRlcicsICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRyYWdTdGFydFBhcmVudCB8fCBpc01pc3NpbmcpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5jYW5jZWxIb3Zlck91dCgpO1xuICAgICAgICAgICAgdGhpcy5lbWl0KFVJRXZlbnRUeXBlLklURU1fSE9WRVJfSU4sIHsgaWQ6IGl0LmlkIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGlzTWlzc2luZykge1xuICAgICAgICAgICAgY29uc3QgY2hpcCA9IHRoaXMuZWwoJ3NwYW4nLCAnY2hpcC13YXJuJyk7XG4gICAgICAgICAgICBjb25zdCB7IGQsIHZpZXdCb3ggfSA9IGdldEljb24oJ3dhcm4nKTtcbiAgICAgICAgICAgIGNvbnN0IGljb24gPSB0aGlzLmNyZWF0ZVN2Z0ljb24oZCwge1xuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2gtMy41IHctMy41JyxcbiAgICAgICAgICAgICAgICB2aWV3Qm94LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBsYWJlbCA9IHRoaXMuZWwoJ3NwYW4nLCB1bmRlZmluZWQsIGkxOG4uZ2V0KCdtaXNzaW5nX2l0ZW0nKSk7XG4gICAgICAgICAgICBjaGlwLmFwcGVuZChpY29uLCBsYWJlbCk7XG4gICAgICAgICAgICBtYWluLmFwcGVuZChjaGlwKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbmNob3IgPSB0aGlzLmVsKCdkaXYnLCAnYW5jaG9yJywgaXQuYW5jaG9yLnZhbHVlKTtcbiAgICAgICAgbWFpbi5hcHBlbmQoYW5jaG9yKTtcbiAgICAgICAgY29uc3QgY29tbWVudEJ0biA9IHRoaXMuZ2VuZXJhdGVDb21tZW50QnRuKGl0KTtcbiAgICAgICAgbGkuYXBwZW5kKGNoZWNrYm94V3JhcCwgYmFkZ2UsIG1haW4sIGNvbW1lbnRCdG4pO1xuICAgICAgICByZXR1cm4gbGk7XG4gICAgfVxuICAgIGdlbmVyYXRlQ29tbWVudEJ0bihpdCkge1xuICAgICAgICBjb25zdCBidG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgYnRuLmNsYXNzTmFtZSA9ICdidG4taWNvbic7XG4gICAgICAgIGNvbnN0IHsgZCwgdmlld0JveCB9ID0gZ2V0SWNvbignY29tbWVudCcpO1xuICAgICAgICBjb25zdCBpY29uID0gdGhpcy5jcmVhdGVTdmdJY29uKGQsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ2gtMy41IHctMy41JyxcbiAgICAgICAgICAgIHZpZXdCb3gsXG4gICAgICAgIH0pO1xuICAgICAgICBidG4uYXBwZW5kQ2hpbGQoaWNvbik7XG4gICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZWxzLml0ZW1Db21tZW50TW9kYWwuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgICAgICAgICB0aGlzLmVscy5pdGVtQ29tbWVudElucHV0LnZhbHVlID0gaXQuY29tbWVudCA/PyAnJztcbiAgICAgICAgICAgIHRoaXMuZWxzLml0ZW1Db21tZW50SWRJbnB1dC52YWx1ZSA9IFN0cmluZyhpdC5pZCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYnRuO1xuICAgIH1cbiAgICBzY2hlZHVsZUhvdmVyT3V0KCkge1xuICAgICAgICBpZiAodGhpcy5ob3Zlck91dFRpbWVyKVxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuaG92ZXJPdXRUaW1lcik7XG4gICAgICAgIGlmICh0aGlzLmRyYWdTdGFydFBhcmVudClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5ob3Zlck91dFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmhvdmVyT3V0VGltZXIgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5lbWl0KFVJRXZlbnRUeXBlLklURU1fSE9WRVJfT1VULCB1bmRlZmluZWQpO1xuICAgICAgICB9LCB0aGlzLkhPVkVSX09VVF9ERUxBWSk7XG4gICAgfVxuICAgIGNhbmNlbEhvdmVyT3V0KCkge1xuICAgICAgICBpZiAoIXRoaXMuaG92ZXJPdXRUaW1lcilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuaG92ZXJPdXRUaW1lcik7XG4gICAgICAgIHRoaXMuaG92ZXJPdXRUaW1lciA9IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVMIEQmRCBIYW5kbGVyXG4gICAgICogT25seSBzb3J0aW5nIHdpdGhpbiB0aGUgc2FtZSBVTCBpcyBhbGxvd2VkXG4gICAgICogQHBhcmFtIHVsXG4gICAgICovXG4gICAgYXR0YWNoVWxEbkRIYW5kbGVycyh1bCkge1xuICAgICAgICB1bC5hZGRFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIChlKSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZHJhZ0VsKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGlmICh0aGlzLmRyYWdTdGFydFBhcmVudCAmJiB1bCAhPT0gdGhpcy5kcmFnU3RhcnRQYXJlbnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0TGkgPSBlLnRhcmdldD8uY2xvc2VzdCgnbGknKTtcbiAgICAgICAgICAgIGlmICh0YXJnZXRMaSAmJiB0YXJnZXRMaSAhPT0gdGhpcy5kcmFnRWwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZWN0ID0gdGFyZ2V0TGkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNBZnRlciA9IGUuY2xpZW50WSAtIHJlY3QudG9wID4gcmVjdC5oZWlnaHQgLyAyO1xuICAgICAgICAgICAgICAgIHVsLmluc2VydEJlZm9yZSh0aGlzLmRyYWdFbCwgaXNBZnRlciA/IHRhcmdldExpLm5leHRTaWJsaW5nIDogdGFyZ2V0TGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIXRhcmdldExpKSB7XG4gICAgICAgICAgICAgICAgdWwuYXBwZW5kQ2hpbGQodGhpcy5kcmFnRWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdWwuYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIChlKSA9PiBlLnByZXZlbnREZWZhdWx0KCkpO1xuICAgIH1cbiAgICBnZXRFeGlzdGluZ0dyb3VwcyhpdGVtcykge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShuZXcgU2V0KGl0ZW1zLm1hcCgoaSkgPT4gKGkuZ3JvdXAgPz8gJycpLnRyaW0oKSkuZmlsdGVyKChnKSA9PiBnLmxlbmd0aCA+IDApKSkuc29ydCgoYSwgYikgPT4gYS5sb2NhbGVDb21wYXJlKGIpKTtcbiAgICB9XG4gICAgZ3JvdXBCeUdyb3VwKGl0ZW1zKSB7XG4gICAgICAgIGNvbnN0IG0gPSBuZXcgTWFwKCk7XG4gICAgICAgIGZvciAoY29uc3QgaXQgb2YgaXRlbXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IChpdC5ncm91cCA/PyBVTkdST1VQRURfVkFMVUUpLnRyaW0oKSB8fCBVTkdST1VQRUQ7XG4gICAgICAgICAgICBpZiAoIW0uaGFzKGtleSkpXG4gICAgICAgICAgICAgICAgbS5zZXQoa2V5LCBbXSk7XG4gICAgICAgICAgICBtLmdldChrZXkpLnB1c2goaXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtO1xuICAgIH1cbiAgICBnZXRTZWxlY3RlZENhcHR1cmVGb3JtYXQoKSB7XG4gICAgICAgIGNvbnN0IHZhbCA9IHRoaXMuZG9jLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W25hbWU9XCJjYXB0dXJlLWZvcm1hdFwiXTpjaGVja2VkJyk/LnZhbHVlO1xuICAgICAgICByZXR1cm4gdmFsID09PSAnanBlZycgPyAnanBlZycgOiAncG5nJztcbiAgICB9XG4gICAgZ2V0U2VsZWN0ZWRDYXB0dXJlQXJlYSgpIHtcbiAgICAgICAgY29uc3QgdmFsID0gdGhpcy5kb2MucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZT1cImNhcHR1cmUtYXJlYVwiXTpjaGVja2VkJyk/LnZhbHVlO1xuICAgICAgICByZXR1cm4gdmFsID09PSAndmlld3BvcnQnID8gJ3ZpZXdwb3J0JyA6ICdmdWxsJztcbiAgICB9XG4gICAgdXBkYXRlUXVhbGl0eVZpc2liaWxpdHkoZm9ybWF0KSB7XG4gICAgICAgIGNvbnN0IGYgPSBmb3JtYXQgPz8gdGhpcy5nZXRTZWxlY3RlZENhcHR1cmVGb3JtYXQoKTtcbiAgICAgICAgY29uc3QgaXNKcGVnID0gZiA9PT0gJ2pwZWcnO1xuICAgICAgICB0aGlzLmVscy5qcGVnT25seUVscy5mb3JFYWNoKChlbCkgPT4gZWwuY2xhc3NMaXN0LnRvZ2dsZSgnaGlkZGVuJywgIWlzSnBlZykpO1xuICAgICAgICB0aGlzLmVscy5qcGVnUXVhbGl0eVJhbmdlLmRpc2FibGVkID0gIWlzSnBlZztcbiAgICAgICAgdGhpcy5lbHMuanBlZ1F1YWxpdHlOdW1iZXIuZGlzYWJsZWQgPSAhaXNKcGVnO1xuICAgIH1cbiAgICBzZWxlY3RSYWRpb0J5VmFsdWUocmFkaW9zLCB2YWx1ZSkge1xuICAgICAgICByYWRpb3MuZm9yRWFjaCgocikgPT4gKHIuY2hlY2tlZCA9IHIudmFsdWUgPT09IHZhbHVlKSk7XG4gICAgfVxuICAgIGJpbmRTeW5jKHJhbmdlRWwsIG51bWJlckVsLCBvblZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHJlYWROdW0gPSAocywgZmFsbGJhY2spID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHYgPSBzICE9IG51bGwgJiYgcyAhPT0gJycgPyBOdW1iZXIocykgOiBOYU47XG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyLmlzRmluaXRlKHYpID8gdiA6IGZhbGxiYWNrO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBjbGFtcCA9ICh2LCBtaW4sIG1heCkgPT4gTWF0aC5taW4oTWF0aC5tYXgodiwgbWluKSwgbWF4KTtcbiAgICAgICAgY29uc3Qgc3luYyA9IChyYXdTdHIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG1pbiA9IHJlYWROdW0obnVtYmVyRWwubWluIHx8IHJhbmdlRWwubWluLCBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkpO1xuICAgICAgICAgICAgY29uc3QgbWF4ID0gcmVhZE51bShudW1iZXJFbC5tYXggfHwgcmFuZ2VFbC5tYXgsIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSk7XG4gICAgICAgICAgICBjb25zdCBzdGVwID0gcmVhZE51bShudW1iZXJFbC5zdGVwIHx8IHJhbmdlRWwuc3RlcCwgMSk7XG4gICAgICAgICAgICBjb25zdCByYXcgPSBOdW1iZXIocmF3U3RyKTtcbiAgICAgICAgICAgIGNvbnN0IGNsYW1wZWQgPSBjbGFtcChOdW1iZXIuaXNGaW5pdGUocmF3KSA/IHJhdyA6IDAsIG1pbiwgbWF4KTtcbiAgICAgICAgICAgIGNvbnN0IHJvdW5kZWQgPSBNYXRoLnJvdW5kKGNsYW1wZWQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICAgICAgICBjb25zdCBmaXhlZCA9IE51bWJlcihyb3VuZGVkLnRvRml4ZWQoNikpO1xuICAgICAgICAgICAgbnVtYmVyRWwudmFsdWUgPSBTdHJpbmcoZml4ZWQpO1xuICAgICAgICAgICAgcmFuZ2VFbC52YWx1ZSA9IFN0cmluZyhmaXhlZCk7XG4gICAgICAgICAgICBvblZhbHVlPy4oZml4ZWQpO1xuICAgICAgICB9O1xuICAgICAgICByYW5nZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4gc3luYyhyYW5nZUVsLnZhbHVlKSk7XG4gICAgICAgIG51bWJlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4gc3luYyhudW1iZXJFbC52YWx1ZSkpO1xuICAgIH1cbiAgICBkaXNhYmxlRm9ybUNvbnRyb2xzKHN0YXR1cykge1xuICAgICAgICBjb25zdCBjb250cm9scyA9IHRoaXMuZG9jLnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbiwgc2VsZWN0LCBpbnB1dCwgdGV4dGFyZWEnKTtcbiAgICAgICAgLy8gRGV0ZXJtaW5lIGVuYWJsZW1lbnQgcG9saWN5IHBlciBzdGF0dXNcbiAgICAgICAgY29uc3QgZW5hYmxlQWxsID0gc3RhdHVzID09PSBTVEFUVVMuQ09OTkVDVEVEO1xuICAgICAgICBjb25zdCBlbmFibGVJZ25vcmVPbmx5ID0gc3RhdHVzID09PSBTVEFUVVMuQ09OTkVDVElORyB8fCBzdGF0dXMgPT09IFNUQVRVUy5ESVNDT05ORUNURUQ7XG4gICAgICAgIGNvbnN0IGVuYWJsZU5vbmUgPSBzdGF0dXMgPT09IFNUQVRVUy5SRVNUUklDVEVEO1xuICAgICAgICBjb250cm9scy5mb3JFYWNoKChlbCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2hvdWxkRW5hYmxlID0gKGVuYWJsZUFsbCAmJiB0cnVlKSB8fFxuICAgICAgICAgICAgICAgIChlbmFibGVJZ25vcmVPbmx5ICYmIGVsLmhhc0F0dHJpYnV0ZSgnZGF0YS1pZ25vcmUtZGlzYWJsZScpKSB8fFxuICAgICAgICAgICAgICAgIChlbmFibGVOb25lICYmIGZhbHNlKTtcbiAgICAgICAgICAgIGVsLmRpc2FibGVkID0gIXNob3VsZEVuYWJsZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFwcGx5Q2FwdHVyZU9wdGlvbnNUb2dnbGVVSShleHBhbmRlZCkge1xuICAgICAgICB0aGlzLmVscy5jYXB0dXJlT3B0aW9uc1RvZ2dsZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCBTdHJpbmcoZXhwYW5kZWQpKTtcbiAgICAgICAgY29uc3QgeyBkLCB2aWV3Qm94IH0gPSBleHBhbmRlZCA/IGdldEljb24oJ2NhcmV0RG93bkZpbGwnKSA6IGdldEljb24oJ2NhcmV0UmlnaHRGaWxsJyk7XG4gICAgICAgIHRoaXMuZWxzLmNhcHR1cmVPcHRpb25zVG9nZ2xlLmlubmVySFRNTCA9ICcnO1xuICAgICAgICB0aGlzLmVscy5jYXB0dXJlT3B0aW9uc1RvZ2dsZS5hcHBlbmRDaGlsZCh0aGlzLmNyZWF0ZVN2Z0ljb24oZCwgeyB2aWV3Qm94LCBjbGFzc05hbWU6ICdoLTQgdy00JyB9KSk7XG4gICAgICAgIHRoaXMuZWxzLmNhcHR1cmVPcHRpb25zUGFuZWwuY2xhc3NMaXN0LnRvZ2dsZSgnaGlkZGVuJywgIWV4cGFuZGVkKTtcbiAgICB9XG4gICAgZ2V0QmFkZ2VDb2xvclN0eWxlTmFtZShjb2xvcikge1xuICAgICAgICBjb25zdCBjb2xvck5hbWUgPSBjb2xvciA9PT0gJ0dyYXknID8gJ3NsYXRlJyA6IGNvbG9yO1xuICAgICAgICByZXR1cm4gYGJnLSR7Y29sb3JOYW1lLnRvTG93ZXJDYXNlKCl9LTUwMGA7XG4gICAgfVxuICAgIGFwcGx5QmFkZ2VDb2xvclVJKGNvbG9yKSB7XG4gICAgICAgIHRoaXMuZWxzLmJhZGdlQ29sb3JCdXR0b25zLmZvckVhY2goKGJ1dHRvbikgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSBidXR0b24uZGF0YXNldC5jb2xvck5hbWUgPT09IGNvbG9yO1xuICAgICAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsIHNlbGVjdGVkID8gJ3RydWUnIDogJ2ZhbHNlJyk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVscy5iYWRnZUNvbG9yTGFiZWwudGV4dENvbnRlbnQgPSBjb2xvcjtcbiAgICAgICAgdGhpcy5lbHMuYmFkZ2VDb2xvckRvdC5jbGFzc05hbWUgPSAnaW5saW5lLWJsb2NrIHctNCBoLTQgcm91bmRlZC1mdWxsJztcbiAgICAgICAgdGhpcy5lbHMuYmFkZ2VDb2xvckRvdC5jbGFzc0xpc3QuYWRkKHRoaXMuZ2V0QmFkZ2VDb2xvclN0eWxlTmFtZShjb2xvcikpO1xuICAgIH1cbiAgICBhcHBseUJhZGdlUG9zaXRvblVJKHBvc2l0aW9uKSB7XG4gICAgICAgIHRoaXMuZWxzLmJhZGdlUG9zaXRpb25CdXR0b25zLmZvckVhY2goKGJ1dHRvbikgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSBidXR0b24uZGF0YXNldC5wb3NpdGlvbk5hbWUgPT09IHBvc2l0aW9uO1xuICAgICAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS1zZWxlY3RlZCcsIHNlbGVjdGVkID8gJ3RydWUnIDogJ2ZhbHNlJyk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVscy5iYWRnZVBvc2l0aW9uTGFiZWwudGV4dENvbnRlbnQgPSBwb3NpdGlvbi5yZXBsYWNlQWxsKCctJywgJyAnKTtcbiAgICB9XG4gICAgYXBwbHlCYWRnZUdyb3VwU2VsZWN0VUkoZXhpc3RpbmdHcm91cHMsIGRlZmF1dEdyb3VwKSB7XG4gICAgICAgIHRoaXMuZWxzLmJhZGdlR3JvdXBTZWxlY3QuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIHRoaXMuZWxzLmJhZGdlR3JvdXBTZWxlY3QuYXBwZW5kKHRoaXMubWFrZU9wdChVTkdST1VQRUQsIGkxOG4uZ2V0KCdncm91cF91bmdyb3VwZWQnKSwgZGVmYXV0R3JvdXAgPT09IFVOR1JPVVBFRCkpO1xuICAgICAgICBmb3IgKGNvbnN0IGdyb3VwIG9mIGV4aXN0aW5nR3JvdXBzKSB7XG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemUgPSAoZykgPT4gKGcgPz8gJycpLnRyaW0oKTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gbm9ybWFsaXplKGdyb3VwKTtcbiAgICAgICAgICAgIHRoaXMuZWxzLmJhZGdlR3JvdXBTZWxlY3QuYXBwZW5kKHRoaXMubWFrZU9wdCh2YWx1ZSwgZ3JvdXAsIGRlZmF1dEdyb3VwID09PSBncm91cCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNyZWF0ZU9wdCA9IHRoaXMubWFrZU9wdCh0aGlzLk5FV19HUk9VUCwgaTE4bi5nZXQoJ2NvbW1vbl9jcmVhdGUnKSk7XG4gICAgICAgIHRoaXMuZWxzLmJhZGdlR3JvdXBTZWxlY3QuYXBwZW5kKGNyZWF0ZU9wdCk7XG4gICAgfVxuICAgIGFwcGx5VGhlbWUodGhlbWUpIHtcbiAgICAgICAgY29uc3Qgcm9vdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgY29uc3QgaXNEYXJrID0gdGhlbWUgPT09ICdkZXZpY2UnXG4gICAgICAgICAgICA/IHdpbmRvdy5tYXRjaE1lZGlhKCcocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspJykubWF0Y2hlc1xuICAgICAgICAgICAgOiB0aGVtZSA9PT0gJ2RhcmsnO1xuICAgICAgICBpZiAoaXNEYXJrKSB7XG4gICAgICAgICAgICByb290LmNsYXNzTGlzdC5hZGQoJ2RhcmsnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJvb3QuY2xhc3NMaXN0LnJlbW92ZSgnZGFyaycpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZWxzLnRoZW1lTGlnaHRCdG4uc2V0QXR0cmlidXRlKCdkYXRhLWFjdGl2ZScsIFN0cmluZyh0aGVtZSA9PT0gJ2xpZ2h0JykpO1xuICAgICAgICB0aGlzLmVscy50aGVtZURhcmtCdG4uc2V0QXR0cmlidXRlKCdkYXRhLWFjdGl2ZScsIFN0cmluZyh0aGVtZSA9PT0gJ2RhcmsnKSk7XG4gICAgICAgIHRoaXMuZWxzLnRoZW1lRGV2aWNlQnRuLnNldEF0dHJpYnV0ZSgnZGF0YS1hY3RpdmUnLCBTdHJpbmcodGhlbWUgPT09ICdkZXZpY2UnKSk7XG4gICAgfVxuICAgIGFwcGx5U3RvcmUocGFnZUtleXMpIHtcbiAgICAgICAgdGhpcy5lbHMuc3RvcmVDb3VudC50ZXh0Q29udGVudCA9IFN0cmluZyhwYWdlS2V5cy5sZW5ndGgpO1xuICAgICAgICB0aGlzLmVscy5zdG9yZUxpc3QuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIGlmIChwYWdlS2V5cy5sZW5ndGggPD0gMCkge1xuICAgICAgICAgICAgdGhpcy5lbHMuc3RvcmVMaXN0LmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgICAgICAgICAgdGhpcy5lbHMuc3RvcmVFbXB0eS5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHBhZ2VLZXkgb2YgcGFnZUtleXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpRWxlbSA9IHRoaXMuZWwoJ2xpJywgJ3NlbGVjdC1pdGVtJyk7XG4gICAgICAgICAgICBjb25zdCBhV3JhcEVsZW0gPSB0aGlzLmVsKCdkaXYnLCAnbWluLXctMCBmbGV4LTEnKTtcbiAgICAgICAgICAgIGNvbnN0IGFFbGVtID0gdGhpcy5lbCgnYScsICdhbmNob3Igd2hpdGVzcGFjZS1ub3JtYWwgYnJlYWstd29yZHMnLCBwYWdlS2V5KTtcbiAgICAgICAgICAgIGFFbGVtLmhyZWYgPSBwYWdlS2V5O1xuICAgICAgICAgICAgYUVsZW0udGFyZ2V0ID0gJ19ibGFuayc7XG4gICAgICAgICAgICBhV3JhcEVsZW0uYXBwZW5kQ2hpbGQoYUVsZW0pO1xuICAgICAgICAgICAgY29uc3QgZXhwb3J0QnRuRWxlbSA9IHRoaXMuZWwoJ2J1dHRvbicsICdidG4taWNvbicpO1xuICAgICAgICAgICAgZXhwb3J0QnRuRWxlbS5zZXRBdHRyaWJ1dGUoJ2RhdGEtaWdub3JlLWRpc2FibGUnLCAndHJ1ZScpO1xuICAgICAgICAgICAgY29uc3QgZXhwb3J0SWNvbkRlZiA9IGdldEljb24oJ2V4cG9ydCcpO1xuICAgICAgICAgICAgY29uc3QgZXhwb3J0SWNvbiA9IHRoaXMuY3JlYXRlU3ZnSWNvbihleHBvcnRJY29uRGVmLmQsIHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdpY29uLXNtJyxcbiAgICAgICAgICAgICAgICB2aWV3Qm94OiBleHBvcnRJY29uRGVmLnZpZXdCb3gsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGV4cG9ydEJ0bkVsZW0uYXBwZW5kQ2hpbGQoZXhwb3J0SWNvbik7XG4gICAgICAgICAgICBjb25zdCByZW1vdmVCdG5FbGVtID0gdGhpcy5lbCgnYnV0dG9uJywgJ2J0bi1pY29uIGJ0bi1pY29uLS1kYW5nZXInKTtcbiAgICAgICAgICAgIHJlbW92ZUJ0bkVsZW0uc2V0QXR0cmlidXRlKCdkYXRhLWlnbm9yZS1kaXNhYmxlJywgJ3RydWUnKTtcbiAgICAgICAgICAgIGNvbnN0IHJlbW92ZUljb25EZWYgPSBnZXRJY29uKCdyZW1vdmUnKTtcbiAgICAgICAgICAgIGNvbnN0IHJlbW92ZUljb24gPSB0aGlzLmNyZWF0ZVN2Z0ljb24ocmVtb3ZlSWNvbkRlZi5kLCB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnaWNvbi1zbScsXG4gICAgICAgICAgICAgICAgdmlld0JveDogcmVtb3ZlSWNvbkRlZi52aWV3Qm94LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZW1vdmVCdG5FbGVtLmFwcGVuZENoaWxkKHJlbW92ZUljb24pO1xuICAgICAgICAgICAgbGlFbGVtLmFwcGVuZENoaWxkKGFXcmFwRWxlbSk7XG4gICAgICAgICAgICBsaUVsZW0uYXBwZW5kQ2hpbGQoZXhwb3J0QnRuRWxlbSk7XG4gICAgICAgICAgICBsaUVsZW0uYXBwZW5kQ2hpbGQocmVtb3ZlQnRuRWxlbSk7XG4gICAgICAgICAgICB0aGlzLmVscy5zdG9yZUxpc3QuYXBwZW5kQ2hpbGQobGlFbGVtKTtcbiAgICAgICAgICAgIGV4cG9ydEJ0bkVsZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KFVJRXZlbnRUeXBlLkVYUE9SVF9QQUdFX0NMSUNLLCB7IHBhZ2VLZXkgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlbW92ZUJ0bkVsZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KFVJRXZlbnRUeXBlLlJFTU9WRV9QQUdFX0NMSUNLLCB7IHBhZ2VLZXkgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVscy5zdG9yZUxpc3QuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgICAgIHRoaXMuZWxzLnN0b3JlRW1wdHkuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgfVxuICAgIGFwcGx5VG9hc3RNZXNzYWdlcyh0b2FzdE1lc3NhZ2VzKSB7XG4gICAgICAgIGZvciAoY29uc3QgdG9hc3RNZXNzYWdlIG9mIHRvYXN0TWVzc2FnZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHRvYXN0RWxlbSA9IHRoaXMuZ2VuZXJhdGVUb2FzdE1lc3NhZ2UodG9hc3RNZXNzYWdlKTtcbiAgICAgICAgICAgIHRoaXMuZWxzLnRvYXN0UGFyZW50LmFwcGVuZENoaWxkKHRvYXN0RWxlbSk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoVUlFdmVudFR5cGUuVE9BU1RfRElTTUlTU19SRVFVRVNURUQsIHsgdXVpZDogdG9hc3RNZXNzYWdlLnV1aWQgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2VuZXJhdGVUb2FzdE1lc3NhZ2UodG9hc3RNZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IHRvYXN0RWxlbSA9IHRoaXMuZWwoJ2RpdicsIGB0b2FzdCB0b2FzdC0tJHt0b2FzdE1lc3NhZ2Uua2luZH1gKTtcbiAgICAgICAgY29uc3QgdG9hc3RJY29uRGVmID0gZ2V0SWNvbih0b2FzdE1lc3NhZ2Uua2luZCk7XG4gICAgICAgIGNvbnN0IHRvYXN0SWNvbiA9IHRoaXMuY3JlYXRlU3ZnSWNvbih0b2FzdEljb25EZWYuZCwge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiAndG9hc3QtaWNvbicsXG4gICAgICAgICAgICB2aWV3Qm94OiB0b2FzdEljb25EZWYudmlld0JveCxcbiAgICAgICAgICAgIHZhcmlhbnQ6ICdzb2xpZCcsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB0b2FzdEJvZHkgPSB0aGlzLmVsKCdkaXYnLCAndG9hc3QtYm9keScpO1xuICAgICAgICBjb25zdCBkZXNjID0gdGhpcy5lbCgncCcsICd0b2FzdC1kZXNjJywgdG9hc3RNZXNzYWdlLm1lc3NhZ2UpO1xuICAgICAgICB0b2FzdEJvZHkuYXBwZW5kQ2hpbGQoZGVzYyk7XG4gICAgICAgIGNvbnN0IGNsb3NlQnRuID0gdGhpcy5lbCgnYnV0dG9uJywgYHRvYXN0LWNsb3NlIHRvYXN0LWNsb3NlLS0ke3RvYXN0TWVzc2FnZS5raW5kfWApO1xuICAgICAgICBjb25zdCBjbG9zZUljb25EZWYgPSBnZXRJY29uKCdjbG9zZScpO1xuICAgICAgICBjb25zdCBjbG9zZUljb24gPSB0aGlzLmNyZWF0ZVN2Z0ljb24oY2xvc2VJY29uRGVmLmQsIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ2gtMy41IHctMy41JyxcbiAgICAgICAgICAgIHZpZXdCb3g6IGNsb3NlSWNvbkRlZi52aWV3Qm94LFxuICAgICAgICB9KTtcbiAgICAgICAgY2xvc2VCdG4uYXBwZW5kQ2hpbGQoY2xvc2VJY29uKTtcbiAgICAgICAgdG9hc3RFbGVtLmFwcGVuZENoaWxkKHRvYXN0SWNvbik7XG4gICAgICAgIHRvYXN0RWxlbS5hcHBlbmRDaGlsZCh0b2FzdEJvZHkpO1xuICAgICAgICB0b2FzdEVsZW0uYXBwZW5kQ2hpbGQoY2xvc2VCdG4pO1xuICAgICAgICBjb25zdCB0aW1lcklkID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRvYXN0RWxlbS5pc0Nvbm5lY3RlZClcbiAgICAgICAgICAgICAgICB0b2FzdEVsZW0ucmVtb3ZlKCk7XG4gICAgICAgIH0sIHRoaXMuVE9BU1RfQVVUT19ESVNNSVNTKTtcbiAgICAgICAgY2xvc2VCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICAgICAgICBpZiAodG9hc3RFbGVtLmlzQ29ubmVjdGVkKVxuICAgICAgICAgICAgICAgIHRvYXN0RWxlbS5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0b2FzdEVsZW07XG4gICAgfVxuICAgICQoc2VsZWN0b3IpIHtcbiAgICAgICAgY29uc3QgZWwgPSB0aGlzLmRvYy5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgICAgaWYgKCFlbClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgW1BhbmVsVmlld10gTWlzc2luZyBlbGVtZW50OiAke3NlbGVjdG9yfWApO1xuICAgICAgICByZXR1cm4gZWw7XG4gICAgfVxuICAgICRhbGwoc2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9jLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgIH1cbiAgICBlbCh0YWcsIGNsYXNzTmFtZSwgdGV4dCkge1xuICAgICAgICBjb25zdCBub2RlID0gdGhpcy5kb2MuY3JlYXRlRWxlbWVudCh0YWcpO1xuICAgICAgICBpZiAoY2xhc3NOYW1lKVxuICAgICAgICAgICAgbm9kZS5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG4gICAgICAgIGlmICh0ZXh0ICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBub2RlLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICAgIG1ha2VPcHQodmFsdWUsIGxhYmVsLCBzZWxlY3RlZCA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IG8gPSB0aGlzLmRvYy5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICAgICAgby52YWx1ZSA9IHZhbHVlO1xuICAgICAgICBvLnRleHRDb250ZW50ID0gbGFiZWw7XG4gICAgICAgIGlmIChzZWxlY3RlZClcbiAgICAgICAgICAgIG8uc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gbztcbiAgICB9XG4gICAgY3JlYXRlU3ZnSWNvbihkLCBvcHRzID0ge30pIHtcbiAgICAgICAgY29uc3Qgc3ZnTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnO1xuICAgICAgICBjb25zdCBzdmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnTlMsICdzdmcnKTtcbiAgICAgICAgc3ZnLnNldEF0dHJpYnV0ZSgndmlld0JveCcsIG9wdHMudmlld0JveCA/PyAnMCAwIDIwIDIwJyk7XG4gICAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgICAgICAgaWYgKG9wdHMuY2xhc3NOYW1lKVxuICAgICAgICAgICAgc3ZnLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBvcHRzLmNsYXNzTmFtZSk7XG4gICAgICAgIGNvbnN0IHBhdGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnTlMsICdwYXRoJyk7XG4gICAgICAgIHBhdGguc2V0QXR0cmlidXRlKCdkJywgZCk7XG4gICAgICAgIGlmIChvcHRzLnZhcmlhbnQgPT09ICdvdXRsaW5lJykge1xuICAgICAgICAgICAgcGF0aC5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCAnbm9uZScpO1xuICAgICAgICAgICAgcGF0aC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsICdjdXJyZW50Q29sb3InKTtcbiAgICAgICAgICAgIHBhdGguc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCAnMS41Jyk7XG4gICAgICAgICAgICBwYXRoLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWxpbmVjYXAnLCAncm91bmQnKTtcbiAgICAgICAgICAgIHBhdGguc2V0QXR0cmlidXRlKCdzdHJva2UtbGluZWpvaW4nLCAncm91bmQnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBhdGguc2V0QXR0cmlidXRlKCdmaWxsJywgJ2N1cnJlbnRDb2xvcicpO1xuICAgICAgICB9XG4gICAgICAgIHN2Zy5hcHBlbmRDaGlsZChwYXRoKTtcbiAgICAgICAgcmV0dXJuIHN2ZztcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBQYW5lbENvbnRyb2xsZXIgfSBmcm9tICdAcGFuZWwvY29udHJvbGxlci9wYW5lbF9jb250cm9sbGVyJztcbmltcG9ydCB7IFBhbmVsVmlldyB9IGZyb20gJy4uL3ZpZXcvcGFuZWxfdmlldyc7XG4vKipcbiAqIE9yY2hlc3RyYXRlcyBVSSBpbml0aWFsaXphdGlvbiBhbmQgY29ubmVjdGlvbiBsaWZlY3ljbGUuXG4gKiAtIEFwcGx5IGkxOG5cbiAqIC0gRGV0ZWN0IGFuZCBjb25uZWN0IHRvIHRoZSBhY3RpdmUgdGFiXG4gKiAtIFJlc3RvcmUgc3RhdGUgYW5kIHBlcmZvcm0gaW5pdGlhbCByZW5kZXJcbiAqIC0gQmluZCBVSSBldmVudHNcbiAqL1xuYXN5bmMgZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgY29uc3QgdmlldyA9IG5ldyBQYW5lbFZpZXcoZG9jdW1lbnQpO1xuICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgUGFuZWxDb250cm9sbGVyKHZpZXcpO1xuICAgIGF3YWl0IGNvbnRyb2xsZXIuc3RhcnQoKTtcbn1cbihmdW5jdGlvbiBpbml0KCkge1xuICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnIHx8IGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdpbnRlcmFjdGl2ZScpIHtcbiAgICAgICAgdm9pZCBzdGFydCgpLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1BhbmVsIGJvb3RzdHJhcCBmYWlsZWQ6JywgZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4gdm9pZCBzdGFydCgpLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1BhbmVsIGJvb3RzdHJhcCBmYWlsZWQ6JywgZXJyKTtcbiAgICAgICAgfSksIHtcbiAgICAgICAgICAgIG9uY2U6IHRydWUsXG4gICAgICAgIH0pO1xuICAgIH1cbn0pKCk7XG4iXSwibmFtZXMiOlsiaXNSZXN0cmljdGVkIiwicmF3Iiwic3RhcnRzV2l0aCIsInVybCIsIlVSTCIsIlNldCIsImhhcyIsInByb3RvY29sIiwiaG9zdG5hbWUiLCJJVEVNX0NPTE9SUyIsIklURU1fU0hBUEUiLCJJVEVNX1BPU0lUSU9OX1ZBTFVFUyIsIlVOR1JPVVBFRCIsIlVOR1JPVVBFRF9WQUxVRSIsIkxBQkVMX0ZPUk1BVCIsImlzU2NyZWVuSXRlbUxpa2UiLCJ2IiwiYW5jaG9yIiwiYSIsImluaXRpYWxNb2RlbCIsInN0YXR1cyIsInRhYklkIiwicGFnZUtleSIsInBhZ2VLZXlzIiwidGhlbWUiLCJzZWxlY3Rpb25FbmFibGVkIiwiaXRlbXMiLCJkZWZhdWx0U2l6ZSIsImRlZmF1bHRDb2xvciIsImRlZmF1bHRTaGFwZSIsImRlZmF1bHRMYWJlbEZvcm1hdCIsImRlZmF1bHRWaXNpYmxlIiwiZGVmYXVsdFBvc2l0aW9uIiwiZGVmYXVsdEdyb3VwIiwiY2FwdHVyZSIsImZvcm1hdCIsImFyZWEiLCJxdWFsaXR5Iiwic2NhbGUiLCJwYW5lbEV4cGFuZGVkIiwic2VsZWN0SXRlbXMiLCJtaXNzaW5nSWRzIiwidG9hc3RNZXNzYWdlcyIsInNjcmVlblN0YXRlVGFibGUiLCJyb290S2V5IiwiZGVmYXVsdE9mIiwiS0VZIiwiYXN5bmMiLCJyZWFkQWxsIiwiY2hyb21lIiwic3RvcmFnZSIsImxvY2FsIiwiZ2V0Iiwid3JpdGVBbGwiLCJtYXAiLCJzZXQiLCJrZXkiLCJmb3VuZCIsInVuZGVmaW5lZCIsInZhbHVlIiwicmVtb3ZlIiwiY2xlYXIiLCJjcmVhdGVNYXBUYWJsZSIsIm5leHRJZCIsInRoZW1lVGFibGUiLCJ2YWwiLCJjcmVhdGVTaW5nbGV0b24iLCJhcHBseVBhdGNoIiwicGF0Y2giLCJzdGF0ZSIsInJlbW92ZWRJZHMiLCJsZW5ndGgiLCJ0b1JlbW92ZSIsImZpbHRlciIsIml0IiwiaWQiLCJhZGRlZCIsImxhYmVsIiwiSW5maW5pdHkiLCJzaXplIiwiY29sb3IiLCJzaGFwZSIsImxhYmVsRm9ybWF0IiwidmlzaWJsZSIsInBvc2l0aW9uIiwiZ3JvdXAiLCJjb21tZW50IiwicHVzaCIsIm5vcm1hbGl6ZUdyb3VwTGFiZWxzQW5kQ291bnRVbmdyb3VwZWQiLCJidWNrZXRzIiwiTWFwIiwiZm9yRWFjaCIsIml0ZW0iLCJpbmRleCIsInRyaW0iLCJvdXQiLCJzbGljZSIsImJ1Y2tldCIsInNvcnQiLCJiIiwiaSIsImRlc2lyZWQiLCJzdWJzIiwiaTE4biIsImdldE1lc3NhZ2UiLCJsb2NhbGl6ZSIsInJvb3QiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJlbCIsImdldEF0dHJpYnV0ZSIsInRleHRDb250ZW50Iiwic3BlYyIsInBhaXIiLCJzcGxpdCIsImF0dHIiLCJzIiwic2V0QXR0cmlidXRlIiwiU1RBVFVTIiwiU1RBVFVTX01TR19LRVkiLCJSRVNUUklDVEVEIiwiQ09OTkVDVElORyIsIkNPTk5FQ1RFRCIsIkRJU0NPTk5FQ1RFRCIsIlNUQVRVU19DTEFTU19CWV9LRVkiLCJBY3Rpb25UeXBlIiwiRWZmZWN0VHlwZSIsIkNIQU5ORUwiLCJQYW5lbEFwaSIsInJwYyIsImNvbnN0cnVjdG9yIiwidGhpcyIsInNlbmQiLCJib2R5IiwicmVxIiwiY3J5cHRvIiwicmFuZG9tVVVJRCIsImV4cGVjdFJlcGx5IiwicmVuZGVyIiwidHlwZSIsInBheWxvYWQiLCJ0b2dnbGVTZWxlY3QiLCJlbmFibGVkIiwiaG92ZXIiLCJtZWFzdXJlU2l6ZSIsInBpbmciLCJQb3J0UnBjIiwicG9ydCIsInBlbmRpbmciLCJhbGl2ZSIsIm9uTWVzc2FnZSIsImFkZExpc3RlbmVyIiwibXNnIiwiaXNSZXNwb25zZSIsImRlbGV0ZSIsIm9uRGlzY29ubmVjdCIsInJlYXNvbiIsInJ1bnRpbWUiLCJsYXN0RXJyb3IiLCJtZXNzYWdlIiwicmVzb2x2ZSIsIm9rIiwiZXJyb3IiLCJpc0FsaXZlIiwidGltZW91dE1zIiwiUHJvbWlzZSIsInRpbWVyIiwic2V0VGltZW91dCIsInJlcyIsImNsZWFyVGltZW91dCIsInBvc3RNZXNzYWdlIiwiT1dORUQiLCJ0YXJnZXQiLCJtZXRob2QiLCJwYXJhbXMiLCJyZWplY3QiLCJkZWJ1Z2dlciIsInNlbmRDb21tYW5kIiwicmVzdWx0IiwiZXJyIiwiRXJyb3IiLCJTdHJpbmciLCJvcHRzIiwidGFiIiwidGFicyIsImNvbnNvbGUiLCJ3YXJuIiwiZm10Iiwic2V0dGxlTXMiLCJkaWRBdHRhY2giLCJ1c2VkT3ZlcnJpZGUiLCJhdHRhY2giLCJhZGQiLCJpbmNsdWRlcyIsImF0dGFjaE93bmVkIiwiYnJpbmdUb0Zyb250IiwiZ2VvbSIsImNvbnRlbnRTaXplIiwieCIsInkiLCJ3aWR0aCIsImhlaWdodCIsImNzc1Zpc3VhbFZpZXdwb3J0IiwiTWF0aCIsIm1heCIsImZsb29yIiwicGFnZVgiLCJwYWdlWSIsImNlaWwiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImdldFZpZXdwb3J0Q3NzUmVjdCIsInVzZU92ZXJyaWRlIiwiY2xpcCIsImNhcHR1cmVCZXlvbmRWaWV3cG9ydCIsInNob3VsZFNjcm9sbFRvcCIsIm1ldHJpY3MiLCJkZXZpY2VTY2FsZUZhY3RvciIsIm1vYmlsZSIsInNjcmVlbldpZHRoIiwic2NyZWVuSGVpZ2h0IiwicG9zaXRpb25YIiwicG9zaXRpb25ZIiwicmVzb2x2ZUdlb21ldHJ5IiwiZXhwcmVzc2lvbiIsInIiLCJjYXBQYXJhbXMiLCJmcm9tU3VyZmFjZSIsIm1pbiIsInJvdW5kIiwiZGF0YSIsImZpbGVuYW1lIiwiYmFzZSIsInRpdGxlIiwiaG9zdCIsInJlcGxhY2UiLCJEYXRlIiwidG9JU09TdHJpbmciLCJtYWtlRmlsZW5hbWUiLCJkb3dubG9hZHMiLCJkb3dubG9hZCIsInNhdmVBcyIsImRldGFjaCIsImRldGFjaE93bmVkIiwiZXhwb3J0U2NyZWVuU3RhdGUiLCJwcmVmaXgiLCJraW5kIiwidmVyc2lvbiIsImV4cG9ydGVkQXQiLCJ0ZXh0IiwiYnl0ZXMiLCJUZXh0RW5jb2RlciIsImVuY29kZSIsImJpbiIsImZyb21DaGFyQ29kZSIsImJ0b2EiLCJ0b0Jhc2U2NFV0ZjgiLCJKU09OIiwic3RyaW5naWZ5IiwiZCIsInBhZCIsIm4iLCJ3IiwicGFkU3RhcnQiLCJ0em8iLCJnZXRUaW1lem9uZU9mZnNldCIsInNpZ24iLCJoaCIsImFicyIsIm1tIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwidGltZXN0YW1wIiwiaW1wb3J0U2NyZWFuU3RhdGUiLCJmaWxlIiwiaXNKc29uQnlFeHQiLCJ0ZXN0IiwibmFtZSIsImlzSnNvbkJ5TWltZSIsInBhcnNlZCIsInBhcnNlIiwibyIsIkFycmF5IiwiaXNBcnJheSIsImV2ZXJ5IiwiaXNWYWxpZFBheWxvYWQiLCJrZXlPZiIsImV4aXN0aW5nU2V0Iiwic3VjY2Vzc01lc3NhZ2UiLCJVSUV2ZW50VHlwZSIsIm9uRGV0YWNoIiwiZGVidWdnZWUiLCJQYW5lbENvbnRyb2xsZXIiLCJ2aWV3IiwibW9kZWwiLCJzdHJ1Y3R1cmVkQ2xvbmUiLCJjb25uIiwiY3VycmVudFdpbmRvd0lkIiwic3RhdGljIiwiUkVOREVSX0NPTlRFTlQiLCJUT0dHTEVfU0VMRUNUX09OX0NPTlRFTlQiLCJDTEVBUl9DT05URU5UIiwiSE9WRVIiLCJzdGFydCIsImRpc3BhdGNoIiwiSU5JVCIsImVuc3VyZUNvbm5lY3Rpb25BbGl2ZSIsImZvcmNlUmVjb25uZWN0IiwicmVnaXN0ZXJWaWV3SGFuZGxlcnMiLCJ3aW5kb3dzIiwiZ2V0Q3VycmVudCIsInNlbmRlcldpbmRvd0lkIiwid2luZG93SWQiLCJvbiIsIlRPR0dMRV9TRUxFQ1QiLCJDTEVBUiIsIkNMRUFSX0FMTCIsIkNBUFRVUkUiLCJNRUFTVVJFX0NPTlRFTlRfU0laRSIsIkJBREdFX1NJWkVfQ0hBTkdFIiwiU0VUX0JBREdFX1NJWkUiLCJCQURHRV9DT0xPUl9TRUxFQ1QiLCJTRVRfQkFER0VfQ09MT1IiLCJCQURHRV9TSEFQRV9DSEFOR0UiLCJTRVRfQkFER0VfU0hBUEUiLCJCQURHRV9MQUJFTF9GT1JNQVRfQ0hBTkdFIiwiU0VUX0JBREdFX0xBQkVMX0ZPUk1BVCIsIkJBREdFX1ZJU0lCTEVfQ0hBTkdFIiwiU0VUX0JBREdFX1ZJU0lCTEUiLCJCQURHRV9ERUxFVEUiLCJCQURHRV9QT1NJVElPTl9TRUxFQ1QiLCJTRVRfQkFER0VfUE9TSVRJT04iLCJUT0dHTEVfQ0FQVFVSRV9QQU5FTCIsIkNBUFRVUkVfRk9STUFUX0NIQU5HRSIsIlNFVF9DQVBUVVJFX0ZPUk1BVCIsIkNBUFRVUkVfQVJFQV9DSEFOR0UiLCJTRVRfQ0FQVFVSRV9BUkVBIiwiQ0FQVFVSRV9RVUFMSVRZX0NIQU5HRSIsIlNFVF9DQVBUVVJFX1FVQUxJVFkiLCJDQVBUVVJFX1NDQUxFX0NIQU5HRSIsIlNFVF9DQVBUVVJFX1NDQUxFIiwiUkVPUkRFUl9JVEVNUyIsImZyb21JZCIsImZyb21JbmRleCIsInRvSW5kZXgiLCJTRVRfR1JPVVAiLCJJVEVNX1NFTEVDVElPTl9DSEFOR0VEIiwiSVRFTV9IT1ZFUl9JTiIsIklURU1fSE9WRVJfT1VUIiwiSVRFTV9DT01NRU5UX0FQUExZIiwiVVBEQVRFX0lURU1fQ09NTUVOVCIsIlVQREFURV9USEVNRSIsIlNFVFRJTkdfTU9EQUxfU0hPVyIsIlNUT1JFX1JFTE9BRF9SRVFVRVNURUQiLCJJTVBPUlRfU0NSRUFOX1NUQVRFX0ZJTEUiLCJUT0FTVF9ESVNNSVNTX1JFUVVFU1RFRCIsInV1aWQiLCJSRU1PVkVfUEFHRV9DTElDSyIsIlJFTU9WRV9TQ1JFRU5fU1RBVEVfQllfUEFHRSIsIkVYUE9SVF9QQUdFX0NMSUNLIiwiRVhQT1JUX1NDUkVFTl9TVEFURV9CWV9QQUdFIiwiYWN0aW9uIiwibmV4dCIsImVmZmVjdHMiLCJTRVRfVEhFTUUiLCJTRVRfU1RBVFVTIiwiUkVTVE9SRV9TVEFURSIsIlNFVF9NSVNTSU5HX0lEUyIsIkNMRUFSX1NUQVRFIiwiQ09OVEVOVF9TRUxFQ1RFRCIsIlBFUlNJU1RfU1RBVEUiLCJpdGVtc01hcmtlZEZvclJlbGFiZWwiLCJuZXh0R3JvdXBSYXciLCJuZXh0R3JvdXAiLCJ1cGRhdGVJdGVtQ250IiwiTnVtYmVyIiwiTUFYX1NBRkVfSU5URUdFUiIsInVwZGF0ZUdyb3VwQW5kRGVmZXJSZWxhYmVsIiwiQ0FQVFVSRV9SRVFVRVNURUQiLCJOT1RJRllfRVJST1IiLCJDQVBUVVJFX1NVQ0NFRURFRCIsIkNBUFRVUkVfRkFJTEVEIiwiUmFuZ2VFcnJvciIsImZyb21JZHgiLCJmaW5kSW5kZXgiLCJyZW9yZGVySXRlbUxhYmVsIiwiaXNDaGVjayIsImFwcGx5SXRlbVNlbGVjdGlvbkNoYW5nZWRCeUlkIiwiZyIsImdyb3VwSWRzIiwiZ3JvdXBTZXQiLCJhcHBseUl0ZW1TZWxlY3Rpb25DaGFuZ2VkRm9yR3JvdXAiLCJhbGxDaGVjayIsIlBPUlRfRElTQ09OTkVDVEVEIiwiUkVBRF9TQ1JFRU5fU1RBVEVfU1RPUkUiLCJTVE9SRV9SRUxPQURfU1VDQ0VFREVEIiwiSU1QT1JUX1NVQ0NFRURFRCIsIklNUE9SVF9GQUlMRUQiLCJ0IiwiUkVNT1ZFX1NDUkVFTl9TVEFURV9TVE9SRV9CWV9QQUdFX0tFWSIsIkVYUE9SVF9TQ1JFRU5fU1RBVEVfQllfUEFHRV9LRVkiLCJFWFBPUlRfRkFJTEVEIiwidXBkYXRlIiwiZXhlY0VmZmVjdHMiLCJjYXRjaCIsInNvbWUiLCJmeCIsIlJFUVVJUkVTX0NPTk4iLCJjb250ZXh0Q2hhbmdlZCIsImFwaSIsInByZXYiLCJzY3JlZW5TdGF0ZXMiLCJPYmplY3QiLCJrZXlzIiwiZSIsInN0IiwicHJldktleSIsInF1ZXJ5IiwiYWN0aXZlIiwiY3VycmVudFdpbmRvdyIsImdldEFjdGl2ZVRhYiIsIm5ld0tleSIsImluY2x1ZGVIYXNoIiwidSIsIm9yaWdpbiIsInBhdGhuYW1lIiwic2VhcmNoIiwiaGFzaCIsImRpc2Nvbm5lY3QiLCJzY3JpcHRpbmciLCJleGVjdXRlU2NyaXB0IiwiZmlsZXMiLCJjb25uZWN0IiwibGlzdGVuZXJzIiwiZm4iLCJjYiIsImRpc3Bvc2UiLCJjb25uZWN0VG9UYWIiLCJhbmNob3JzIiwidW5pcSIsImZyb20iLCJmaW5kIiwiQm9vbGVhbiIsInRvQWRkIiwiaGFuZGxlU2VsZWN0ZWQiLCJJQ09OUyIsImNhcmV0RG93biIsInZpZXdCb3giLCJjYXJldERvd25GaWxsIiwiY2FyZXRSaWdodCIsImNhcmV0UmlnaHRGaWxsIiwic3VjY2VzcyIsImV4cG9ydCIsImNsb3NlIiwiZ2V0SWNvbiIsImJ5TGFiZWxUaGVuSWQiLCJQYW5lbFZpZXciLCJkb2MiLCJlbHMiLCJORVdfR1JPVVAiLCJIT1ZFUl9PVVRfREVMQVkiLCJkcmFnRWwiLCJkcmFnU3RhcnRQYXJlbnQiLCJkcmFnU3RhcnRJbmRleCIsImhvdmVyT3V0VGltZXIiLCJjb2xsYXBzZWRHcm91cHMiLCJUT0FTVF9BVVRPX0RJU01JU1MiLCIkIiwidG9nZ2xlQnRuIiwidG9nZ2xlSWNvbiIsInRvZ2dsZUxhYmVsIiwiY2xlYXJCdG4iLCJjYXB0dXJlQnRuIiwibGlzdCIsImVtcHR5IiwiY291bnQiLCJjYXB0dXJlT3B0aW9uc1RvZ2dsZSIsImNhcHR1cmVPcHRpb25zUGFuZWwiLCJjYXB0dXJlRm10UmFkaW9zIiwiJGFsbCIsImNhcHR1cmVBcmVhUmFkaW9zIiwianBlZ09ubHlFbHMiLCJqcGVnUXVhbGl0eVJhbmdlIiwianBlZ1F1YWxpdHlOdW1iZXIiLCJjYXB0dXJlU2NhbGVSYW5nZSIsImNhcHR1cmVTY2FsZU51bWJlciIsImJhZGdlU2l6ZVJhbmdlIiwiYmFkZ2VTaXplTnVtYmVyIiwiYmFkZ2VDb2xvckJ1dHRvbnMiLCJiYWRnZUNvbG9yTGFiZWwiLCJiYWRnZUNvbG9yRG90IiwiYmFkZ2VTaGFwZVNlbGVjdCIsImJhZGdlTGFiZWxGb3JtYXRTZWxlY3QiLCJiYWRnZVZpc2libGVTZWxlY3QiLCJiYWRnZURlbGV0ZUJ1dHRvbiIsImJhZGdlUG9zaXRpb25CdXR0b25zIiwiYmFkZ2VQb3NpdGlvbkxhYmVsIiwiYmFkZ2VHcm91cFNlbGVjdCIsImdyb3VwTmFtZU1vZGFsIiwiZ3JvdXBOYW1lSW5wdXQiLCJncm91cE5hbWVDYW5jZWxCdG4iLCJncm91cE5hbWVDcmVhdGVsQnRuIiwiaXRlbUNvbW1lbnRNb2RhbCIsIml0ZW1Db21tZW50SW5wdXQiLCJpdGVtQ29tbWVudElkSW5wdXQiLCJpdGVtQ29tbWVudENhbmNlbEJ0biIsIml0ZW1Db21tZW50QXBwbHlCdG4iLCJzZWxlY3RJdGVtQWxsQ2hlY2tib3giLCJzZXR0aW5nTW9kYWwiLCJzZXR0aW5nQnV0dG9uIiwic2V0dGluZ0Nsb3NlQnV0dG9uIiwidGhlbWVMaWdodEJ0biIsInRoZW1lRGFya0J0biIsInRoZW1lRGV2aWNlQnRuIiwiaW1wb3J0RmlsZUlucHV0IiwiaW1wb3J0QnRuIiwic3RvcmVDb3VudCIsInN0b3JlTGlzdCIsInN0b3JlRW1wdHkiLCJ0b2FzdFBhcmVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJlbWl0IiwidXBkYXRlUXVhbGl0eVZpc2liaWxpdHkiLCJnZXRTZWxlY3RlZENhcHR1cmVGb3JtYXQiLCJnZXRTZWxlY3RlZENhcHR1cmVBcmVhIiwiYmluZFN5bmMiLCJmaXJlU2l6ZSIsImlzRmluaXRlIiwiYnRuIiwiZGF0YXNldCIsImNvbG9yTmFtZSIsImlzSXRlbVNoYXBlIiwiaXNMYWJlbEZvcm1hdCIsInBvc2l0aW9uTmFtZSIsImNsYXNzTGlzdCIsImFwcGx5VGhlbWUiLCJjbGljayIsInNlbGVjdGVkIiwiY2hlY2tlZCIsImNhbmNlbEhvdmVyT3V0Iiwic2NoZWR1bGVIb3Zlck91dCIsImhhbmRsZXIiLCJhcnIiLCJoIiwiYXBwbHlUb2FzdE1lc3NhZ2VzIiwiYXBwbHlTdG9yZSIsInJlbmRlclN0YXR1cyIsInJlbmRlclRvZ2dsZSIsInJlbmRlckxpc3QiLCJzZWxlY3RSYWRpb0J5VmFsdWUiLCJhcHBseUNhcHR1cmVPcHRpb25zVG9nZ2xlVUkiLCJhcHBseUJhZGdlQ29sb3JVSSIsImFwcGx5QmFkZ2VQb3NpdG9uVUkiLCJhcHBseUJhZGdlR3JvdXBTZWxlY3RVSSIsImdldEV4aXN0aW5nR3JvdXBzIiwic3R5bGUiLCJjbGFzc05hbWUiLCJkb3QiLCJjcmVhdGVFbGVtZW50IiwibXNnS2V5IiwiZ2V0U3RhdHVzTWVzc2FnZSIsInJlcGxhY2VDaGlsZHJlbiIsImRpc2FibGVGb3JtQ29udHJvbHMiLCJpY29uIiwiYWxsQ2hlY2tlZCIsImdyb3VwcyIsImdyb3VwQnlHcm91cCIsImdyb3VwS2V5cyIsImxvY2FsZUNvbXBhcmUiLCJmcmFnIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImdLZXkiLCJzZWN0aW9uIiwicmVuZGVyR3JvdXBTZWN0aW9uIiwiYXBwZW5kQ2hpbGQiLCJnSXRlbXMiLCJpc0NvbGxhcHNlZCIsImhlYWRlciIsImNoZWNrYm94V3JhcCIsImNoZWNrYm94IiwiYXBwZW5kIiwibGVmdCIsImNyZWF0ZVN2Z0ljb24iLCJ0b2dnbGVQYXRoIiwicXVlcnlTZWxlY3RvciIsInVsIiwiYXR0YWNoVWxEbkRIYW5kbGVycyIsInNlbGVjdENoZWNrZWQiLCJyZW5kZXJJdGVtIiwiaXNNaXNzaW5nIiwibGlCYXNlIiwibGkiLCJkcmFnZ2FibGUiLCJwYXJlbnRFbGVtZW50IiwicHJvdG90eXBlIiwiaW5kZXhPZiIsImNhbGwiLCJjaGlsZHJlbiIsImRhdGFUcmFuc2ZlciIsImVmZmVjdEFsbG93ZWQiLCJwYXJlbnQiLCJlbmRJbmRleCIsImNoZWNrYm94U3R5bGUiLCJiYWRnZVN0eWxlIiwiYmFkZ2UiLCJtYWluIiwiY2hpcCIsImNvbW1lbnRCdG4iLCJnZW5lcmF0ZUNvbW1lbnRCdG4iLCJwcmV2ZW50RGVmYXVsdCIsInRhcmdldExpIiwiY2xvc2VzdCIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJpc0FmdGVyIiwiY2xpZW50WSIsInRvcCIsImluc2VydEJlZm9yZSIsIm5leHRTaWJsaW5nIiwibSIsImlzSnBlZyIsInRvZ2dsZSIsImRpc2FibGVkIiwicmFkaW9zIiwicmFuZ2VFbCIsIm51bWJlckVsIiwib25WYWx1ZSIsInJlYWROdW0iLCJmYWxsYmFjayIsIk5hTiIsInN5bmMiLCJyYXdTdHIiLCJORUdBVElWRV9JTkZJTklUWSIsIlBPU0lUSVZFX0lORklOSVRZIiwic3RlcCIsImNsYW1wZWQiLCJjbGFtcCIsInJvdW5kZWQiLCJmaXhlZCIsInRvRml4ZWQiLCJjb250cm9scyIsImVuYWJsZUFsbCIsImVuYWJsZUlnbm9yZU9ubHkiLCJlbmFibGVOb25lIiwic2hvdWxkRW5hYmxlIiwiaGFzQXR0cmlidXRlIiwiZXhwYW5kZWQiLCJpbm5lckhUTUwiLCJnZXRCYWRnZUNvbG9yU3R5bGVOYW1lIiwidG9Mb3dlckNhc2UiLCJidXR0b24iLCJyZXBsYWNlQWxsIiwiZXhpc3RpbmdHcm91cHMiLCJkZWZhdXRHcm91cCIsIm1ha2VPcHQiLCJub3JtYWxpemUiLCJjcmVhdGVPcHQiLCJkb2N1bWVudEVsZW1lbnQiLCJ3aW5kb3ciLCJtYXRjaE1lZGlhIiwibWF0Y2hlcyIsImxpRWxlbSIsImFXcmFwRWxlbSIsImFFbGVtIiwiaHJlZiIsImV4cG9ydEJ0bkVsZW0iLCJleHBvcnRJY29uRGVmIiwiZXhwb3J0SWNvbiIsInJlbW92ZUJ0bkVsZW0iLCJyZW1vdmVJY29uRGVmIiwicmVtb3ZlSWNvbiIsInRvYXN0TWVzc2FnZSIsInRvYXN0RWxlbSIsImdlbmVyYXRlVG9hc3RNZXNzYWdlIiwidG9hc3RJY29uRGVmIiwidG9hc3RJY29uIiwidmFyaWFudCIsInRvYXN0Qm9keSIsImRlc2MiLCJjbG9zZUJ0biIsImNsb3NlSWNvbkRlZiIsImNsb3NlSWNvbiIsInRpbWVySWQiLCJpc0Nvbm5lY3RlZCIsInNlbGVjdG9yIiwidGFnIiwibm9kZSIsInN2Z05TIiwic3ZnIiwiY3JlYXRlRWxlbWVudE5TIiwicGF0aCIsImNvbnRyb2xsZXIiLCJyZWFkeVN0YXRlIiwib25jZSJdLCJzb3VyY2VSb290IjoiIn0=