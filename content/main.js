(()=>{"use strict";const e="spsk:panel-content:v1",t="PING",n="TOGGLE_SELECT",o="RENDER",s="CLEAR",i="SELECTED",r=new Set(["role","name","aria-label","rel","href"]);function l(e,t){let n=r.has(e);n||=e.startsWith("data-")&&h(e);let o=h(t)&&t.length<100;return o||=t.startsWith("#")&&h(t.slice(1)),n&&o}function a(e){return h(e)}function c(e){return h(e)}function u(e){return!0}function d(e,t){if(e.nodeType!==Node.ELEMENT_NODE)throw new Error("Can't generate CSS selector for non-element node type.");if("html"===e.tagName.toLowerCase())return"html";const n={root:document.body,idName:a,className:c,tagName:u,attr:l,timeoutMs:1e3,seedMinLength:3,optimizedMinLength:2,maxNumberOfPathChecks:1/0},o=new Date,s={...n,...t},i=function(e,t){return e.nodeType===Node.DOCUMENT_NODE?e:e===t.root?e.ownerDocument:e}(s.root,n);let r,d=0;for(const t of function*(e,t,n){const o=[];let s=[],i=e,r=0;for(;i&&i!==n;){const e=f(i,t);for(const t of e)t.level=r;if(o.push(e),i=i.parentElement,r++,s.push(...b(o)),r>=t.seedMinLength){s.sort(v);for(const e of s)yield e;s=[]}}s.sort(v);for(const e of s)yield e}(e,s,i)){if((new Date).getTime()-o.getTime()>s.timeoutMs||d>=s.maxNumberOfPathChecks){const t=g(e,i);if(!t)throw new Error(`Timeout: Can't find a unique selector after ${s.timeoutMs}ms`);return m(t)}if(d++,C(t,i)){r=t;break}}if(!r)throw new Error("Selector was not found.");const h=[...x(r,e,s,i,o)];return h.sort(v),h.length>0?m(h[0]):m(r)}function h(e){if(/^[a-z\-]{3,}$/i.test(e)){const t=e.split(/-|[A-Z]/);for(const e of t){if(e.length<=2)return!1;if(/[^aeiou]{4,}/i.test(e))return!1}return!0}return!1}function f(e,t){const n=[],o=e.getAttribute("id");o&&t.idName(o)&&n.push({name:"#"+CSS.escape(o),penalty:0});for(let o=0;o<e.classList.length;o++){const s=e.classList[o];t.className(s)&&n.push({name:"."+CSS.escape(s),penalty:1})}for(let o=0;o<e.attributes.length;o++){const s=e.attributes[o];t.attr(s.name,s.value)&&n.push({name:`[${CSS.escape(s.name)}="${CSS.escape(s.value)}"]`,penalty:2})}const s=e.tagName.toLowerCase();if(t.tagName(s)){n.push({name:s,penalty:5});const t=y(e,s);void 0!==t&&n.push({name:w(s,t),penalty:10})}const i=y(e);return void 0!==i&&n.push({name:E(s,i),penalty:50}),n}function m(e){let t=e[0],n=t.name;for(let o=1;o<e.length;o++){const s=e[o].level||0;n=t.level===s-1?`${e[o].name} > ${n}`:`${e[o].name} ${n}`,t=e[o]}return n}function p(e){return e.map(e=>e.penalty).reduce((e,t)=>e+t,0)}function v(e,t){return p(e)-p(t)}function y(e,t){const n=e.parentNode;if(!n)return;let o=n.firstChild;if(!o)return;let s=0;for(;o&&(o.nodeType!==Node.ELEMENT_NODE||void 0!==t&&o.tagName.toLowerCase()!==t||s++,o!==e);)o=o.nextSibling;return s}function g(e,t){let n=0,o=e;const s=[];for(;o&&o!==t;){const e=o.tagName.toLowerCase(),t=y(o,e);if(void 0===t)return;s.push({name:w(e,t),penalty:NaN,level:n}),o=o.parentElement,n++}if(C(s,t))return s}function E(e,t){return"html"===e?"html":`${e}:nth-child(${t})`}function w(e,t){return"html"===e?"html":`${e}:nth-of-type(${t})`}function*b(e,t=[]){if(e.length>0)for(let n of e[0])yield*b(e.slice(1,e.length),t.concat(n));else yield t}function C(e,t){const n=m(e);switch(t.querySelectorAll(n).length){case 0:throw new Error(`Can't select any node with this selector: ${n}`);case 1:return!0;default:return!1}}function*x(e,t,n,o,s){if(e.length>2&&e.length>n.optimizedMinLength)for(let i=1;i<e.length-1;i++){if((new Date).getTime()-s.getTime()>n.timeoutMs)return;const r=[...e];r.splice(i,1),C(r,o)&&o.querySelector(m(r))===t&&(yield r,yield*x(r,t,n,o,s))}}let L=null,N=null;const k=new Map;let S=!1;async function $(){if(N)return;const e=document.createElement("div");e.id="spsk-root",(document.documentElement||document.body).appendChild(e),L=e.attachShadow({mode:"open"});const t=document.createElement("link");t.rel="stylesheet",t.href=chrome.runtime.getURL("styles/overlay.css"),L.appendChild(t),N=document.createElement("div"),N.className="spsk-overlay",L.appendChild(N);const n=()=>{S||(S=!0,requestAnimationFrame(()=>{S=!1,D()}))};window.addEventListener("scroll",n,{passive:!0}),window.addEventListener("resize",n,{passive:!0}),window.visualViewport&&(window.visualViewport.addEventListener("scroll",n,{passive:!0}),window.visualViewport.addEventListener("resize",n,{passive:!0}))}async function M(){N&&(N.innerHTML="",k.clear())}function T(e){try{return document.querySelector(e)}catch{return null}}function D(){for(const[e,t]of k.entries()){let e=t.elRef?.deref()??null;if(!e){const n=t.boxEl.dataset.css;if(!n)continue;e=T(n),t.elRef=e?new WeakRef(e):null,t.missing=!e}if(!e){t.boxEl.style.display="none";continue}t.boxEl.style.display="";const n=e.getBoundingClientRect();t.boxEl.style.left=`${n.left}px`,t.boxEl.style.top=`${n.top}px`,t.boxEl.style.width=`${n.width}px`,t.boxEl.style.height=`${n.height}px`}}const O=new class{enabled=!1;onPick;onClick=e=>this.handleClick(e);onMouseOver=e=>this.highlight(e);hoverBox=null;constructor(e){this.onPick=e}setEnabled(e){e!==this.enabled&&(this.enabled=e,e?(document.addEventListener("click",this.onClick,!0),document.addEventListener("mouseover",this.onMouseOver,!0)):(document.removeEventListener("click",this.onClick,!0),document.removeEventListener("mouseover",this.onMouseOver,!0),this.removeHover()))}handleClick(e){if(!this.enabled)return;e.preventDefault(),e.stopPropagation();const t=e.target;t&&1===t.nodeType&&this.onPick(t)}highlight(e){if(!this.enabled)return;const t=e.target;if(!t||1!==t.nodeType)return;const n=t.getBoundingClientRect();this.ensureHover();const o=this.hoverBox;o.style.left=`${n.left+window.scrollX}px`,o.style.top=`${n.top+window.scrollY}px`,o.style.width=`${n.width}px`,o.style.height=`${n.height}px`}ensureHover(){this.hoverBox||(this.hoverBox=document.createElement("div"),Object.assign(this.hoverBox.style,{position:"absolute",outline:"2px dashed #00a",pointerEvents:"none",zIndex:"2147483647"}),document.body.appendChild(this.hoverBox))}removeHover(){this.hoverBox?.remove(),this.hoverBox=null}}(function(e){const t=function(e){return{kind:"css",value:d(e,{timeoutMs:500}),version:1}}(e);B?.postMessage({type:i,payload:{anchors:[t]},id:crypto.randomUUID()})});let B=null;chrome.runtime.onConnect.addListener(async i=>{(function(t){return function(e,t){return e.name===t}(t,e)})(i)&&(B=i,await $(),i.onMessage.addListener(async e=>{if(e?.type)switch(e.type){case t:i.postMessage({id:e.id,ok:!0});break;case n:O.setEnabled(!!e.payload?.enabled);break;case o:{const t=e.payload.items;await async function(e){if(N||await $(),!N)return;const t=new Set(e.map(e=>e.id));for(const[e,n]of k.entries())t.has(e)||(n.boxEl.remove(),k.delete(e));for(const t of e){let e=k.get(t.id);if(!e){const n=document.createElement("div");n.className="spsk-box";const o=document.createElement("div");o.className="spsk-badge",n.appendChild(o),N.appendChild(n),e={boxEl:n,badgeEl:o,elRef:null,missing:!1},k.set(t.id,e)}e.badgeEl.textContent=String(t.label)}requestAnimationFrame(D)}(t),function(e){for(const t of e){const e=k.get(t.id);e&&(e.boxEl.dataset.css=t.anchor.value)}}(t);break}case s:await M()}}),i.onDisconnect.addListener(()=>{O.setEnabled(!1),M()}))})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,