(()=>{"use strict";const e="spsk:panel-content:v1",t="PING",n="TOGGLE_SELECT",o="RENDER",s="CLEAR",i="HOVER",r="MEASURE_SIZE",l="SELECTED",a="MISSING_IDS",c="CONTENT_SIZE_RESULT",d=new Set(["role","name","aria-label","rel","href"]);function u(e,t){let n=d.has(e);n||=e.startsWith("data-")&&g(e);let o=g(t)&&t.length<100;return o||=t.startsWith("#")&&g(t.slice(1)),n&&o}function h(e){return g(e)}function m(e){return g(e)}function p(e){return!0}function f(e,t){if(e.nodeType!==Node.ELEMENT_NODE)throw new Error("Can't generate CSS selector for non-element node type.");if("html"===e.tagName.toLowerCase())return"html";const n={root:document.body,idName:h,className:m,tagName:p,attr:u,timeoutMs:1e3,seedMinLength:3,optimizedMinLength:2,maxNumberOfPathChecks:1/0},o=new Date,s={...n,...t},i=function(e,t){return e.nodeType===Node.DOCUMENT_NODE?e:e===t.root?e.ownerDocument:e}(s.root,n);let r,l=0;for(const t of function*(e,t,n){const o=[];let s=[],i=e,r=0;for(;i&&i!==n;){const e=E(i,t);for(const t of e)t.level=r;if(o.push(e),i=i.parentElement,r++,s.push(...L(o)),r>=t.seedMinLength){s.sort(v);for(const e of s)yield e;s=[]}}s.sort(v);for(const e of s)yield e}(e,s,i)){if((new Date).getTime()-o.getTime()>s.timeoutMs||l>=s.maxNumberOfPathChecks){const t=N(e,i);if(!t)throw new Error(`Timeout: Can't find a unique selector after ${s.timeoutMs}ms`);return b(t)}if(l++,k(t,i)){r=t;break}}if(!r)throw new Error("Selector was not found.");const a=[...S(r,e,s,i,o)];return a.sort(v),a.length>0?b(a[0]):b(r)}function g(e){if(/^[a-z\-]{3,}$/i.test(e)){const t=e.split(/-|[A-Z]/);for(const e of t){if(e.length<=2)return!1;if(/[^aeiou]{4,}/i.test(e))return!1}return!0}return!1}function E(e,t){const n=[],o=e.getAttribute("id");o&&t.idName(o)&&n.push({name:"#"+CSS.escape(o),penalty:0});for(let o=0;o<e.classList.length;o++){const s=e.classList[o];t.className(s)&&n.push({name:"."+CSS.escape(s),penalty:1})}for(let o=0;o<e.attributes.length;o++){const s=e.attributes[o];t.attr(s.name,s.value)&&n.push({name:`[${CSS.escape(s.name)}="${CSS.escape(s.value)}"]`,penalty:2})}const s=e.tagName.toLowerCase();if(t.tagName(s)){n.push({name:s,penalty:5});const t=w(e,s);void 0!==t&&n.push({name:C(s,t),penalty:10})}const i=w(e);return void 0!==i&&n.push({name:x(s,i),penalty:50}),n}function b(e){let t=e[0],n=t.name;for(let o=1;o<e.length;o++){const s=e[o].level||0;n=t.level===s-1?`${e[o].name} > ${n}`:`${e[o].name} ${n}`,t=e[o]}return n}function y(e){return e.map(e=>e.penalty).reduce((e,t)=>e+t,0)}function v(e,t){return y(e)-y(t)}function w(e,t){const n=e.parentNode;if(!n)return;let o=n.firstChild;if(!o)return;let s=0;for(;o&&(o.nodeType!==Node.ELEMENT_NODE||void 0!==t&&o.tagName.toLowerCase()!==t||s++,o!==e);)o=o.nextSibling;return s}function N(e,t){let n=0,o=e;const s=[];for(;o&&o!==t;){const e=o.tagName.toLowerCase(),t=w(o,e);if(void 0===t)return;s.push({name:C(e,t),penalty:NaN,level:n}),o=o.parentElement,n++}if(k(s,t))return s}function x(e,t){return"html"===e?"html":`${e}:nth-child(${t})`}function C(e,t){return"html"===e?"html":`${e}:nth-of-type(${t})`}function*L(e,t=[]){if(e.length>0)for(let n of e[0])yield*L(e.slice(1,e.length),t.concat(n));else yield t}function k(e,t){const n=b(e);switch(t.querySelectorAll(n).length){case 0:throw new Error(`Can't select any node with this selector: ${n}`);case 1:return!0;default:return!1}}function*S(e,t,n,o,s){if(e.length>2&&e.length>n.optimizedMinLength)for(let i=1;i<e.length-1;i++){if((new Date).getTime()-s.getTime()>n.timeoutMs)return;const r=[...e];r.splice(i,1),k(r,o)&&o.querySelector(b(r))===t&&(yield r,yield*S(r,t,n,o,s))}}function T(e){return e instanceof HTMLElement}let M=null,I=null;const $=new Map;let D=!1,H=null,P=!1;async function A(){if(I&&M)return;let e=document.getElementById("spsk-root");e||(e=document.createElement("div"),e.id="spsk-root",(document.documentElement||document.body).appendChild(e)),M=e.shadowRoot??e.attachShadow({mode:"open"});const t=chrome.runtime.getURL("styles/overlay.css");let n=M.querySelector(`link[rel="stylesheet"][href="${t}"]`);if(n||(n=document.createElement("link"),n.rel="stylesheet",n.href=t,M.appendChild(n)),I=M.querySelector("div.spsk-overlay"),I||(I=document.createElement("div"),I.className="spsk-overlay",M.appendChild(I)),!P){const e=()=>{D||(D=!0,requestAnimationFrame(()=>{D=!1,F()}))};window.addEventListener("scroll",e,{passive:!0}),window.addEventListener("resize",e,{passive:!0}),window.visualViewport&&(window.visualViewport.addEventListener("scroll",e,{passive:!0}),window.visualViewport.addEventListener("resize",e,{passive:!0})),P=!0}}function O(e){const t=$.get(e.id);if(t)return t;const n=document.createElement("div"),o=document.createElement("div"),s=document.createElement("div");s.className="spsk-comment",n.append(o,s);const i={anchor:e.anchor,boxEl:n,badgeEl:o,commentEl:s,elRef:null,missing:!0};return $.set(e.id,i),I.appendChild(n),i}const R=(e,t)=>{const n=`${t.size}px`,o=t.color.toLowerCase();e.anchor=t.anchor,e.boxEl.className=`spsk-box spsk-box--${o}`,e.boxEl.style.setProperty("--spsk-border-w",t.size/4+"px"),e.boxEl.classList.toggle("badge-hidden","None"===t.labelFormat),e.badgeEl.className=`spsk-badge spsk-badge--${t.shape} spsk-badge--${o} spsk-badge--${t.position}`,e.badgeEl.style.fontSize=n,e.badgeEl.textContent=function(e,t="Numbers"){if(e<0)throw new Error("label must be >= 0");switch(t){case"UpperAlpha":return _(e).toUpperCase();case"LowerAlpha":return _(e).toLowerCase();case"None":return null;default:return String(e)}}(t.label,t.labelFormat),t.comment?(e.commentEl.textContent=t.comment,e.commentEl.style.display="inline",e.commentEl.style.fontSize=n):(e.commentEl.textContent="",e.commentEl.style.display="none")};async function W(){I&&(I.innerHTML="",$.clear())}function B(e){try{return document.querySelector(e)}catch{return null}}function F(){for(const[e,t]of $.entries()){const e=B(t.anchor.value);if(t.elRef=e?new WeakRef(e):null,!e){t.boxEl.style.display="none",t.missing=!0;continue}t.boxEl.style.display="",t.missing=!1;const n=e.getBoundingClientRect();t.boxEl.style.left=`${n.left}px`,t.boxEl.style.top=`${n.top}px`,t.boxEl.style.width=`${n.width}px`,t.boxEl.style.height=`${n.height}px`}}function _(e){let t=e-1,n="";for(;t>=0;){const e=t%26;n=String.fromCharCode(65+e)+n,t=Math.floor(t/26)-1}return n}const z=new class{enabled=!1;onPick;onClick=e=>this.handleClick(e);onPointerDown=e=>this.handlePointerDown(e);onMouseOver=e=>this.highlight(e);hoverBox=null;cleanupTemp;lastHoverEl;constructor(e){this.onPick=e}setEnabled(e){e!==this.enabled&&(this.enabled=e,e?(document.addEventListener("click",this.onClick,!0),document.addEventListener("pointerdown",this.onPointerDown,!0),document.addEventListener("mouseover",this.onMouseOver,!0)):(document.removeEventListener("click",this.onClick,!0),document.removeEventListener("pointerdown",this.onPointerDown,!0),document.removeEventListener("mouseover",this.onMouseOver,!0),this.cleanupTemp?.(),this.lastHoverEl=null,this.removeHover()))}handleClick(e){this.enabled&&(e.preventDefault(),e.stopPropagation(),e.stopImmediatePropagation?.())}handlePointerDown(e){if(!this.enabled)return;if(0!==e.button||!e.isPrimary)return;e.preventDefault(),e.stopPropagation(),e.stopImmediatePropagation?.();const t=e.target;t&&1===t.nodeType&&(this.onPick(t),this.cleanupTemp?.())}highlight(e){if(!this.enabled)return;const t=e.target;if(!t||1!==t.nodeType)return;const n=t.getBoundingClientRect();this.ensureHover();const o=this.hoverBox;o.style.left=`${n.left+window.scrollX}px`,o.style.top=`${n.top+window.scrollY}px`,o.style.width=`${n.width}px`,o.style.height=`${n.height}px`,this.lastHoverEl!==t&&(this.cleanupTemp?.(),this.cleanupTemp=this.tempEnableIfDisabled(t),this.lastHoverEl=t)}tempEnableIfDisabled(e){const t=e;if(!("disabled"in t))return()=>{};if(!t.disabled)return()=>{};const n={disabled:t.disabled,aria:t.getAttribute("aria-disabled"),pe:t.style.pointerEvents};return t.disabled=!1,t.setAttribute("aria-disabled","true"),t.style.pointerEvents="auto",()=>{t.disabled=n.disabled,null===n.aria?t.removeAttribute("aria-disabled"):t.setAttribute("aria-disabled",n.aria),t.style.pointerEvents=n.pe}}ensureHover(){this.hoverBox||(this.hoverBox=document.createElement("div"),Object.assign(this.hoverBox.style,{position:"absolute",outline:"3px dashed rgba(99, 102, 241, 1)",background:"rgba(99, 102, 241, 0.3)",pointerEvents:"none",zIndex:"2147483647"}),document.body.appendChild(this.hoverBox))}removeHover(){this.hoverBox?.remove(),this.hoverBox=null}}(function(e){const t=function(e){return{kind:"css",value:f(e,{timeoutMs:500}),version:1}}(e);U?.postMessage({type:l,payload:{anchors:[t]},id:crypto.randomUUID()})});let U=null;chrome.runtime.onConnect.addListener(async l=>{(function(t){return function(e,t){return e.name===t}(t,e)})(l)&&(U=l,await A(),l.onMessage.addListener(async e=>{if(e?.type)switch(e.type){case t:l.postMessage({id:e.id,ok:!0});break;case n:z.setEnabled(!!e.payload?.enabled);break;case o:{const t=e.payload.items;await async function(e){if(I||await A(),!I)return;const t=new Set(e.map(e=>e.id));for(const[e,n]of $.entries())t.has(e)||(n.boxEl.remove(),$.delete(e));for(const t of e){const e=O(t);R(e,t)}await new Promise(e=>{requestAnimationFrame(()=>{F(),e()})})}(t),function(){const e=Array.from($.entries()).filter(([,e])=>e.missing).map(([e])=>e);U?.postMessage({type:a,payload:{missingIds:e},id:crypto.randomUUID()})}();break}case s:await W();break;case i:await async function(e){if(e===H)return;const t=H;H=e,null!=t&&$.get(t)?.boxEl.classList.remove("is-hovered"),null!=e&&$.get(e)?.boxEl.classList.add("is-hovered")}(e.payload.id);break;case r:{const e=function(){const e=document.documentElement,t=document.body??null,n=document.scrollingElement??null,o=Math.max(e.scrollWidth,e.offsetWidth,e.clientWidth,t?.scrollWidth??0,t?.offsetWidth??0,t?.clientWidth??0,n?.scrollWidth??0,n?.offsetWidth??0,n?.clientWidth??0),s=Math.max(e.scrollHeight,e.offsetHeight,e.clientHeight,t?.scrollHeight??0,t?.offsetHeight??0,t?.clientHeight??0,n?.scrollHeight??0,n?.offsetHeight??0,n?.clientHeight??0);let i=Number.POSITIVE_INFINITY,r=Number.POSITIVE_INFINITY,l=Number.NEGATIVE_INFINITY,a=Number.NEGATIVE_INFINITY,c=0,d=0;const u=(window.visualViewport?.pageLeft??window.scrollX)||0,h=(window.visualViewport?.pageTop??window.scrollY)||0,m=Array.from(document.querySelectorAll("*")).filter(T);for(const e of m){e.scrollWidth>c&&(c=e.scrollWidth),e.scrollHeight>d&&(d=e.scrollHeight);const t=e.getBoundingClientRect(),n=t.left+u,o=t.right+u,s=t.top+h,m=t.bottom+h;n<i&&(i=n),s<r&&(r=s),o>l&&(l=o),m>a&&(a=m)}isFinite(i)||(i=0),isFinite(r)||(r=0),isFinite(l)||(l=o),isFinite(a)||(a=s);const p=Math.max(0,Math.ceil(l-i)),f=Math.max(0,Math.ceil(a-r));return{width:Math.max(o,c,p),height:Math.max(s,d,f)}}();l.postMessage({type:c,payload:e})}}}),l.onDisconnect.addListener(()=>{z.setEnabled(!1),W()}))})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,